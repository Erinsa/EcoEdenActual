/*******************************************************************************************************************
Copyright (c) 2023 Cycling '74

The code that Max generates automatically and that end users are capable of
exporting and using, and any associated documentation files (the “Software”)
is a work of authorship for which Cycling '74 is the author and owner for
copyright purposes.

This Software is dual-licensed either under the terms of the Cycling '74
License for Max-Generated Code for Export, or alternatively under the terms
of the General Public License (GPL) Version 3. You may use the Software
according to either of these licenses as it is most appropriate for your
project on a case-by-case basis (proprietary or not).

A) Cycling '74 License for Max-Generated Code for Export

A license is hereby granted, free of charge, to any person obtaining a copy
of the Software (“Licensee”) to use, copy, modify, merge, publish, and
distribute copies of the Software, and to permit persons to whom the Software
is furnished to do so, subject to the following conditions:

The Software is licensed to Licensee for all uses that do not include the sale,
sublicensing, or commercial distribution of software that incorporates this
source code. This means that the Licensee is free to use this software for
educational, research, and prototyping purposes, to create musical or other
creative works with software that incorporates this source code, or any other
use that does not constitute selling software that makes use of this source
code. Commercial distribution also includes the packaging of free software with
other paid software, hardware, or software-provided commercial services.

For entities with UNDER $200k in annual revenue or funding, a license is hereby
granted, free of charge, for the sale, sublicensing, or commercial distribution
of software that incorporates this source code, for as long as the entity's
annual revenue remains below $200k annual revenue or funding.

For entities with OVER $200k in annual revenue or funding interested in the
sale, sublicensing, or commercial distribution of software that incorporates
this source code, please send inquiries to licensing@cycling74.com.

The above copyright notice and this license shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Please see
https://support.cycling74.com/hc/en-us/articles/10730637742483-RNBO-Export-Licensing-FAQ
for additional information

B) General Public License Version 3 (GPLv3)
Details of the GPLv3 license can be found at: https://www.gnu.org/licenses/gpl-3.0.html
*******************************************************************************************************************/

#include "RNBO_Common.h"
#include "RNBO_AudioSignal.h"

namespace RNBO {


#define trunc(x) ((Int)(x))

#if defined(__GNUC__) || defined(__clang__)
    #define RNBO_RESTRICT __restrict__
#elif defined(_MSC_VER)
    #define RNBO_RESTRICT __restrict
#endif

#define FIXEDSIZEARRAYINIT(...) { }

class rnbomatic : public PatcherInterfaceImpl {
public:

class RNBOSubpatcher_27 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_27()
    {
    }
    
    ~RNBOSubpatcher_27()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    inline number safemod(number f, number m) {
        if (m != 0) {
            Int f_trunc = (Int)(trunc(f));
            Int m_trunc = (Int)(trunc(m));
    
            if (f == f_trunc && m == m_trunc) {
                f = f_trunc % m_trunc;
            } else {
                if (m < 0) {
                    m = -m;
                }
    
                if (f >= m) {
                    if (f >= m * 2.0) {
                        number d = f / m;
                        Int i = (Int)(trunc(d));
                        d = d - i;
                        f = d * m;
                    } else {
                        f -= m;
                    }
                } else if (f <= -m) {
                    if (f <= -m * 2.0) {
                        number d = f / m;
                        Int i = (Int)(trunc(d));
                        d = d - i;
                        f = d * m;
                    } else {
                        f += m;
                    }
                }
            }
        } else {
            f = 0.0;
        }
    
        return f;
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number safepow(number base, number exponent) {
        return fixnan(rnbo_pow(base, exponent));
    }
    
    number scale(
        number x,
        number lowin,
        number hiin,
        number lowout,
        number highout,
        number pow
    ) {
        auto inscale = this->safediv(1., hiin - lowin);
        number outdiff = highout - lowout;
        number value = (x - lowin) * inscale;
    
        if (pow != 1) {
            if (value > 0)
                value = this->safepow(value, pow);
            else
                value = -this->safepow(-value, pow);
        }
    
        value = value * outdiff + lowout;
        return value;
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    inline number linearinterp(number frac, number x, number y) {
        return x + (y - x) * frac;
    }
    
    number samplerate() {
        return this->sr;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
    
        this->saw_tilde_01_perform(
            this->saw_tilde_01_frequency,
            this->saw_tilde_01_syncPhase,
            this->signals[0],
            this->dummyBuffer,
            n
        );
    
        this->gaintilde_01_perform(this->signals[0], out1, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 1; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->saw_tilde_01_dspsetup(forceDSPSetup);
        this->gaintilde_01_dspsetup(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void processTempoEvent(MillisecondTime , Tempo ) {}
    
    void processTransportEvent(MillisecondTime , TransportState ) {}
    
    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
    
    void onSampleRateChanged(double ) {}
    
    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("bass/message_obj-28") == objectId)
                this->message_01_listin_number_set(payload);
    
            if (TAG("bass/message_obj-93") == objectId)
                this->message_02_listin_number_set(payload);
    
            break;
            }
        case TAG("valin"):
            {
            if (TAG("bass/gain~_obj-13") == objectId)
                this->gaintilde_01_valin_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("bass/message_obj-28") == objectId)
                this->message_01_listin_list_set(payload);
    
            if (TAG("bass/message_obj-93") == objectId)
                this->message_02_listin_list_set(payload);
    
            break;
            }
        }
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("bass/message_obj-28") == objectId)
                this->message_01_listin_bang_bang();
    
            if (TAG("bass/message_obj-93") == objectId)
                this->message_02_listin_bang_bang();
    
            break;
            }
        }
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("bass/message_obj-28"):
            {
            return "bass/message_obj-28";
            }
        case TAG("bass/message_obj-93"):
            {
            return "bass/message_obj-93";
            }
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("bass/gain~_obj-13"):
            {
            return "bass/gain~_obj-13";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 0) {
            this->mtof_01_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        }
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
        this->mtof_01_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
    }
    
    protected:
    
    void message_01_listin_list_set(const list& v) {
        this->message_01_set_set(v);
    }
    
    void message_01_listin_number_set(number v) {
        this->message_01_set_set(v);
    }
    
    void message_01_listin_bang_bang() {
        this->message_01_trigger_bang();
    }
    
    void message_02_listin_list_set(const list& v) {
        this->message_02_set_set(v);
    }
    
    void message_02_listin_number_set(number v) {
        this->message_02_set_set(v);
    }
    
    void message_02_listin_bang_bang() {
        this->message_02_trigger_bang();
    }
    
    void eventinlet_01_out1_bang_bang() {
        this->expr_01_in1_bang();
    }
    
    void eventinlet_01_out1_list_set(const list& v) {
        {
            if (v->length > 1)
                this->expr_01_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_01_in1_set(converted);
        }
    }
    
    void gaintilde_01_valin_set(number v) {
        this->gaintilde_01_value_set(v);
    }
    
    void eventinlet_02_out1_bang_bang() {}
    
    void eventinlet_02_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->gaintilde_01_input_number_set(converted);
        }
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 1;
    }
    
    void initializeObjects() {
        this->message_01_init();
        this->message_02_init();
        this->gaintilde_01_init();
        this->mtof_01_innerScala_init();
        this->mtof_01_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {}
    
    void allocateDataRefs() {
        this->mtof_01_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_01_innerMtoF_buffer->setSampleRate(this->sr);
        this->mtof_01_innerMtoF_buffer = this->mtof_01_innerMtoF_buffer->allocateIfNeeded();
    }
    
    void gaintilde_01_outval_set(number ) {}
    
    void gaintilde_01_value_set(number v) {
        this->gaintilde_01_value = v;
        number value;
        value = this->scale(v, 0, 157, 0, 158 - 1, 1);
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("bass/gain~_obj-13"), v, this->_currentTime);
        this->gaintilde_01_outval_set(value);
    }
    
    void gaintilde_01_input_number_set(number v) {
        this->gaintilde_01_input_number = v;
    
        this->gaintilde_01_value_set(
            this->scale((v > 158 - 1 ? 158 - 1 : (v < 0 ? 0 : v)), 0, 158 - 1, 0, 157, 1)
        );
    }
    
    void eventinlet_02_out1_number_set(number v) {
        this->gaintilde_01_input_number_set(v);
    }
    
    void listindex_01_index_set(const list& v) {
        this->listindex_01_index = jsCreateListCopy(v);
    }
    
    void trigger_01_out2_set(number v) {
        {
            list converted = {v};
            this->listindex_01_index_set(converted);
        }
    }
    
    void listindex_01_out2_set(const list& ) {}
    
    void saw_tilde_01_frequency_set(number v) {
        this->saw_tilde_01_frequency = v;
    }
    
    void saw_tilde_01_syncPhase_set(number v) {
        this->saw_tilde_01_syncPhase = v;
    }
    
    void mtof_01_out_set(const list& v) {
        {
            if (v->length > 1)
                this->saw_tilde_01_syncPhase_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->saw_tilde_01_frequency_set(converted);
        }
    }
    
    void mtof_01_midivalue_set(const list& v) {
        this->mtof_01_midivalue = jsCreateListCopy(v);
        list tmp = list();
    
        for (int i = 0; i < this->mtof_01_midivalue->length; i++) {
            tmp->push(
                this->mtof_01_innerMtoF_next(this->mtof_01_midivalue[(Index)i], this->mtof_01_base)
            );
        }
    
        this->mtof_01_out_set(tmp);
    }
    
    void expr_03_out1_set(number v) {
        this->expr_03_out1 = v;
    
        {
            list converted = {this->expr_03_out1};
            this->mtof_01_midivalue_set(converted);
        }
    }
    
    void expr_03_in1_set(number in1) {
        this->expr_03_in1 = in1;
        this->expr_03_out1_set(this->expr_03_in1 + this->expr_03_in2);//#map:bass/+_obj-8:1
    }
    
    void listindex_01_out1_set(number v) {
        this->expr_03_in1_set(v);
    }
    
    void listindex_01_input_set(const list& v) {
        this->listindex_01_input = jsCreateListCopy(v);
        list result = jsCreateListCopy(v);
    
        if (this->listindex_01_index->length > 0 && this->listindex_01_index[0] < v->length && this->listindex_01_index[0] >= 0) {
            number nth = v[(Index)this->listindex_01_index[0]];
    
            if (this->listindex_01_index->length == 1)
                result->splice(this->listindex_01_index[0], 1);
            else
                result->splice(this->listindex_01_index[0], 1, this->listindex_01_index[1]);
    
            this->listindex_01_out2_set(result);
            this->listindex_01_out1_set(nth);
        } else if ((bool)(this->listindex_01_input->length))
            this->listindex_01_out2_set(v);
    }
    
    void message_01_out_set(const list& v) {
        this->listindex_01_input_set(v);
    }
    
    void message_01_trigger_bang() {
        this->message_01_out_set(this->message_01_set);
    }
    
    void trigger_01_out1_bang() {
        this->message_01_trigger_bang();
    }
    
    void trigger_01_input_number_set(number v) {
        this->trigger_01_out2_set(v);
        this->trigger_01_out1_bang();
    }
    
    void expr_02_out1_set(number v) {
        this->expr_02_out1 = v;
        this->trigger_01_input_number_set(this->expr_02_out1);
    }
    
    void expr_02_in1_bang() {
        this->expr_02_out1_set(this->expr_02_in1 - this->expr_02_in2);//#map:bass/-_obj-67:1
    }
    
    void route_01_nomatch_bang_bang() {
        this->expr_02_in1_bang();
    }
    
    void expr_02_in1_set(number in1) {
        this->expr_02_in1 = in1;
        this->expr_02_out1_set(this->expr_02_in1 - this->expr_02_in2);//#map:bass/-_obj-67:1
    }
    
    void expr_02_in2_set(number v) {
        this->expr_02_in2 = v;
    }
    
    void message_02_out_set(const list& v) {
        {
            if (v->length > 1)
                this->expr_02_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_02_in1_set(converted);
        }
    }
    
    void message_02_trigger_bang() {
        this->message_02_out_set(this->message_02_set);
    }
    
    void route_01_match1_bang_bang() {
        this->message_02_trigger_bang();
    }
    
    void route_01_match1_number_set(number v) {
        RNBO_UNUSED(v);
        this->message_02_trigger_bang();
    }
    
    void route_01_match1_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->message_02_trigger_bang();
    }
    
    void route_01_nomatch_number_set(number v) {
        this->expr_02_in1_set(v);
    }
    
    void route_01_nomatch_list_set(const list& v) {
        {
            if (v->length > 1)
                this->expr_02_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_02_in1_set(converted);
        }
    }
    
    void route_01_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_01_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_01_selector1) {
                if (input->length == 0)
                    this->route_01_match1_bang_bang();
                else if (input->length == 1)
                    this->route_01_match1_number_set(input[0]);
                else
                    this->route_01_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_01_nomatch_number_set(v[0]);
                } else {
                    this->route_01_nomatch_list_set(v);
                }
            }
        }
    }
    
    void route_01_input_number_set(number v) {
        this->route_01_input_list_set({v});
    }
    
    void expr_01_out1_set(number v) {
        this->expr_01_out1 = v;
        this->route_01_input_number_set(this->expr_01_out1);
    }
    
    void expr_01_in1_set(number in1) {
        this->expr_01_in1 = in1;
        this->expr_01_out1_set(this->safemod(this->expr_01_in1, this->expr_01_in2));//#map:bass/%_obj-69:1
    }
    
    void eventinlet_01_out1_number_set(number v) {
        this->expr_01_in1_set(v);
    }
    
    void message_01_set_set(const list& v) {
        this->message_01_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("bass/message_obj-28"), v, this->_currentTime);
    }
    
    void message_02_set_set(const list& v) {
        this->message_02_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("bass/message_obj-93"), v, this->_currentTime);
    }
    
    void expr_01_in1_bang() {
        this->expr_01_out1_set(this->safemod(this->expr_01_in1, this->expr_01_in2));//#map:bass/%_obj-69:1
    }
    
    void expr_01_in2_set(number v) {
        this->expr_01_in2 = v;
    }
    
    void saw_tilde_01_perform(
        number frequency,
        number syncPhase,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(syncPhase);
        auto __saw_tilde_01_didSync = this->saw_tilde_01_didSync;
        auto __saw_tilde_01_lastSyncDiff = this->saw_tilde_01_lastSyncDiff;
        auto __saw_tilde_01_lastSyncPhase = this->saw_tilde_01_lastSyncPhase;
        auto __saw_tilde_01_t = this->saw_tilde_01_t;
        Index i;
    
        for (i = 0; i < n; i++) {
            number dt = frequency / this->samplerate();
            number t1 = __saw_tilde_01_t + 0.5;
            t1 -= trunc(t1);
            number y = 2 * t1 - 1;
    
            if (dt != 0.0) {
                number syncDiff = 0 - __saw_tilde_01_lastSyncPhase;
                __saw_tilde_01_lastSyncPhase = 0;
                __saw_tilde_01_lastSyncDiff = syncDiff;
                number lookahead = 0 + syncDiff;
    
                if (t1 < dt) {
                    number d = t1 / dt;
                    y -= d + d - d * d - 1;
                } else if (t1 + dt > 1) {
                    number d = (t1 - 1) / dt;
                    y -= d + d + d * d + 1;
                } else if ((bool)(__saw_tilde_01_didSync)) {
                    y = 0;
                    __saw_tilde_01_didSync = false;
                } else if (lookahead > 1) {
                    y *= 0.5;
                    __saw_tilde_01_t = 0;
                    __saw_tilde_01_didSync = true;
                }
    
                __saw_tilde_01_t += dt;
    
                if (dt > 0) {
                    while (__saw_tilde_01_t >= 1) {
                        __saw_tilde_01_t -= 1;
                    }
                } else {
                    while (__saw_tilde_01_t <= 0) {
                        __saw_tilde_01_t += 1;
                    }
                }
            }
    
            y = this->saw_tilde_01_dcblocker_next(y, 0.9997);
            out1[(Index)i] = 0.5 * y;
            out2[(Index)i] = __saw_tilde_01_t;
        }
    
        this->saw_tilde_01_t = __saw_tilde_01_t;
        this->saw_tilde_01_lastSyncPhase = __saw_tilde_01_lastSyncPhase;
        this->saw_tilde_01_lastSyncDiff = __saw_tilde_01_lastSyncDiff;
        this->saw_tilde_01_didSync = __saw_tilde_01_didSync;
    }
    
    void gaintilde_01_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __gaintilde_01_interp = this->gaintilde_01_interp;
        auto __gaintilde_01_loginc = this->gaintilde_01_loginc;
        auto __gaintilde_01_zval = this->gaintilde_01_zval;
        auto __gaintilde_01_value = this->gaintilde_01_value;
        number mult = (__gaintilde_01_value <= 0 ? 0. : __gaintilde_01_zval * rnbo_exp(__gaintilde_01_value * __gaintilde_01_loginc));
        auto iv = this->mstosamps(__gaintilde_01_interp);
    
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input_signal[(Index)i] * this->gaintilde_01_ramp_next(mult, iv, iv);
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void message_01_init() {
        this->message_01_set_set({1, 3, 5, 6, 8, 10, 12});
    }
    
    void message_02_init() {
        this->message_02_set_set({7});
    }
    
    number gaintilde_01_ramp_d_next(number x) {
        number temp = (number)(x - this->gaintilde_01_ramp_d_prev);
        this->gaintilde_01_ramp_d_prev = x;
        return temp;
    }
    
    void gaintilde_01_ramp_d_dspsetup() {
        this->gaintilde_01_ramp_d_reset();
    }
    
    void gaintilde_01_ramp_d_reset() {
        this->gaintilde_01_ramp_d_prev = 0;
    }
    
    number gaintilde_01_ramp_next(number x, number up, number down) {
        if (this->gaintilde_01_ramp_d_next(x) != 0.) {
            if (x > this->gaintilde_01_ramp_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->gaintilde_01_ramp_index = _up;
                this->gaintilde_01_ramp_increment = (x - this->gaintilde_01_ramp_prev) / _up;
            } else if (x < this->gaintilde_01_ramp_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->gaintilde_01_ramp_index = _down;
                this->gaintilde_01_ramp_increment = (x - this->gaintilde_01_ramp_prev) / _down;
            }
        }
    
        if (this->gaintilde_01_ramp_index > 0) {
            this->gaintilde_01_ramp_prev += this->gaintilde_01_ramp_increment;
            this->gaintilde_01_ramp_index -= 1;
        } else {
            this->gaintilde_01_ramp_prev = x;
        }
    
        return this->gaintilde_01_ramp_prev;
    }
    
    void gaintilde_01_ramp_reset() {
        this->gaintilde_01_ramp_prev = 0;
        this->gaintilde_01_ramp_index = 0;
        this->gaintilde_01_ramp_increment = 0;
        this->gaintilde_01_ramp_d_reset();
    }
    
    void gaintilde_01_init() {
        this->gaintilde_01_loginc = rnbo_log(1.072);
        this->gaintilde_01_zval = 7.943 * rnbo_exp(-((158 - 1) * this->gaintilde_01_loginc));
    }
    
    void gaintilde_01_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->gaintilde_01_value;
    }
    
    void gaintilde_01_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->gaintilde_01_value_set(preset["value"]);
    }
    
    void gaintilde_01_dspsetup(bool force) {
        if ((bool)(this->gaintilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->gaintilde_01_setupDone = true;
        this->gaintilde_01_ramp_d_dspsetup();
    }
    
    number mtof_01_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_01_innerMtoF_lastInValue && tuning == this->mtof_01_innerMtoF_lastTuning)
            return this->mtof_01_innerMtoF_lastOutValue;
    
        this->mtof_01_innerMtoF_lastInValue = midivalue;
        this->mtof_01_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_01_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_01_innerMtoF_lastOutValue;
    }
    
    void mtof_01_innerMtoF_reset() {
        this->mtof_01_innerMtoF_lastInValue = 0;
        this->mtof_01_innerMtoF_lastOutValue = 0;
        this->mtof_01_innerMtoF_lastTuning = 0;
    }
    
    void mtof_01_innerScala_mid(int v) {
        this->mtof_01_innerScala_kbmMid = v;
        this->mtof_01_innerScala_updateRefFreq();
    }
    
    void mtof_01_innerScala_ref(int v) {
        this->mtof_01_innerScala_kbmRefNum = v;
        this->mtof_01_innerScala_updateRefFreq();
    }
    
    void mtof_01_innerScala_base(number v) {
        this->mtof_01_innerScala_kbmRefFreq = v;
        this->mtof_01_innerScala_updateRefFreq();
    }
    
    void mtof_01_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_01_innerScala_updateScale(sclValid);
    }
    
    void mtof_01_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_01_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_01_innerScala_updateMap(map);
        }
    }
    
    number mtof_01_innerScala_mtof(number note) {
        if ((bool)(this->mtof_01_innerScala_lastValid) && this->mtof_01_innerScala_lastNote == note) {
            return this->mtof_01_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_01_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_01_innerScala_applySCL(degoct[0], fract(note), this->mtof_01_innerScala_refFreq);
        }
    
        this->mtof_01_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_01_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_01_innerScala_lastValid) && this->mtof_01_innerScala_lastFreq == hz) {
            return this->mtof_01_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_01_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_01_innerScala_kbmSize == 0) {
            out = this->mtof_01_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_01_innerScala_octdegree(degree, this->mtof_01_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_01_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_01_innerScala_kbmValid[(Index)(i + this->mtof_01_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_01_innerScala_kbmSize + entry + this->mtof_01_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_01_innerScala_updateLast(out, hz);
        return this->mtof_01_innerScala_lastNote;
    }
    
    int mtof_01_innerScala_updateScale(list scl) {
        if (scl->length < 1) {
            return 0;
        }
    
        number sclDataEntries = scl[0] * 2 + 1;
    
        if (sclDataEntries <= scl->length) {
            this->mtof_01_innerScala_lastValid = false;
            this->mtof_01_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < sclDataEntries; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_01_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_01_innerScala_sclOctaveMul = last;
            this->mtof_01_innerScala_sclEntryCount = (int)(this->mtof_01_innerScala_sclExpMul->length);
    
            if (scl->length >= sclDataEntries + 3) {
                this->mtof_01_innerScala_kbmMid = (int)(scl[(Index)(sclDataEntries + 2)]);
                this->mtof_01_innerScala_kbmRefNum = (int)(scl[(Index)(sclDataEntries + 1)]);
                this->mtof_01_innerScala_kbmRefFreq = scl[(Index)(sclDataEntries + 0)];
                this->mtof_01_innerScala_kbmSize = (int)(0);
            }
    
            this->mtof_01_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_01_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_01_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_01_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_01_innerScala_kbmSize = (int)(size);
            this->mtof_01_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_01_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_01_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_01_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_01_innerScala_kbmRefFreq = kbm[5];
            this->mtof_01_innerScala_kbmOctaveDegree = octave;
            this->mtof_01_innerScala_kbmValid = kbm;
            this->mtof_01_innerScala_kbmMapSize = (kbm->length - this->mtof_01_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_01_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_01_innerScala_KBM_MAP_OFFSET));
            this->mtof_01_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_01_innerScala_updateLast(number note, number freq) {
        this->mtof_01_innerScala_lastValid = true;
        this->mtof_01_innerScala_lastNote = note;
        this->mtof_01_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_01_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_01_innerScala_refFreq) / this->mtof_01_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_01_innerScala_sclEntryCount; i++) {
            number c = this->mtof_01_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_01_innerScala_refFreq);
            n = this->mtof_01_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_01_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_01_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_01_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_01_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_01_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_01_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_01_innerScala_applyKBM(number note) {
        if ((this->mtof_01_innerScala_kbmMin == this->mtof_01_innerScala_kbmMax && this->mtof_01_innerScala_kbmMax == 0) || (note >= this->mtof_01_innerScala_kbmMin && note <= this->mtof_01_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_01_innerScala_kbmMid));
    
            if (this->mtof_01_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_01_innerScala_octdegree(degree, this->mtof_01_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_01_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_01_innerScala_kbmValid[(Index)(this->mtof_01_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_01_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_01_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_01_innerScala_octdegree(degree, this->mtof_01_innerScala_sclEntryCount);
        return this->mtof_01_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_01_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_01_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_01_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_01_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_01_innerScala_sclOctaveMul);
    }
    
    void mtof_01_innerScala_updateRefFreq() {
        this->mtof_01_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_01_innerScala_kbmRefNum - this->mtof_01_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_01_innerScala_refFreq = this->mtof_01_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_01_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_01_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_01_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_01_innerScala_kbmSize) {
                if (index < this->mtof_01_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_01_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_01_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_01_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_01_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_01_innerScala_refFreq = this->mtof_01_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_01_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_01_innerScala_reset() {
        this->mtof_01_innerScala_internal = true;
        this->mtof_01_innerScala_lastValid = false;
        this->mtof_01_innerScala_lastNote = 0;
        this->mtof_01_innerScala_lastFreq = 0;
        this->mtof_01_innerScala_sclEntryCount = 0;
        this->mtof_01_innerScala_sclOctaveMul = 1;
        this->mtof_01_innerScala_sclExpMul = {};
        this->mtof_01_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_01_innerScala_kbmMid = 60;
        this->mtof_01_innerScala_kbmRefNum = 69;
        this->mtof_01_innerScala_kbmRefFreq = 440;
        this->mtof_01_innerScala_kbmSize = 0;
        this->mtof_01_innerScala_kbmMin = 0;
        this->mtof_01_innerScala_kbmMax = 0;
        this->mtof_01_innerScala_kbmOctaveDegree = 12;
        this->mtof_01_innerScala_kbmMapSize = 0;
        this->mtof_01_innerScala_refFreq = 261.63;
    }
    
    void mtof_01_init() {
        this->mtof_01_innerScala_update(this->mtof_01_scale, this->mtof_01_map);
    }
    
    number saw_tilde_01_dcblocker_next(number x, number gain) {
        number y = x - this->saw_tilde_01_dcblocker_xm1 + this->saw_tilde_01_dcblocker_ym1 * gain;
        this->saw_tilde_01_dcblocker_xm1 = x;
        this->saw_tilde_01_dcblocker_ym1 = y;
        return y;
    }
    
    void saw_tilde_01_dcblocker_reset() {
        this->saw_tilde_01_dcblocker_xm1 = 0;
        this->saw_tilde_01_dcblocker_ym1 = 0;
    }
    
    void saw_tilde_01_dcblocker_dspsetup() {
        this->saw_tilde_01_dcblocker_reset();
    }
    
    void saw_tilde_01_dspsetup(bool force) {
        if ((bool)(this->saw_tilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->saw_tilde_01_setupDone = true;
        this->saw_tilde_01_dcblocker_dspsetup();
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        route_01_selector1 = 0;
        expr_01_in1 = 0;
        expr_01_in2 = 7;
        expr_01_out1 = 0;
        expr_02_in1 = 0;
        expr_02_in2 = 1;
        expr_02_out1 = 0;
        expr_03_in1 = 0;
        expr_03_in2 = 24;
        expr_03_out1 = 0;
        gaintilde_01_input_number = 0;
        gaintilde_01_value = 0;
        gaintilde_01_interp = 10;
        mtof_01_base = 440;
        saw_tilde_01_frequency = 0;
        saw_tilde_01_syncPhase = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        gaintilde_01_lastValue = 0;
        gaintilde_01_loginc = 1;
        gaintilde_01_zval = 0;
        gaintilde_01_ramp_d_prev = 0;
        gaintilde_01_ramp_prev = 0;
        gaintilde_01_ramp_index = 0;
        gaintilde_01_ramp_increment = 0;
        gaintilde_01_setupDone = false;
        mtof_01_innerMtoF_lastInValue = 0;
        mtof_01_innerMtoF_lastOutValue = 0;
        mtof_01_innerMtoF_lastTuning = 0;
        mtof_01_innerScala_internal = true;
        mtof_01_innerScala_lastValid = false;
        mtof_01_innerScala_lastNote = 0;
        mtof_01_innerScala_lastFreq = 0;
        mtof_01_innerScala_sclEntryCount = 0;
        mtof_01_innerScala_sclOctaveMul = 1;
        mtof_01_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_01_innerScala_kbmMid = 60;
        mtof_01_innerScala_kbmRefNum = 69;
        mtof_01_innerScala_kbmRefFreq = 440;
        mtof_01_innerScala_kbmSize = 0;
        mtof_01_innerScala_kbmMin = 0;
        mtof_01_innerScala_kbmMax = 0;
        mtof_01_innerScala_kbmOctaveDegree = 12;
        mtof_01_innerScala_kbmMapSize = 0;
        mtof_01_innerScala_refFreq = 261.63;
        saw_tilde_01_t = 0;
        saw_tilde_01_lastSyncPhase = 0;
        saw_tilde_01_lastSyncDiff = 0;
        saw_tilde_01_didSync = false;
        saw_tilde_01_dcblocker_xm1 = 0;
        saw_tilde_01_dcblocker_ym1 = 0;
        saw_tilde_01_setupDone = false;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        list message_01_set;
        list listindex_01_input;
        list listindex_01_index;
        list message_02_set;
        number route_01_selector1;
        number expr_01_in1;
        number expr_01_in2;
        number expr_01_out1;
        number expr_02_in1;
        number expr_02_in2;
        number expr_02_out1;
        number expr_03_in1;
        number expr_03_in2;
        number expr_03_out1;
        number gaintilde_01_input_number;
        number gaintilde_01_value;
        number gaintilde_01_interp;
        list mtof_01_midivalue;
        list mtof_01_scale;
        list mtof_01_map;
        number mtof_01_base;
        number saw_tilde_01_frequency;
        number saw_tilde_01_syncPhase;
        MillisecondTime _currentTime;
        SampleIndex audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[1];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number gaintilde_01_lastValue;
        number gaintilde_01_loginc;
        number gaintilde_01_zval;
        number gaintilde_01_ramp_d_prev;
        number gaintilde_01_ramp_prev;
        number gaintilde_01_ramp_index;
        number gaintilde_01_ramp_increment;
        bool gaintilde_01_setupDone;
        number mtof_01_innerMtoF_lastInValue;
        number mtof_01_innerMtoF_lastOutValue;
        number mtof_01_innerMtoF_lastTuning;
        Float64BufferRef mtof_01_innerMtoF_buffer;
        bool mtof_01_innerScala_internal;
        const Index mtof_01_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_01_innerScala_lastValid;
        number mtof_01_innerScala_lastNote;
        number mtof_01_innerScala_lastFreq;
        int mtof_01_innerScala_sclEntryCount;
        number mtof_01_innerScala_sclOctaveMul;
        list mtof_01_innerScala_sclExpMul;
        list mtof_01_innerScala_kbmValid;
        int mtof_01_innerScala_kbmMid;
        int mtof_01_innerScala_kbmRefNum;
        number mtof_01_innerScala_kbmRefFreq;
        int mtof_01_innerScala_kbmSize;
        int mtof_01_innerScala_kbmMin;
        int mtof_01_innerScala_kbmMax;
        int mtof_01_innerScala_kbmOctaveDegree;
        Index mtof_01_innerScala_kbmMapSize;
        number mtof_01_innerScala_refFreq;
        number saw_tilde_01_t;
        number saw_tilde_01_lastSyncPhase;
        number saw_tilde_01_lastSyncDiff;
        bool saw_tilde_01_didSync;
        number saw_tilde_01_dcblocker_xm1;
        number saw_tilde_01_dcblocker_ym1;
        bool saw_tilde_01_setupDone;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_28 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_28()
    {
    }
    
    ~RNBOSubpatcher_28()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    number random(number low, number high) {
        number range = high - low;
        return rand01() * range + low;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void processTempoEvent(MillisecondTime , Tempo ) {}
    
    void processTransportEvent(MillisecondTime , TransportState ) {}
    
    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
    
    void onSampleRateChanged(double ) {}
    
    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
    
    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
    
    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
    
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void eventinlet_03_out1_number_set(number v) {
        this->intnum_02_input_number_set(v);
    }
    
    void eventinlet_03_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->intnum_02_input_number_set(converted);
        }
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->random_01_nz_init();
        this->random_02_nz_init();
        this->random_03_nz_init();
        this->random_04_nz_init();
        this->random_05_nz_init();
        this->random_06_nz_init();
        this->random_07_nz_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {}
    
    void allocateDataRefs() {}
    
    void print_02_input_number_set(number v) {
        {
            console->log("int", v);
        }
    }
    
    void route_08_nomatch_bang_bang() {}
    
    void route_08_input_bang_bang() {
        this->route_08_nomatch_bang_bang();
    }
    
    void route_07_nomatch_bang_bang() {
        this->route_08_input_bang_bang();
    }
    
    void route_07_input_bang_bang() {
        this->route_07_nomatch_bang_bang();
    }
    
    void route_06_nomatch_bang_bang() {
        this->route_07_input_bang_bang();
    }
    
    void route_06_input_bang_bang() {
        this->route_06_nomatch_bang_bang();
    }
    
    void route_05_nomatch_bang_bang() {
        this->route_06_input_bang_bang();
    }
    
    void route_05_input_bang_bang() {
        this->route_05_nomatch_bang_bang();
    }
    
    void route_04_nomatch_bang_bang() {
        this->route_05_input_bang_bang();
    }
    
    void route_04_input_bang_bang() {
        this->route_04_nomatch_bang_bang();
    }
    
    void route_03_nomatch_bang_bang() {
        this->route_04_input_bang_bang();
    }
    
    void route_03_input_bang_bang() {
        this->route_03_nomatch_bang_bang();
    }
    
    void route_02_nomatch_bang_bang() {
        this->route_03_input_bang_bang();
    }
    
    void intnum_02_value_set(number v) {
        this->intnum_02_value = v;
        this->intnum_02_stored = v;
    }
    
    void trigger_02_out2_set(number v) {
        this->intnum_02_value_set(v);
    }
    
    void print_01_input_number_set(number v) {
        {
            console->log("out", v);
        }
    }
    
    void eventoutlet_01_in1_number_set(number v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_04_out1_number_set(v);
    }
    
    void trigger_02_out1_set(number v) {
        this->print_01_input_number_set(v);
        this->eventoutlet_01_in1_number_set(v);
    }
    
    void trigger_02_input_number_set(number v) {
        this->trigger_02_out2_set(trunc(v));
        this->trigger_02_out1_set(trunc(v));
    }
    
    void intnum_01_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_01_input_bang_bang() {
        this->intnum_01_out_set(trunc(this->intnum_01_stored));
    }
    
    void select_01_match1_bang() {
        this->intnum_01_input_bang_bang();
    }
    
    void intnum_03_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_03_input_bang_bang() {
        this->intnum_03_out_set(trunc(this->intnum_03_stored));
    }
    
    void select_01_match2_bang() {
        this->intnum_03_input_bang_bang();
    }
    
    void intnum_04_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_04_input_bang_bang() {
        this->intnum_04_out_set(trunc(this->intnum_04_stored));
    }
    
    void select_01_match3_bang() {
        this->intnum_04_input_bang_bang();
    }
    
    void select_01_nomatch_number_set(number ) {}
    
    void select_01_input_number_set(number v) {
        if (v == this->select_01_test1)
            this->select_01_match1_bang();
        else if (v == this->select_01_test2)
            this->select_01_match2_bang();
        else if (v == this->select_01_test3)
            this->select_01_match3_bang();
        else
            this->select_01_nomatch_number_set(v);
    }
    
    void expr_04_out1_set(number v) {
        this->expr_04_out1 = v;
        this->select_01_input_number_set(this->expr_04_out1);
    }
    
    void expr_04_in1_set(number in1) {
        this->expr_04_in1 = in1;
    
        this->expr_04_out1_set(
            (this->expr_04_in2 == 0 ? 0 : rnbo_fround((this->expr_04_in2 == 0. ? 0. : this->expr_04_in1 * 1 / this->expr_04_in2)) * this->expr_04_in2)
        );//#map:chord1markov/round_obj-23:1
    }
    
    void random_01_result_set(number v) {
        this->expr_04_in1_set(v);
    }
    
    void random_01_trigger_bang() {
        {
            this->random_01_result_set(this->random(0, this->random_01_limit));
        }
    }
    
    void route_02_match1_bang_bang() {
        this->random_01_trigger_bang();
    }
    
    void route_02_match1_number_set(number v) {
        RNBO_UNUSED(v);
        this->random_01_trigger_bang();
    }
    
    void route_02_match1_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->random_01_trigger_bang();
    }
    
    void intnum_05_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_05_input_bang_bang() {
        this->intnum_05_out_set(trunc(this->intnum_05_stored));
    }
    
    void select_02_match1_bang() {
        this->intnum_05_input_bang_bang();
    }
    
    void intnum_06_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_06_input_bang_bang() {
        this->intnum_06_out_set(trunc(this->intnum_06_stored));
    }
    
    void select_02_match2_bang() {
        this->intnum_06_input_bang_bang();
    }
    
    void intnum_07_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_07_input_bang_bang() {
        this->intnum_07_out_set(trunc(this->intnum_07_stored));
    }
    
    void select_02_match3_bang() {
        this->intnum_07_input_bang_bang();
    }
    
    void select_02_nomatch_number_set(number ) {}
    
    void select_02_input_number_set(number v) {
        if (v == this->select_02_test1)
            this->select_02_match1_bang();
        else if (v == this->select_02_test2)
            this->select_02_match2_bang();
        else if (v == this->select_02_test3)
            this->select_02_match3_bang();
        else
            this->select_02_nomatch_number_set(v);
    }
    
    void expr_05_out1_set(number v) {
        this->expr_05_out1 = v;
        this->select_02_input_number_set(this->expr_05_out1);
    }
    
    void expr_05_in1_set(number in1) {
        this->expr_05_in1 = in1;
    
        this->expr_05_out1_set(
            (this->expr_05_in2 == 0 ? 0 : rnbo_fround((this->expr_05_in2 == 0. ? 0. : this->expr_05_in1 * 1 / this->expr_05_in2)) * this->expr_05_in2)
        );//#map:chord1markov/round_obj-52:1
    }
    
    void random_02_result_set(number v) {
        this->expr_05_in1_set(v);
    }
    
    void random_02_trigger_bang() {
        {
            this->random_02_result_set(this->random(0, this->random_02_limit));
        }
    }
    
    void route_03_match1_bang_bang() {
        this->random_02_trigger_bang();
    }
    
    void route_03_match1_number_set(number v) {
        RNBO_UNUSED(v);
        this->random_02_trigger_bang();
    }
    
    void route_03_match1_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->random_02_trigger_bang();
    }
    
    void intnum_08_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_08_input_bang_bang() {
        this->intnum_08_out_set(trunc(this->intnum_08_stored));
    }
    
    void select_03_match1_bang() {
        this->intnum_08_input_bang_bang();
    }
    
    void intnum_09_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_09_input_bang_bang() {
        this->intnum_09_out_set(trunc(this->intnum_09_stored));
    }
    
    void select_03_match2_bang() {
        this->intnum_09_input_bang_bang();
    }
    
    void intnum_10_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_10_input_bang_bang() {
        this->intnum_10_out_set(trunc(this->intnum_10_stored));
    }
    
    void select_03_match3_bang() {
        this->intnum_10_input_bang_bang();
    }
    
    void select_03_nomatch_number_set(number ) {}
    
    void select_03_input_number_set(number v) {
        if (v == this->select_03_test1)
            this->select_03_match1_bang();
        else if (v == this->select_03_test2)
            this->select_03_match2_bang();
        else if (v == this->select_03_test3)
            this->select_03_match3_bang();
        else
            this->select_03_nomatch_number_set(v);
    }
    
    void expr_06_out1_set(number v) {
        this->expr_06_out1 = v;
        this->select_03_input_number_set(this->expr_06_out1);
    }
    
    void expr_06_in1_set(number in1) {
        this->expr_06_in1 = in1;
    
        this->expr_06_out1_set(
            (this->expr_06_in2 == 0 ? 0 : rnbo_fround((this->expr_06_in2 == 0. ? 0. : this->expr_06_in1 * 1 / this->expr_06_in2)) * this->expr_06_in2)
        );//#map:chord1markov/round_obj-59:1
    }
    
    void random_03_result_set(number v) {
        this->expr_06_in1_set(v);
    }
    
    void random_03_trigger_bang() {
        {
            this->random_03_result_set(this->random(0, this->random_03_limit));
        }
    }
    
    void route_04_match1_bang_bang() {
        this->random_03_trigger_bang();
    }
    
    void route_04_match1_number_set(number v) {
        RNBO_UNUSED(v);
        this->random_03_trigger_bang();
    }
    
    void route_04_match1_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->random_03_trigger_bang();
    }
    
    void intnum_11_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_11_input_bang_bang() {
        this->intnum_11_out_set(trunc(this->intnum_11_stored));
    }
    
    void select_04_match1_bang() {
        this->intnum_11_input_bang_bang();
    }
    
    void intnum_12_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_12_input_bang_bang() {
        this->intnum_12_out_set(trunc(this->intnum_12_stored));
    }
    
    void select_04_match2_bang() {
        this->intnum_12_input_bang_bang();
    }
    
    void intnum_13_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_13_input_bang_bang() {
        this->intnum_13_out_set(trunc(this->intnum_13_stored));
    }
    
    void select_04_match3_bang() {
        this->intnum_13_input_bang_bang();
    }
    
    void select_04_nomatch_number_set(number ) {}
    
    void select_04_input_number_set(number v) {
        if (v == this->select_04_test1)
            this->select_04_match1_bang();
        else if (v == this->select_04_test2)
            this->select_04_match2_bang();
        else if (v == this->select_04_test3)
            this->select_04_match3_bang();
        else
            this->select_04_nomatch_number_set(v);
    }
    
    void expr_07_out1_set(number v) {
        this->expr_07_out1 = v;
        this->select_04_input_number_set(this->expr_07_out1);
    }
    
    void expr_07_in1_set(number in1) {
        this->expr_07_in1 = in1;
    
        this->expr_07_out1_set(
            (this->expr_07_in2 == 0 ? 0 : rnbo_fround((this->expr_07_in2 == 0. ? 0. : this->expr_07_in1 * 1 / this->expr_07_in2)) * this->expr_07_in2)
        );//#map:chord1markov/round_obj-83:1
    }
    
    void random_04_result_set(number v) {
        this->expr_07_in1_set(v);
    }
    
    void random_04_trigger_bang() {
        {
            this->random_04_result_set(this->random(0, this->random_04_limit));
        }
    }
    
    void route_05_match1_bang_bang() {
        this->random_04_trigger_bang();
    }
    
    void route_05_match1_number_set(number v) {
        RNBO_UNUSED(v);
        this->random_04_trigger_bang();
    }
    
    void route_05_match1_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->random_04_trigger_bang();
    }
    
    void intnum_14_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_14_input_bang_bang() {
        this->intnum_14_out_set(trunc(this->intnum_14_stored));
    }
    
    void select_05_match1_bang() {
        this->intnum_14_input_bang_bang();
    }
    
    void intnum_15_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_15_input_bang_bang() {
        this->intnum_15_out_set(trunc(this->intnum_15_stored));
    }
    
    void select_05_match2_bang() {
        this->intnum_15_input_bang_bang();
    }
    
    void intnum_16_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_16_input_bang_bang() {
        this->intnum_16_out_set(trunc(this->intnum_16_stored));
    }
    
    void select_05_match3_bang() {
        this->intnum_16_input_bang_bang();
    }
    
    void select_05_nomatch_number_set(number ) {}
    
    void select_05_input_number_set(number v) {
        if (v == this->select_05_test1)
            this->select_05_match1_bang();
        else if (v == this->select_05_test2)
            this->select_05_match2_bang();
        else if (v == this->select_05_test3)
            this->select_05_match3_bang();
        else
            this->select_05_nomatch_number_set(v);
    }
    
    void expr_08_out1_set(number v) {
        this->expr_08_out1 = v;
        this->select_05_input_number_set(this->expr_08_out1);
    }
    
    void expr_08_in1_set(number in1) {
        this->expr_08_in1 = in1;
    
        this->expr_08_out1_set(
            (this->expr_08_in2 == 0 ? 0 : rnbo_fround((this->expr_08_in2 == 0. ? 0. : this->expr_08_in1 * 1 / this->expr_08_in2)) * this->expr_08_in2)
        );//#map:chord1markov/round_obj-71:1
    }
    
    void random_05_result_set(number v) {
        this->expr_08_in1_set(v);
    }
    
    void random_05_trigger_bang() {
        {
            this->random_05_result_set(this->random(0, this->random_05_limit));
        }
    }
    
    void route_06_match1_bang_bang() {
        this->random_05_trigger_bang();
    }
    
    void route_06_match1_number_set(number v) {
        RNBO_UNUSED(v);
        this->random_05_trigger_bang();
    }
    
    void route_06_match1_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->random_05_trigger_bang();
    }
    
    void intnum_17_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_17_input_bang_bang() {
        this->intnum_17_out_set(trunc(this->intnum_17_stored));
    }
    
    void select_06_match1_bang() {
        this->intnum_17_input_bang_bang();
    }
    
    void intnum_18_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_18_input_bang_bang() {
        this->intnum_18_out_set(trunc(this->intnum_18_stored));
    }
    
    void select_06_match2_bang() {
        this->intnum_18_input_bang_bang();
    }
    
    void intnum_19_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_19_input_bang_bang() {
        this->intnum_19_out_set(trunc(this->intnum_19_stored));
    }
    
    void select_06_match3_bang() {
        this->intnum_19_input_bang_bang();
    }
    
    void select_06_nomatch_number_set(number ) {}
    
    void select_06_input_number_set(number v) {
        if (v == this->select_06_test1)
            this->select_06_match1_bang();
        else if (v == this->select_06_test2)
            this->select_06_match2_bang();
        else if (v == this->select_06_test3)
            this->select_06_match3_bang();
        else
            this->select_06_nomatch_number_set(v);
    }
    
    void expr_09_out1_set(number v) {
        this->expr_09_out1 = v;
        this->select_06_input_number_set(this->expr_09_out1);
    }
    
    void expr_09_in1_set(number in1) {
        this->expr_09_in1 = in1;
    
        this->expr_09_out1_set(
            (this->expr_09_in2 == 0 ? 0 : rnbo_fround((this->expr_09_in2 == 0. ? 0. : this->expr_09_in1 * 1 / this->expr_09_in2)) * this->expr_09_in2)
        );//#map:chord1markov/round_obj-77:1
    }
    
    void random_06_result_set(number v) {
        this->expr_09_in1_set(v);
    }
    
    void random_06_trigger_bang() {
        {
            this->random_06_result_set(this->random(0, this->random_06_limit));
        }
    }
    
    void route_07_match1_bang_bang() {
        this->random_06_trigger_bang();
    }
    
    void route_07_match1_number_set(number v) {
        RNBO_UNUSED(v);
        this->random_06_trigger_bang();
    }
    
    void route_07_match1_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->random_06_trigger_bang();
    }
    
    void intnum_20_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_20_input_bang_bang() {
        this->intnum_20_out_set(trunc(this->intnum_20_stored));
    }
    
    void select_07_match1_bang() {
        this->intnum_20_input_bang_bang();
    }
    
    void intnum_21_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_21_input_bang_bang() {
        this->intnum_21_out_set(trunc(this->intnum_21_stored));
    }
    
    void select_07_match2_bang() {
        this->intnum_21_input_bang_bang();
    }
    
    void intnum_22_out_set(number v) {
        this->trigger_02_input_number_set(v);
    }
    
    void intnum_22_input_bang_bang() {
        this->intnum_22_out_set(trunc(this->intnum_22_stored));
    }
    
    void select_07_match3_bang() {
        this->intnum_22_input_bang_bang();
    }
    
    void select_07_nomatch_number_set(number ) {}
    
    void select_07_input_number_set(number v) {
        if (v == this->select_07_test1)
            this->select_07_match1_bang();
        else if (v == this->select_07_test2)
            this->select_07_match2_bang();
        else if (v == this->select_07_test3)
            this->select_07_match3_bang();
        else
            this->select_07_nomatch_number_set(v);
    }
    
    void expr_10_out1_set(number v) {
        this->expr_10_out1 = v;
        this->select_07_input_number_set(this->expr_10_out1);
    }
    
    void expr_10_in1_set(number in1) {
        this->expr_10_in1 = in1;
    
        this->expr_10_out1_set(
            (this->expr_10_in2 == 0 ? 0 : rnbo_fround((this->expr_10_in2 == 0. ? 0. : this->expr_10_in1 * 1 / this->expr_10_in2)) * this->expr_10_in2)
        );//#map:chord1markov/round_obj-65:1
    }
    
    void random_07_result_set(number v) {
        this->expr_10_in1_set(v);
    }
    
    void random_07_trigger_bang() {
        {
            this->random_07_result_set(this->random(0, this->random_07_limit));
        }
    }
    
    void route_08_match1_bang_bang() {
        this->random_07_trigger_bang();
    }
    
    void route_08_match1_number_set(number v) {
        RNBO_UNUSED(v);
        this->random_07_trigger_bang();
    }
    
    void route_08_match1_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->random_07_trigger_bang();
    }
    
    void route_08_nomatch_number_set(number ) {}
    
    void route_08_nomatch_list_set(const list& ) {}
    
    void route_08_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_08_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_08_selector1) {
                if (input->length == 0)
                    this->route_08_match1_bang_bang();
                else if (input->length == 1)
                    this->route_08_match1_number_set(input[0]);
                else
                    this->route_08_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_08_nomatch_number_set(v[0]);
                } else {
                    this->route_08_nomatch_list_set(v);
                }
            }
        }
    }
    
    void route_08_input_number_set(number v) {
        this->route_08_input_list_set({v});
    }
    
    void route_07_nomatch_number_set(number v) {
        this->route_08_input_number_set(v);
    }
    
    void route_07_nomatch_list_set(const list& v) {
        this->route_08_input_list_set(v);
    }
    
    void route_07_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_07_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_07_selector1) {
                if (input->length == 0)
                    this->route_07_match1_bang_bang();
                else if (input->length == 1)
                    this->route_07_match1_number_set(input[0]);
                else
                    this->route_07_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_07_nomatch_number_set(v[0]);
                } else {
                    this->route_07_nomatch_list_set(v);
                }
            }
        }
    }
    
    void route_07_input_number_set(number v) {
        this->route_07_input_list_set({v});
    }
    
    void route_06_nomatch_number_set(number v) {
        this->route_07_input_number_set(v);
    }
    
    void route_06_nomatch_list_set(const list& v) {
        this->route_07_input_list_set(v);
    }
    
    void route_06_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_06_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_06_selector1) {
                if (input->length == 0)
                    this->route_06_match1_bang_bang();
                else if (input->length == 1)
                    this->route_06_match1_number_set(input[0]);
                else
                    this->route_06_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_06_nomatch_number_set(v[0]);
                } else {
                    this->route_06_nomatch_list_set(v);
                }
            }
        }
    }
    
    void route_06_input_number_set(number v) {
        this->route_06_input_list_set({v});
    }
    
    void route_05_nomatch_number_set(number v) {
        this->route_06_input_number_set(v);
    }
    
    void route_05_nomatch_list_set(const list& v) {
        this->route_06_input_list_set(v);
    }
    
    void route_05_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_05_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_05_selector1) {
                if (input->length == 0)
                    this->route_05_match1_bang_bang();
                else if (input->length == 1)
                    this->route_05_match1_number_set(input[0]);
                else
                    this->route_05_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_05_nomatch_number_set(v[0]);
                } else {
                    this->route_05_nomatch_list_set(v);
                }
            }
        }
    }
    
    void route_05_input_number_set(number v) {
        this->route_05_input_list_set({v});
    }
    
    void route_04_nomatch_number_set(number v) {
        this->route_05_input_number_set(v);
    }
    
    void route_04_nomatch_list_set(const list& v) {
        this->route_05_input_list_set(v);
    }
    
    void route_04_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_04_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_04_selector1) {
                if (input->length == 0)
                    this->route_04_match1_bang_bang();
                else if (input->length == 1)
                    this->route_04_match1_number_set(input[0]);
                else
                    this->route_04_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_04_nomatch_number_set(v[0]);
                } else {
                    this->route_04_nomatch_list_set(v);
                }
            }
        }
    }
    
    void route_04_input_number_set(number v) {
        this->route_04_input_list_set({v});
    }
    
    void route_03_nomatch_number_set(number v) {
        this->route_04_input_number_set(v);
    }
    
    void route_03_nomatch_list_set(const list& v) {
        this->route_04_input_list_set(v);
    }
    
    void route_03_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_03_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_03_selector1) {
                if (input->length == 0)
                    this->route_03_match1_bang_bang();
                else if (input->length == 1)
                    this->route_03_match1_number_set(input[0]);
                else
                    this->route_03_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_03_nomatch_number_set(v[0]);
                } else {
                    this->route_03_nomatch_list_set(v);
                }
            }
        }
    }
    
    void route_03_input_number_set(number v) {
        this->route_03_input_list_set({v});
    }
    
    void route_02_nomatch_number_set(number v) {
        this->route_03_input_number_set(v);
    }
    
    void route_02_nomatch_list_set(const list& v) {
        this->route_03_input_list_set(v);
    }
    
    void route_02_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_02_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_02_selector1) {
                if (input->length == 0)
                    this->route_02_match1_bang_bang();
                else if (input->length == 1)
                    this->route_02_match1_number_set(input[0]);
                else
                    this->route_02_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_02_nomatch_number_set(v[0]);
                } else {
                    this->route_02_nomatch_list_set(v);
                }
            }
        }
    }
    
    void route_02_input_number_set(number v) {
        this->route_02_input_list_set({v});
    }
    
    void intnum_02_out_set(number v) {
        this->print_02_input_number_set(v);
        this->route_02_input_number_set(v);
    }
    
    void intnum_02_input_bang_bang() {
        this->intnum_02_out_set(trunc(this->intnum_02_stored));
    }
    
    void eventinlet_03_out1_bang_bang() {
        this->intnum_02_input_bang_bang();
    }
    
    void intnum_02_input_number_set(number v) {
        this->intnum_02_input_number = v;
        this->intnum_02_stored = v;
        this->intnum_02_out_set(trunc(v));
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void random_01_limit_setter(number v) {
        if (v >= 0)
            this->random_01_limit = v;
    }
    
    void random_02_limit_setter(number v) {
        if (v >= 0)
            this->random_02_limit = v;
    }
    
    void random_03_limit_setter(number v) {
        if (v >= 0)
            this->random_03_limit = v;
    }
    
    void random_04_limit_setter(number v) {
        if (v >= 0)
            this->random_04_limit = v;
    }
    
    void random_05_limit_setter(number v) {
        if (v >= 0)
            this->random_05_limit = v;
    }
    
    void random_06_limit_setter(number v) {
        if (v >= 0)
            this->random_06_limit = v;
    }
    
    void random_07_limit_setter(number v) {
        if (v >= 0)
            this->random_07_limit = v;
    }
    
    void random_01_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_01_nz_state
        );
    }
    
    void random_01_nz_init() {
        this->random_01_nz_reset();
    }
    
    void random_01_nz_seed(number v) {
        xoshiro_reset(v, this->random_01_nz_state);
    }
    
    number random_01_nz_next() {
        return xoshiro_next(this->random_01_nz_state);
    }
    
    void random_02_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_02_nz_state
        );
    }
    
    void random_02_nz_init() {
        this->random_02_nz_reset();
    }
    
    void random_02_nz_seed(number v) {
        xoshiro_reset(v, this->random_02_nz_state);
    }
    
    number random_02_nz_next() {
        return xoshiro_next(this->random_02_nz_state);
    }
    
    void random_03_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_03_nz_state
        );
    }
    
    void random_03_nz_init() {
        this->random_03_nz_reset();
    }
    
    void random_03_nz_seed(number v) {
        xoshiro_reset(v, this->random_03_nz_state);
    }
    
    number random_03_nz_next() {
        return xoshiro_next(this->random_03_nz_state);
    }
    
    void random_04_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_04_nz_state
        );
    }
    
    void random_04_nz_init() {
        this->random_04_nz_reset();
    }
    
    void random_04_nz_seed(number v) {
        xoshiro_reset(v, this->random_04_nz_state);
    }
    
    number random_04_nz_next() {
        return xoshiro_next(this->random_04_nz_state);
    }
    
    void random_05_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_05_nz_state
        );
    }
    
    void random_05_nz_init() {
        this->random_05_nz_reset();
    }
    
    void random_05_nz_seed(number v) {
        xoshiro_reset(v, this->random_05_nz_state);
    }
    
    number random_05_nz_next() {
        return xoshiro_next(this->random_05_nz_state);
    }
    
    void random_06_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_06_nz_state
        );
    }
    
    void random_06_nz_init() {
        this->random_06_nz_reset();
    }
    
    void random_06_nz_seed(number v) {
        xoshiro_reset(v, this->random_06_nz_state);
    }
    
    number random_06_nz_next() {
        return xoshiro_next(this->random_06_nz_state);
    }
    
    void random_07_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_07_nz_state
        );
    }
    
    void random_07_nz_init() {
        this->random_07_nz_reset();
    }
    
    void random_07_nz_seed(number v) {
        xoshiro_reset(v, this->random_07_nz_state);
    }
    
    number random_07_nz_next() {
        return xoshiro_next(this->random_07_nz_state);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        intnum_01_input_number = 0;
        intnum_01_value = 0;
        select_01_test1 = 0;
        select_01_test2 = 1;
        select_01_test3 = 2;
        expr_04_in1 = 0;
        expr_04_in2 = 1;
        expr_04_out1 = 0;
        random_01_limit = 2;
        random_01_limit_setter(random_01_limit);
        random_01_seed = 0;
        intnum_02_input_number = 0;
        intnum_02_value = 0;
        route_02_selector1 = 1;
        intnum_03_input_number = 0;
        intnum_03_value = 0;
        intnum_04_input_number = 0;
        intnum_04_value = 0;
        intnum_05_input_number = 0;
        intnum_05_value = 0;
        select_02_test1 = 0;
        select_02_test2 = 1;
        select_02_test3 = 2;
        expr_05_in1 = 0;
        expr_05_in2 = 1;
        expr_05_out1 = 0;
        random_02_limit = 2;
        random_02_limit_setter(random_02_limit);
        random_02_seed = 0;
        route_03_selector1 = 2;
        intnum_06_input_number = 0;
        intnum_06_value = 0;
        intnum_07_input_number = 0;
        intnum_07_value = 0;
        intnum_08_input_number = 0;
        intnum_08_value = 0;
        select_03_test1 = 0;
        select_03_test2 = 1;
        select_03_test3 = 2;
        expr_06_in1 = 0;
        expr_06_in2 = 1;
        expr_06_out1 = 0;
        random_03_limit = 2;
        random_03_limit_setter(random_03_limit);
        random_03_seed = 0;
        route_04_selector1 = 3;
        intnum_09_input_number = 0;
        intnum_09_value = 0;
        intnum_10_input_number = 0;
        intnum_10_value = 0;
        intnum_11_input_number = 0;
        intnum_11_value = 0;
        select_04_test1 = 0;
        select_04_test2 = 1;
        select_04_test3 = 2;
        expr_07_in1 = 0;
        expr_07_in2 = 1;
        expr_07_out1 = 0;
        random_04_limit = 2;
        random_04_limit_setter(random_04_limit);
        random_04_seed = 0;
        route_05_selector1 = 4;
        intnum_12_input_number = 0;
        intnum_12_value = 0;
        intnum_13_input_number = 0;
        intnum_13_value = 0;
        intnum_14_input_number = 0;
        intnum_14_value = 0;
        select_05_test1 = 0;
        select_05_test2 = 1;
        select_05_test3 = 2;
        expr_08_in1 = 0;
        expr_08_in2 = 1;
        expr_08_out1 = 0;
        random_05_limit = 2;
        random_05_limit_setter(random_05_limit);
        random_05_seed = 0;
        route_06_selector1 = 5;
        intnum_15_input_number = 0;
        intnum_15_value = 0;
        intnum_16_input_number = 0;
        intnum_16_value = 0;
        intnum_17_input_number = 0;
        intnum_17_value = 0;
        select_06_test1 = 0;
        select_06_test2 = 1;
        select_06_test3 = 2;
        expr_09_in1 = 0;
        expr_09_in2 = 1;
        expr_09_out1 = 0;
        random_06_limit = 2;
        random_06_limit_setter(random_06_limit);
        random_06_seed = 0;
        route_07_selector1 = 6;
        intnum_18_input_number = 0;
        intnum_18_value = 0;
        intnum_19_input_number = 0;
        intnum_19_value = 0;
        intnum_20_input_number = 0;
        intnum_20_value = 0;
        select_07_test1 = 0;
        select_07_test2 = 1;
        select_07_test3 = 2;
        expr_10_in1 = 0;
        expr_10_in2 = 1;
        expr_10_out1 = 0;
        random_07_limit = 2;
        random_07_limit_setter(random_07_limit);
        random_07_seed = 0;
        route_08_selector1 = 7;
        intnum_21_input_number = 0;
        intnum_21_value = 0;
        intnum_22_input_number = 0;
        intnum_22_value = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        intnum_01_stored = 1;
        intnum_02_stored = 1;
        intnum_03_stored = 4;
        intnum_04_stored = 5;
        intnum_05_stored = 5;
        intnum_06_stored = 6;
        intnum_07_stored = 3;
        intnum_08_stored = 4;
        intnum_09_stored = 6;
        intnum_10_stored = 7;
        intnum_11_stored = 4;
        intnum_12_stored = 6;
        intnum_13_stored = 2;
        intnum_14_stored = 1;
        intnum_15_stored = 5;
        intnum_16_stored = 6;
        intnum_17_stored = 4;
        intnum_18_stored = 2;
        intnum_19_stored = 3;
        intnum_20_stored = 1;
        intnum_21_stored = 5;
        intnum_22_stored = 6;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number intnum_01_input_number;
        number intnum_01_value;
        number select_01_test1;
        number select_01_test2;
        number select_01_test3;
        number expr_04_in1;
        number expr_04_in2;
        number expr_04_out1;
        number random_01_limit;
        number random_01_seed;
        number intnum_02_input_number;
        number intnum_02_value;
        number route_02_selector1;
        number intnum_03_input_number;
        number intnum_03_value;
        number intnum_04_input_number;
        number intnum_04_value;
        number intnum_05_input_number;
        number intnum_05_value;
        number select_02_test1;
        number select_02_test2;
        number select_02_test3;
        number expr_05_in1;
        number expr_05_in2;
        number expr_05_out1;
        number random_02_limit;
        number random_02_seed;
        number route_03_selector1;
        number intnum_06_input_number;
        number intnum_06_value;
        number intnum_07_input_number;
        number intnum_07_value;
        number intnum_08_input_number;
        number intnum_08_value;
        number select_03_test1;
        number select_03_test2;
        number select_03_test3;
        number expr_06_in1;
        number expr_06_in2;
        number expr_06_out1;
        number random_03_limit;
        number random_03_seed;
        number route_04_selector1;
        number intnum_09_input_number;
        number intnum_09_value;
        number intnum_10_input_number;
        number intnum_10_value;
        number intnum_11_input_number;
        number intnum_11_value;
        number select_04_test1;
        number select_04_test2;
        number select_04_test3;
        number expr_07_in1;
        number expr_07_in2;
        number expr_07_out1;
        number random_04_limit;
        number random_04_seed;
        number route_05_selector1;
        number intnum_12_input_number;
        number intnum_12_value;
        number intnum_13_input_number;
        number intnum_13_value;
        number intnum_14_input_number;
        number intnum_14_value;
        number select_05_test1;
        number select_05_test2;
        number select_05_test3;
        number expr_08_in1;
        number expr_08_in2;
        number expr_08_out1;
        number random_05_limit;
        number random_05_seed;
        number route_06_selector1;
        number intnum_15_input_number;
        number intnum_15_value;
        number intnum_16_input_number;
        number intnum_16_value;
        number intnum_17_input_number;
        number intnum_17_value;
        number select_06_test1;
        number select_06_test2;
        number select_06_test3;
        number expr_09_in1;
        number expr_09_in2;
        number expr_09_out1;
        number random_06_limit;
        number random_06_seed;
        number route_07_selector1;
        number intnum_18_input_number;
        number intnum_18_value;
        number intnum_19_input_number;
        number intnum_19_value;
        number intnum_20_input_number;
        number intnum_20_value;
        number select_07_test1;
        number select_07_test2;
        number select_07_test3;
        number expr_10_in1;
        number expr_10_in2;
        number expr_10_out1;
        number random_07_limit;
        number random_07_seed;
        number route_08_selector1;
        number intnum_21_input_number;
        number intnum_21_value;
        number intnum_22_input_number;
        number intnum_22_value;
        MillisecondTime _currentTime;
        SampleIndex audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number intnum_01_stored;
        UInt random_01_nz_state[4] = { };
        number intnum_02_stored;
        number intnum_03_stored;
        number intnum_04_stored;
        number intnum_05_stored;
        UInt random_02_nz_state[4] = { };
        number intnum_06_stored;
        number intnum_07_stored;
        number intnum_08_stored;
        UInt random_03_nz_state[4] = { };
        number intnum_09_stored;
        number intnum_10_stored;
        number intnum_11_stored;
        UInt random_04_nz_state[4] = { };
        number intnum_12_stored;
        number intnum_13_stored;
        number intnum_14_stored;
        UInt random_05_nz_state[4] = { };
        number intnum_15_stored;
        number intnum_16_stored;
        number intnum_17_stored;
        UInt random_06_nz_state[4] = { };
        number intnum_18_stored;
        number intnum_19_stored;
        number intnum_20_stored;
        UInt random_07_nz_state[4] = { };
        number intnum_21_stored;
        number intnum_22_stored;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_29 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_29()
    {
    }
    
    ~RNBOSubpatcher_29()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    inline number safemod(number f, number m) {
        if (m != 0) {
            Int f_trunc = (Int)(trunc(f));
            Int m_trunc = (Int)(trunc(m));
    
            if (f == f_trunc && m == m_trunc) {
                f = f_trunc % m_trunc;
            } else {
                if (m < 0) {
                    m = -m;
                }
    
                if (f >= m) {
                    if (f >= m * 2.0) {
                        number d = f / m;
                        Int i = (Int)(trunc(d));
                        d = d - i;
                        f = d * m;
                    } else {
                        f -= m;
                    }
                } else if (f <= -m) {
                    if (f <= -m * 2.0) {
                        number d = f / m;
                        Int i = (Int)(trunc(d));
                        d = d - i;
                        f = d * m;
                    } else {
                        f += m;
                    }
                }
            }
        } else {
            f = 0.0;
        }
    
        return f;
    }
    
    int notenumber() {
        return this->_noteNumber;
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number safepow(number base, number exponent) {
        return fixnan(rnbo_pow(base, exponent));
    }
    
    number scale(
        number x,
        number lowin,
        number hiin,
        number lowout,
        number highout,
        number pow
    ) {
        auto inscale = this->safediv(1., hiin - lowin);
        number outdiff = highout - lowout;
        number value = (x - lowin) * inscale;
    
        if (pow != 1) {
            if (value > 0)
                value = this->safepow(value, pow);
            else
                value = -this->safepow(-value, pow);
        }
    
        value = value * outdiff + lowout;
        return value;
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    inline number linearinterp(number frac, number x, number y) {
        return x + (y - x) * frac;
    }
    
    number samplerate() {
        return this->sr;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
    
        if (this->getIsMuted())
            return;
    
        this->saw_tilde_02_perform(
            this->saw_tilde_02_frequency,
            this->saw_tilde_02_syncPhase,
            this->signals[0],
            this->dummyBuffer,
            n
        );
    
        this->gaintilde_02_perform(this->signals[0], this->signals[1], n);
        this->signaladder_04_perform(this->signals[1], out1, out1, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 2; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->saw_tilde_02_dspsetup(forceDSPSetup);
        this->gaintilde_02_dspsetup(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    void setVoiceIndex(Index index)  {
        this->_voiceIndex = index;
    }
    
    void setNoteNumber(Int noteNumber)  {
        this->_noteNumber = noteNumber;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void processTempoEvent(MillisecondTime , Tempo ) {}
    
    void processTransportEvent(MillisecondTime , TransportState ) {}
    
    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
    
    void onSampleRateChanged(double ) {}
    
    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterValue getPolyParameterValue(PatcherInterface** voices, ParameterIndex index)  {
        switch (index) {
        default:
            {
            return voices[0]->getParameterValue(index);
            }
        }
    }
    
    void setPolyParameterValue(
        PatcherInterface** voices,
        ParameterIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        switch (index) {
        default:
            {
            for (Index i = 0; i < 5; i++)
                voices[i]->setParameterValue(index, value, time);
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        if (this->_voiceIndex == 1)
            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void sendPolyParameter(ParameterIndex index, Index voiceIndex, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset + voiceIndex - 1, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("chord1/message_obj-28") == objectId)
                this->message_03_listin_number_set(payload);
    
            if (TAG("chord1/message_obj-93") == objectId)
                this->message_04_listin_number_set(payload);
    
            break;
            }
        case TAG("valin"):
            {
            if (TAG("chord1/gain~_obj-5") == objectId)
                this->gaintilde_02_valin_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("chord1/message_obj-28") == objectId)
                this->message_03_listin_list_set(payload);
    
            if (TAG("chord1/message_obj-93") == objectId)
                this->message_04_listin_list_set(payload);
    
            break;
            }
        }
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("chord1/message_obj-28") == objectId)
                this->message_03_listin_bang_bang();
    
            if (TAG("chord1/message_obj-93") == objectId)
                this->message_04_listin_bang_bang();
    
            break;
            }
        }
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("chord1/message_obj-28"):
            {
            return "chord1/message_obj-28";
            }
        case TAG("chord1/message_obj-93"):
            {
            return "chord1/message_obj-93";
            }
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("chord1/gain~_obj-5"):
            {
            return "chord1/gain~_obj-5";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 0) {
            this->mtof_02_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        }
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
        this->mtof_02_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
    }
    
    protected:
    
    void message_03_listin_list_set(const list& v) {
        this->message_03_set_set(v);
    }
    
    void message_03_listin_number_set(number v) {
        this->message_03_set_set(v);
    }
    
    void message_03_listin_bang_bang() {
        this->message_03_trigger_bang();
    }
    
    void message_04_listin_list_set(const list& v) {
        this->message_04_set_set(v);
    }
    
    void message_04_listin_number_set(number v) {
        this->message_04_set_set(v);
    }
    
    void message_04_listin_bang_bang() {
        this->message_04_trigger_bang();
    }
    
    void eventinlet_04_out1_bang_bang() {
        this->trigger_03_input_bang_bang();
    }
    
    void eventinlet_04_out1_list_set(const list& v) {
        this->trigger_03_input_list_set(v);
    }
    
    void gaintilde_02_valin_set(number v) {
        this->gaintilde_02_value_set(v);
    }
    
    void eventinlet_05_out1_bang_bang() {
        this->expr_16_in1_bang();
    }
    
    void eventinlet_05_out1_list_set(const list& v) {
        {
            if (v->length > 1)
                this->expr_16_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_16_in1_set(converted);
        }
    }
    
    void eventinlet_06_out1_bang_bang() {}
    
    void eventinlet_06_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->gaintilde_02_input_number_set(converted);
        }
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 1;
    }
    
    void initializeObjects() {
        this->message_03_init();
        this->message_04_init();
        this->gaintilde_02_init();
        this->mtof_02_innerScala_init();
        this->mtof_02_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {}
    
    void allocateDataRefs() {
        this->mtof_02_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_02_innerMtoF_buffer->setSampleRate(this->sr);
        this->mtof_02_innerMtoF_buffer = this->mtof_02_innerMtoF_buffer->allocateIfNeeded();
    }
    
    void expr_15_in2_set(number v) {
        this->expr_15_in2 = v;
    }
    
    void expr_16_out1_set(number v) {
        this->expr_16_out1 = v;
        this->expr_15_in2_set(this->expr_16_out1);
    }
    
    void expr_16_in1_set(number in1) {
        this->expr_16_in1 = in1;
        this->expr_16_out1_set(this->expr_16_in1 * this->expr_16_in2);//#map:chord1/*_obj-14:1
    }
    
    void eventinlet_05_out1_number_set(number v) {
        this->expr_16_in1_set(v);
    }
    
    void gaintilde_02_outval_set(number ) {}
    
    void gaintilde_02_value_set(number v) {
        this->gaintilde_02_value = v;
        number value;
        value = this->scale(v, 0, 157, 0, 158 - 1, 1);
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("chord1/gain~_obj-5"), v, this->_currentTime);
        this->gaintilde_02_outval_set(value);
    }
    
    void gaintilde_02_input_number_set(number v) {
        this->gaintilde_02_input_number = v;
    
        this->gaintilde_02_value_set(
            this->scale((v > 158 - 1 ? 158 - 1 : (v < 0 ? 0 : v)), 0, 158 - 1, 0, 157, 1)
        );
    }
    
    void eventinlet_06_out1_number_set(number v) {
        this->gaintilde_02_input_number_set(v);
    }
    
    void voice_01_noteNumber_set(number ) {}
    
    void expr_12_in2_set(number v) {
        this->expr_12_in2 = v;
    }
    
    void expr_14_out1_set(number v) {
        this->expr_14_out1 = v;
        this->expr_12_in2_set(this->expr_14_out1);
    }
    
    void expr_14_in1_set(number in1) {
        this->expr_14_in1 = in1;
        this->expr_14_out1_set(2 * (this->expr_14_in1 - 1));//#map:chord1/expr_obj-52:1
    }
    
    void voice_01_voicenumber_set(number v) {
        this->expr_14_in1_set(v);
    }
    
    void voice_01_voicebang_bang() {
        this->voice_01_noteNumber_set(this->notenumber());
        this->voice_01_voicenumber_set(this->voice());
    }
    
    void trigger_03_out2_bang() {
        this->voice_01_voicebang_bang();
    }
    
    void listindex_02_index_set(const list& v) {
        this->listindex_02_index = jsCreateListCopy(v);
    }
    
    void trigger_04_out2_set(number v) {
        {
            list converted = {v};
            this->listindex_02_index_set(converted);
        }
    }
    
    void listindex_02_out2_set(const list& ) {}
    
    void saw_tilde_02_frequency_set(number v) {
        this->saw_tilde_02_frequency = v;
    }
    
    void saw_tilde_02_syncPhase_set(number v) {
        this->saw_tilde_02_syncPhase = v;
    }
    
    void mtof_02_out_set(const list& v) {
        {
            if (v->length > 1)
                this->saw_tilde_02_syncPhase_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->saw_tilde_02_frequency_set(converted);
        }
    }
    
    void mtof_02_midivalue_set(const list& v) {
        this->mtof_02_midivalue = jsCreateListCopy(v);
        list tmp = list();
    
        for (int i = 0; i < this->mtof_02_midivalue->length; i++) {
            tmp->push(
                this->mtof_02_innerMtoF_next(this->mtof_02_midivalue[(Index)i], this->mtof_02_base)
            );
        }
    
        this->mtof_02_out_set(tmp);
    }
    
    void expr_15_out1_set(number v) {
        this->expr_15_out1 = v;
    
        {
            list converted = {this->expr_15_out1};
            this->mtof_02_midivalue_set(converted);
        }
    }
    
    void expr_15_in1_set(number in1) {
        this->expr_15_in1 = in1;
        this->expr_15_out1_set(this->expr_15_in1 + this->expr_15_in2);//#map:chord1/+_obj-17:1
    }
    
    void listindex_02_out1_set(number v) {
        this->expr_15_in1_set(v);
    }
    
    void listindex_02_input_set(const list& v) {
        this->listindex_02_input = jsCreateListCopy(v);
        list result = jsCreateListCopy(v);
    
        if (this->listindex_02_index->length > 0 && this->listindex_02_index[0] < v->length && this->listindex_02_index[0] >= 0) {
            number nth = v[(Index)this->listindex_02_index[0]];
    
            if (this->listindex_02_index->length == 1)
                result->splice(this->listindex_02_index[0], 1);
            else
                result->splice(this->listindex_02_index[0], 1, this->listindex_02_index[1]);
    
            this->listindex_02_out2_set(result);
            this->listindex_02_out1_set(nth);
        } else if ((bool)(this->listindex_02_input->length))
            this->listindex_02_out2_set(v);
    }
    
    void message_03_out_set(const list& v) {
        this->listindex_02_input_set(v);
    }
    
    void message_03_trigger_bang() {
        this->message_03_out_set(this->message_03_set);
    }
    
    void trigger_04_out1_bang() {
        this->message_03_trigger_bang();
    }
    
    void trigger_04_input_number_set(number v) {
        this->trigger_04_out2_set(v);
        this->trigger_04_out1_bang();
    }
    
    void expr_13_out1_set(number v) {
        this->expr_13_out1 = v;
        this->trigger_04_input_number_set(this->expr_13_out1);
    }
    
    void expr_13_in1_bang() {
        this->expr_13_out1_set(this->expr_13_in1 - this->expr_13_in2);//#map:chord1/-_obj-67:1
    }
    
    void route_09_nomatch_bang_bang() {
        this->expr_13_in1_bang();
    }
    
    void expr_13_in1_set(number in1) {
        this->expr_13_in1 = in1;
        this->expr_13_out1_set(this->expr_13_in1 - this->expr_13_in2);//#map:chord1/-_obj-67:1
    }
    
    void expr_13_in2_set(number v) {
        this->expr_13_in2 = v;
    }
    
    void message_04_out_set(const list& v) {
        {
            if (v->length > 1)
                this->expr_13_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_13_in1_set(converted);
        }
    }
    
    void message_04_trigger_bang() {
        this->message_04_out_set(this->message_04_set);
    }
    
    void route_09_match1_bang_bang() {
        this->message_04_trigger_bang();
    }
    
    void route_09_match1_number_set(number v) {
        RNBO_UNUSED(v);
        this->message_04_trigger_bang();
    }
    
    void route_09_match1_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->message_04_trigger_bang();
    }
    
    void route_09_nomatch_number_set(number v) {
        this->expr_13_in1_set(v);
    }
    
    void route_09_nomatch_list_set(const list& v) {
        {
            if (v->length > 1)
                this->expr_13_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_13_in1_set(converted);
        }
    }
    
    void route_09_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_09_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_09_selector1) {
                if (input->length == 0)
                    this->route_09_match1_bang_bang();
                else if (input->length == 1)
                    this->route_09_match1_number_set(input[0]);
                else
                    this->route_09_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_09_nomatch_number_set(v[0]);
                } else {
                    this->route_09_nomatch_list_set(v);
                }
            }
        }
    }
    
    void route_09_input_number_set(number v) {
        this->route_09_input_list_set({v});
    }
    
    void expr_11_out1_set(number v) {
        this->expr_11_out1 = v;
        this->route_09_input_number_set(this->expr_11_out1);
    }
    
    void expr_11_in1_set(number in1) {
        this->expr_11_in1 = in1;
        this->expr_11_out1_set(this->safemod(this->expr_11_in1, this->expr_11_in2));//#map:chord1/%_obj-69:1
    }
    
    void expr_12_out1_set(number v) {
        this->expr_12_out1 = v;
        this->expr_11_in1_set(this->expr_12_out1);
    }
    
    void expr_12_in1_set(number in1) {
        this->expr_12_in1 = in1;
        this->expr_12_out1_set(this->expr_12_in1 + this->expr_12_in2);//#map:chord1/+_obj-47:1
    }
    
    void trigger_03_out1_set(number v) {
        this->expr_12_in1_set(v);
    }
    
    void trigger_03_input_number_set(number v) {
        this->trigger_03_out2_bang();
        this->trigger_03_out1_set(v);
    }
    
    void eventinlet_04_out1_number_set(number v) {
        this->trigger_03_input_number_set(v);
    }
    
    void message_03_set_set(const list& v) {
        this->message_03_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("chord1/message_obj-28"), v, this->_currentTime);
    }
    
    void message_04_set_set(const list& v) {
        this->message_04_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("chord1/message_obj-93"), v, this->_currentTime);
    }
    
    void trigger_03_input_bang_bang() {
        this->trigger_03_out2_bang();
        this->trigger_03_out1_set(0);
    }
    
    void trigger_03_input_list_set(const list& v) {
        this->trigger_03_out2_bang();
        this->trigger_03_out1_set((v->length > 0 ? v[0] : 0));
    }
    
    void expr_16_in1_bang() {
        this->expr_16_out1_set(this->expr_16_in1 * this->expr_16_in2);//#map:chord1/*_obj-14:1
    }
    
    void expr_16_in2_set(number v) {
        this->expr_16_in2 = v;
    }
    
    void midiouthelper_midiout_set(number ) {}
    
    void saw_tilde_02_perform(
        number frequency,
        number syncPhase,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(syncPhase);
        auto __saw_tilde_02_didSync = this->saw_tilde_02_didSync;
        auto __saw_tilde_02_lastSyncDiff = this->saw_tilde_02_lastSyncDiff;
        auto __saw_tilde_02_lastSyncPhase = this->saw_tilde_02_lastSyncPhase;
        auto __saw_tilde_02_t = this->saw_tilde_02_t;
        Index i;
    
        for (i = 0; i < n; i++) {
            number dt = frequency / this->samplerate();
            number t1 = __saw_tilde_02_t + 0.5;
            t1 -= trunc(t1);
            number y = 2 * t1 - 1;
    
            if (dt != 0.0) {
                number syncDiff = 0 - __saw_tilde_02_lastSyncPhase;
                __saw_tilde_02_lastSyncPhase = 0;
                __saw_tilde_02_lastSyncDiff = syncDiff;
                number lookahead = 0 + syncDiff;
    
                if (t1 < dt) {
                    number d = t1 / dt;
                    y -= d + d - d * d - 1;
                } else if (t1 + dt > 1) {
                    number d = (t1 - 1) / dt;
                    y -= d + d + d * d + 1;
                } else if ((bool)(__saw_tilde_02_didSync)) {
                    y = 0;
                    __saw_tilde_02_didSync = false;
                } else if (lookahead > 1) {
                    y *= 0.5;
                    __saw_tilde_02_t = 0;
                    __saw_tilde_02_didSync = true;
                }
    
                __saw_tilde_02_t += dt;
    
                if (dt > 0) {
                    while (__saw_tilde_02_t >= 1) {
                        __saw_tilde_02_t -= 1;
                    }
                } else {
                    while (__saw_tilde_02_t <= 0) {
                        __saw_tilde_02_t += 1;
                    }
                }
            }
    
            y = this->saw_tilde_02_dcblocker_next(y, 0.9997);
            out1[(Index)i] = 0.5 * y;
            out2[(Index)i] = __saw_tilde_02_t;
        }
    
        this->saw_tilde_02_t = __saw_tilde_02_t;
        this->saw_tilde_02_lastSyncPhase = __saw_tilde_02_lastSyncPhase;
        this->saw_tilde_02_lastSyncDiff = __saw_tilde_02_lastSyncDiff;
        this->saw_tilde_02_didSync = __saw_tilde_02_didSync;
    }
    
    void gaintilde_02_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __gaintilde_02_interp = this->gaintilde_02_interp;
        auto __gaintilde_02_loginc = this->gaintilde_02_loginc;
        auto __gaintilde_02_zval = this->gaintilde_02_zval;
        auto __gaintilde_02_value = this->gaintilde_02_value;
        number mult = (__gaintilde_02_value <= 0 ? 0. : __gaintilde_02_zval * rnbo_exp(__gaintilde_02_value * __gaintilde_02_loginc));
        auto iv = this->mstosamps(__gaintilde_02_interp);
    
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input_signal[(Index)i] * this->gaintilde_02_ramp_next(mult, iv, iv);
        }
    }
    
    void signaladder_04_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void message_03_init() {
        this->message_03_set_set({1, 3, 5, 6, 8, 10, 12});
    }
    
    void message_04_init() {
        this->message_04_set_set({7});
    }
    
    number gaintilde_02_ramp_d_next(number x) {
        number temp = (number)(x - this->gaintilde_02_ramp_d_prev);
        this->gaintilde_02_ramp_d_prev = x;
        return temp;
    }
    
    void gaintilde_02_ramp_d_dspsetup() {
        this->gaintilde_02_ramp_d_reset();
    }
    
    void gaintilde_02_ramp_d_reset() {
        this->gaintilde_02_ramp_d_prev = 0;
    }
    
    number gaintilde_02_ramp_next(number x, number up, number down) {
        if (this->gaintilde_02_ramp_d_next(x) != 0.) {
            if (x > this->gaintilde_02_ramp_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->gaintilde_02_ramp_index = _up;
                this->gaintilde_02_ramp_increment = (x - this->gaintilde_02_ramp_prev) / _up;
            } else if (x < this->gaintilde_02_ramp_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->gaintilde_02_ramp_index = _down;
                this->gaintilde_02_ramp_increment = (x - this->gaintilde_02_ramp_prev) / _down;
            }
        }
    
        if (this->gaintilde_02_ramp_index > 0) {
            this->gaintilde_02_ramp_prev += this->gaintilde_02_ramp_increment;
            this->gaintilde_02_ramp_index -= 1;
        } else {
            this->gaintilde_02_ramp_prev = x;
        }
    
        return this->gaintilde_02_ramp_prev;
    }
    
    void gaintilde_02_ramp_reset() {
        this->gaintilde_02_ramp_prev = 0;
        this->gaintilde_02_ramp_index = 0;
        this->gaintilde_02_ramp_increment = 0;
        this->gaintilde_02_ramp_d_reset();
    }
    
    void gaintilde_02_init() {
        this->gaintilde_02_loginc = rnbo_log(1.072);
        this->gaintilde_02_zval = 7.943 * rnbo_exp(-((158 - 1) * this->gaintilde_02_loginc));
    }
    
    void gaintilde_02_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->gaintilde_02_value;
    }
    
    void gaintilde_02_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->gaintilde_02_value_set(preset["value"]);
    }
    
    void gaintilde_02_dspsetup(bool force) {
        if ((bool)(this->gaintilde_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->gaintilde_02_setupDone = true;
        this->gaintilde_02_ramp_d_dspsetup();
    }
    
    number mtof_02_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_02_innerMtoF_lastInValue && tuning == this->mtof_02_innerMtoF_lastTuning)
            return this->mtof_02_innerMtoF_lastOutValue;
    
        this->mtof_02_innerMtoF_lastInValue = midivalue;
        this->mtof_02_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_02_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_02_innerMtoF_lastOutValue;
    }
    
    void mtof_02_innerMtoF_reset() {
        this->mtof_02_innerMtoF_lastInValue = 0;
        this->mtof_02_innerMtoF_lastOutValue = 0;
        this->mtof_02_innerMtoF_lastTuning = 0;
    }
    
    void mtof_02_innerScala_mid(int v) {
        this->mtof_02_innerScala_kbmMid = v;
        this->mtof_02_innerScala_updateRefFreq();
    }
    
    void mtof_02_innerScala_ref(int v) {
        this->mtof_02_innerScala_kbmRefNum = v;
        this->mtof_02_innerScala_updateRefFreq();
    }
    
    void mtof_02_innerScala_base(number v) {
        this->mtof_02_innerScala_kbmRefFreq = v;
        this->mtof_02_innerScala_updateRefFreq();
    }
    
    void mtof_02_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_02_innerScala_updateScale(sclValid);
    }
    
    void mtof_02_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_02_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_02_innerScala_updateMap(map);
        }
    }
    
    number mtof_02_innerScala_mtof(number note) {
        if ((bool)(this->mtof_02_innerScala_lastValid) && this->mtof_02_innerScala_lastNote == note) {
            return this->mtof_02_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_02_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_02_innerScala_applySCL(degoct[0], fract(note), this->mtof_02_innerScala_refFreq);
        }
    
        this->mtof_02_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_02_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_02_innerScala_lastValid) && this->mtof_02_innerScala_lastFreq == hz) {
            return this->mtof_02_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_02_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_02_innerScala_kbmSize == 0) {
            out = this->mtof_02_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_02_innerScala_octdegree(degree, this->mtof_02_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_02_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_02_innerScala_kbmValid[(Index)(i + this->mtof_02_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_02_innerScala_kbmSize + entry + this->mtof_02_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_02_innerScala_updateLast(out, hz);
        return this->mtof_02_innerScala_lastNote;
    }
    
    int mtof_02_innerScala_updateScale(list scl) {
        if (scl->length < 1) {
            return 0;
        }
    
        number sclDataEntries = scl[0] * 2 + 1;
    
        if (sclDataEntries <= scl->length) {
            this->mtof_02_innerScala_lastValid = false;
            this->mtof_02_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < sclDataEntries; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_02_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_02_innerScala_sclOctaveMul = last;
            this->mtof_02_innerScala_sclEntryCount = (int)(this->mtof_02_innerScala_sclExpMul->length);
    
            if (scl->length >= sclDataEntries + 3) {
                this->mtof_02_innerScala_kbmMid = (int)(scl[(Index)(sclDataEntries + 2)]);
                this->mtof_02_innerScala_kbmRefNum = (int)(scl[(Index)(sclDataEntries + 1)]);
                this->mtof_02_innerScala_kbmRefFreq = scl[(Index)(sclDataEntries + 0)];
                this->mtof_02_innerScala_kbmSize = (int)(0);
            }
    
            this->mtof_02_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_02_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_02_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_02_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_02_innerScala_kbmSize = (int)(size);
            this->mtof_02_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_02_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_02_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_02_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_02_innerScala_kbmRefFreq = kbm[5];
            this->mtof_02_innerScala_kbmOctaveDegree = octave;
            this->mtof_02_innerScala_kbmValid = kbm;
            this->mtof_02_innerScala_kbmMapSize = (kbm->length - this->mtof_02_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_02_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_02_innerScala_KBM_MAP_OFFSET));
            this->mtof_02_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_02_innerScala_updateLast(number note, number freq) {
        this->mtof_02_innerScala_lastValid = true;
        this->mtof_02_innerScala_lastNote = note;
        this->mtof_02_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_02_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_02_innerScala_refFreq) / this->mtof_02_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_02_innerScala_sclEntryCount; i++) {
            number c = this->mtof_02_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_02_innerScala_refFreq);
            n = this->mtof_02_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_02_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_02_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_02_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_02_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_02_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_02_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_02_innerScala_applyKBM(number note) {
        if ((this->mtof_02_innerScala_kbmMin == this->mtof_02_innerScala_kbmMax && this->mtof_02_innerScala_kbmMax == 0) || (note >= this->mtof_02_innerScala_kbmMin && note <= this->mtof_02_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_02_innerScala_kbmMid));
    
            if (this->mtof_02_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_02_innerScala_octdegree(degree, this->mtof_02_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_02_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_02_innerScala_kbmValid[(Index)(this->mtof_02_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_02_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_02_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_02_innerScala_octdegree(degree, this->mtof_02_innerScala_sclEntryCount);
        return this->mtof_02_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_02_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_02_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_02_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_02_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_02_innerScala_sclOctaveMul);
    }
    
    void mtof_02_innerScala_updateRefFreq() {
        this->mtof_02_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_02_innerScala_kbmRefNum - this->mtof_02_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_02_innerScala_refFreq = this->mtof_02_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_02_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_02_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_02_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_02_innerScala_kbmSize) {
                if (index < this->mtof_02_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_02_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_02_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_02_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_02_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_02_innerScala_refFreq = this->mtof_02_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_02_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_02_innerScala_reset() {
        this->mtof_02_innerScala_internal = true;
        this->mtof_02_innerScala_lastValid = false;
        this->mtof_02_innerScala_lastNote = 0;
        this->mtof_02_innerScala_lastFreq = 0;
        this->mtof_02_innerScala_sclEntryCount = 0;
        this->mtof_02_innerScala_sclOctaveMul = 1;
        this->mtof_02_innerScala_sclExpMul = {};
        this->mtof_02_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_02_innerScala_kbmMid = 60;
        this->mtof_02_innerScala_kbmRefNum = 69;
        this->mtof_02_innerScala_kbmRefFreq = 440;
        this->mtof_02_innerScala_kbmSize = 0;
        this->mtof_02_innerScala_kbmMin = 0;
        this->mtof_02_innerScala_kbmMax = 0;
        this->mtof_02_innerScala_kbmOctaveDegree = 12;
        this->mtof_02_innerScala_kbmMapSize = 0;
        this->mtof_02_innerScala_refFreq = 261.63;
    }
    
    void mtof_02_init() {
        this->mtof_02_innerScala_update(this->mtof_02_scale, this->mtof_02_map);
    }
    
    number saw_tilde_02_dcblocker_next(number x, number gain) {
        number y = x - this->saw_tilde_02_dcblocker_xm1 + this->saw_tilde_02_dcblocker_ym1 * gain;
        this->saw_tilde_02_dcblocker_xm1 = x;
        this->saw_tilde_02_dcblocker_ym1 = y;
        return y;
    }
    
    void saw_tilde_02_dcblocker_reset() {
        this->saw_tilde_02_dcblocker_xm1 = 0;
        this->saw_tilde_02_dcblocker_ym1 = 0;
    }
    
    void saw_tilde_02_dcblocker_dspsetup() {
        this->saw_tilde_02_dcblocker_reset();
    }
    
    void saw_tilde_02_dspsetup(bool force) {
        if ((bool)(this->saw_tilde_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->saw_tilde_02_setupDone = true;
        this->saw_tilde_02_dcblocker_dspsetup();
    }
    
    void midiouthelper_sendMidi(number v) {
        this->midiouthelper_midiout_set(v);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        route_09_selector1 = 0;
        expr_11_in1 = 0;
        expr_11_in2 = 7;
        expr_11_out1 = 0;
        expr_12_in1 = 0;
        expr_12_in2 = 0;
        expr_12_out1 = 0;
        expr_13_in1 = 0;
        expr_13_in2 = 1;
        expr_13_out1 = 0;
        expr_14_in1 = 0;
        expr_14_out1 = 0;
        voice_01_mute_number = 0;
        gaintilde_02_input_number = 0;
        gaintilde_02_value = 0;
        gaintilde_02_interp = 10;
        mtof_02_base = 440;
        expr_15_in1 = 0;
        expr_15_in2 = 0;
        expr_15_out1 = 0;
        saw_tilde_02_frequency = 440;
        saw_tilde_02_syncPhase = 0;
        expr_16_in1 = 0;
        expr_16_in2 = 12;
        expr_16_out1 = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        gaintilde_02_lastValue = 0;
        gaintilde_02_loginc = 1;
        gaintilde_02_zval = 0;
        gaintilde_02_ramp_d_prev = 0;
        gaintilde_02_ramp_prev = 0;
        gaintilde_02_ramp_index = 0;
        gaintilde_02_ramp_increment = 0;
        gaintilde_02_setupDone = false;
        mtof_02_innerMtoF_lastInValue = 0;
        mtof_02_innerMtoF_lastOutValue = 0;
        mtof_02_innerMtoF_lastTuning = 0;
        mtof_02_innerScala_internal = true;
        mtof_02_innerScala_lastValid = false;
        mtof_02_innerScala_lastNote = 0;
        mtof_02_innerScala_lastFreq = 0;
        mtof_02_innerScala_sclEntryCount = 0;
        mtof_02_innerScala_sclOctaveMul = 1;
        mtof_02_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_02_innerScala_kbmMid = 60;
        mtof_02_innerScala_kbmRefNum = 69;
        mtof_02_innerScala_kbmRefFreq = 440;
        mtof_02_innerScala_kbmSize = 0;
        mtof_02_innerScala_kbmMin = 0;
        mtof_02_innerScala_kbmMax = 0;
        mtof_02_innerScala_kbmOctaveDegree = 12;
        mtof_02_innerScala_kbmMapSize = 0;
        mtof_02_innerScala_refFreq = 261.63;
        saw_tilde_02_t = 0;
        saw_tilde_02_lastSyncPhase = 0;
        saw_tilde_02_lastSyncDiff = 0;
        saw_tilde_02_didSync = false;
        saw_tilde_02_dcblocker_xm1 = 0;
        saw_tilde_02_dcblocker_ym1 = 0;
        saw_tilde_02_setupDone = false;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 0;
        parameterOffset = 0;
    }
    
    // member variables
    
        list message_03_set;
        list listindex_02_input;
        list listindex_02_index;
        list message_04_set;
        number route_09_selector1;
        number expr_11_in1;
        number expr_11_in2;
        number expr_11_out1;
        number expr_12_in1;
        number expr_12_in2;
        number expr_12_out1;
        number expr_13_in1;
        number expr_13_in2;
        number expr_13_out1;
        number expr_14_in1;
        number expr_14_out1;
        number voice_01_mute_number;
        number gaintilde_02_input_number;
        number gaintilde_02_value;
        number gaintilde_02_interp;
        list mtof_02_midivalue;
        list mtof_02_scale;
        list mtof_02_map;
        number mtof_02_base;
        number expr_15_in1;
        number expr_15_in2;
        number expr_15_out1;
        number saw_tilde_02_frequency;
        number saw_tilde_02_syncPhase;
        number expr_16_in1;
        number expr_16_in2;
        number expr_16_out1;
        MillisecondTime _currentTime;
        SampleIndex audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[2];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number gaintilde_02_lastValue;
        number gaintilde_02_loginc;
        number gaintilde_02_zval;
        number gaintilde_02_ramp_d_prev;
        number gaintilde_02_ramp_prev;
        number gaintilde_02_ramp_index;
        number gaintilde_02_ramp_increment;
        bool gaintilde_02_setupDone;
        number mtof_02_innerMtoF_lastInValue;
        number mtof_02_innerMtoF_lastOutValue;
        number mtof_02_innerMtoF_lastTuning;
        Float64BufferRef mtof_02_innerMtoF_buffer;
        bool mtof_02_innerScala_internal;
        const Index mtof_02_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_02_innerScala_lastValid;
        number mtof_02_innerScala_lastNote;
        number mtof_02_innerScala_lastFreq;
        int mtof_02_innerScala_sclEntryCount;
        number mtof_02_innerScala_sclOctaveMul;
        list mtof_02_innerScala_sclExpMul;
        list mtof_02_innerScala_kbmValid;
        int mtof_02_innerScala_kbmMid;
        int mtof_02_innerScala_kbmRefNum;
        number mtof_02_innerScala_kbmRefFreq;
        int mtof_02_innerScala_kbmSize;
        int mtof_02_innerScala_kbmMin;
        int mtof_02_innerScala_kbmMax;
        int mtof_02_innerScala_kbmOctaveDegree;
        Index mtof_02_innerScala_kbmMapSize;
        number mtof_02_innerScala_refFreq;
        number saw_tilde_02_t;
        number saw_tilde_02_lastSyncPhase;
        number saw_tilde_02_lastSyncDiff;
        bool saw_tilde_02_didSync;
        number saw_tilde_02_dcblocker_xm1;
        number saw_tilde_02_dcblocker_ym1;
        bool saw_tilde_02_setupDone;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_30 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    class RNBOSubpatcher_25 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_30;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_25()
            {
            }
            
            ~RNBOSubpatcher_25()
            {
            }
            
            virtual RNBOSubpatcher_30* getPatcher() const {
                return static_cast<RNBOSubpatcher_30 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() {
                return this->sr;
            }
            
            Index vectorsize() {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                const SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                const SampleValue * in6 = (numInputs >= 6 && inputs[5] ? inputs[5] : this->zeroBuffer);
                const SampleValue * in7 = (numInputs >= 7 && inputs[6] ? inputs[6] : this->zeroBuffer);
            
                this->comb_tilde_01_perform(
                    in1,
                    this->comb_tilde_01_delayTime,
                    this->comb_tilde_01_gain,
                    this->comb_tilde_01_ffGain,
                    this->comb_tilde_01_fbGain,
                    this->signals[0],
                    n
                );
            
                this->comb_tilde_02_perform(
                    in2,
                    this->comb_tilde_02_delayTime,
                    this->comb_tilde_02_gain,
                    this->comb_tilde_02_ffGain,
                    this->comb_tilde_02_fbGain,
                    this->signals[1],
                    n
                );
            
                this->comb_tilde_03_perform(
                    in3,
                    this->comb_tilde_03_delayTime,
                    this->comb_tilde_03_gain,
                    this->comb_tilde_03_ffGain,
                    this->comb_tilde_03_fbGain,
                    this->signals[2],
                    n
                );
            
                this->comb_tilde_04_perform(
                    in4,
                    this->comb_tilde_04_delayTime,
                    this->comb_tilde_04_gain,
                    this->comb_tilde_04_ffGain,
                    this->comb_tilde_04_fbGain,
                    this->signals[3],
                    n
                );
            
                this->comb_tilde_05_perform(
                    in5,
                    this->comb_tilde_05_delayTime,
                    this->comb_tilde_05_gain,
                    this->comb_tilde_05_ffGain,
                    this->comb_tilde_05_fbGain,
                    this->signals[4],
                    n
                );
            
                this->comb_tilde_06_perform(
                    in6,
                    this->comb_tilde_06_delayTime,
                    this->comb_tilde_06_gain,
                    this->comb_tilde_06_ffGain,
                    this->comb_tilde_06_fbGain,
                    this->signals[5],
                    n
                );
            
                this->comb_tilde_07_perform(
                    in7,
                    this->comb_tilde_07_delayTime,
                    this->comb_tilde_07_gain,
                    this->comb_tilde_07_ffGain,
                    this->comb_tilde_07_fbGain,
                    this->signals[6],
                    n
                );
            
                this->signaladder_09_perform(
                    this->signals[6],
                    this->signals[5],
                    this->signals[4],
                    this->signals[2],
                    this->signals[2],
                    n
                );
            
                this->dspexpr_02_perform(this->signals[2], this->dspexpr_02_in2, this->signals[7], n);
            
                this->signaladder_10_perform(
                    this->signals[3],
                    this->signals[1],
                    this->signals[0],
                    this->signals[7],
                    this->signals[7],
                    n
                );
            
                this->dspexpr_01_perform(this->signals[7], this->dspexpr_01_in2, out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 8; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->comb_tilde_01_dspsetup(forceDSPSetup);
                this->comb_tilde_02_dspsetup(forceDSPSetup);
                this->comb_tilde_03_dspsetup(forceDSPSetup);
                this->comb_tilde_04_dspsetup(forceDSPSetup);
                this->comb_tilde_05_dspsetup(forceDSPSetup);
                this->comb_tilde_06_dspsetup(forceDSPSetup);
                this->comb_tilde_07_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 23:
                    {
                    return addressOf(this->comb_tilde_01_feedForward_bufferobj);
                    break;
                    }
                case 24:
                    {
                    return addressOf(this->comb_tilde_01_feedBack_bufferobj);
                    break;
                    }
                case 25:
                    {
                    return addressOf(this->comb_tilde_02_feedForward_bufferobj);
                    break;
                    }
                case 26:
                    {
                    return addressOf(this->comb_tilde_02_feedBack_bufferobj);
                    break;
                    }
                case 27:
                    {
                    return addressOf(this->comb_tilde_03_feedForward_bufferobj);
                    break;
                    }
                case 28:
                    {
                    return addressOf(this->comb_tilde_03_feedBack_bufferobj);
                    break;
                    }
                case 29:
                    {
                    return addressOf(this->comb_tilde_04_feedForward_bufferobj);
                    break;
                    }
                case 30:
                    {
                    return addressOf(this->comb_tilde_04_feedBack_bufferobj);
                    break;
                    }
                case 31:
                    {
                    return addressOf(this->comb_tilde_05_feedForward_bufferobj);
                    break;
                    }
                case 32:
                    {
                    return addressOf(this->comb_tilde_05_feedBack_bufferobj);
                    break;
                    }
                case 33:
                    {
                    return addressOf(this->comb_tilde_06_feedForward_bufferobj);
                    break;
                    }
                case 34:
                    {
                    return addressOf(this->comb_tilde_06_feedBack_bufferobj);
                    break;
                    }
                case 35:
                    {
                    return addressOf(this->comb_tilde_07_feedForward_bufferobj);
                    break;
                    }
                case 36:
                    {
                    return addressOf(this->comb_tilde_07_feedBack_bufferobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 14;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 23) {
                    this->comb_tilde_01_feedForward_buffer = new Float64Buffer(this->comb_tilde_01_feedForward_bufferobj);
                }
            
                if (index == 24) {
                    this->comb_tilde_01_feedBack_buffer = new Float64Buffer(this->comb_tilde_01_feedBack_bufferobj);
                }
            
                if (index == 25) {
                    this->comb_tilde_02_feedForward_buffer = new Float64Buffer(this->comb_tilde_02_feedForward_bufferobj);
                }
            
                if (index == 26) {
                    this->comb_tilde_02_feedBack_buffer = new Float64Buffer(this->comb_tilde_02_feedBack_bufferobj);
                }
            
                if (index == 27) {
                    this->comb_tilde_03_feedForward_buffer = new Float64Buffer(this->comb_tilde_03_feedForward_bufferobj);
                }
            
                if (index == 28) {
                    this->comb_tilde_03_feedBack_buffer = new Float64Buffer(this->comb_tilde_03_feedBack_bufferobj);
                }
            
                if (index == 29) {
                    this->comb_tilde_04_feedForward_buffer = new Float64Buffer(this->comb_tilde_04_feedForward_bufferobj);
                }
            
                if (index == 30) {
                    this->comb_tilde_04_feedBack_buffer = new Float64Buffer(this->comb_tilde_04_feedBack_bufferobj);
                }
            
                if (index == 31) {
                    this->comb_tilde_05_feedForward_buffer = new Float64Buffer(this->comb_tilde_05_feedForward_bufferobj);
                }
            
                if (index == 32) {
                    this->comb_tilde_05_feedBack_buffer = new Float64Buffer(this->comb_tilde_05_feedBack_bufferobj);
                }
            
                if (index == 33) {
                    this->comb_tilde_06_feedForward_buffer = new Float64Buffer(this->comb_tilde_06_feedForward_bufferobj);
                }
            
                if (index == 34) {
                    this->comb_tilde_06_feedBack_buffer = new Float64Buffer(this->comb_tilde_06_feedBack_bufferobj);
                }
            
                if (index == 35) {
                    this->comb_tilde_07_feedForward_buffer = new Float64Buffer(this->comb_tilde_07_feedForward_bufferobj);
                }
            
                if (index == 36) {
                    this->comb_tilde_07_feedBack_buffer = new Float64Buffer(this->comb_tilde_07_feedBack_bufferobj);
                }
            }
            
            void initialize() {
                this->comb_tilde_01_feedForward_bufferobj = initDataRef("comb_tilde_01_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_01_feedBack_bufferobj = initDataRef("comb_tilde_01_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_02_feedForward_bufferobj = initDataRef("comb_tilde_02_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_02_feedBack_bufferobj = initDataRef("comb_tilde_02_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_03_feedForward_bufferobj = initDataRef("comb_tilde_03_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_03_feedBack_bufferobj = initDataRef("comb_tilde_03_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_04_feedForward_bufferobj = initDataRef("comb_tilde_04_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_04_feedBack_bufferobj = initDataRef("comb_tilde_04_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_05_feedForward_bufferobj = initDataRef("comb_tilde_05_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_05_feedBack_bufferobj = initDataRef("comb_tilde_05_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_06_feedForward_bufferobj = initDataRef("comb_tilde_06_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_06_feedBack_bufferobj = initDataRef("comb_tilde_06_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_07_feedForward_bufferobj = initDataRef("comb_tilde_07_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_07_feedBack_bufferobj = initDataRef("comb_tilde_07_feedBack_bufferobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->comb_tilde_01_feedForward_bufferobj->setIndex(23);
                this->comb_tilde_01_feedForward_buffer = new Float64Buffer(this->comb_tilde_01_feedForward_bufferobj);
                this->comb_tilde_01_feedBack_bufferobj->setIndex(24);
                this->comb_tilde_01_feedBack_buffer = new Float64Buffer(this->comb_tilde_01_feedBack_bufferobj);
                this->comb_tilde_02_feedForward_bufferobj->setIndex(25);
                this->comb_tilde_02_feedForward_buffer = new Float64Buffer(this->comb_tilde_02_feedForward_bufferobj);
                this->comb_tilde_02_feedBack_bufferobj->setIndex(26);
                this->comb_tilde_02_feedBack_buffer = new Float64Buffer(this->comb_tilde_02_feedBack_bufferobj);
                this->comb_tilde_03_feedForward_bufferobj->setIndex(27);
                this->comb_tilde_03_feedForward_buffer = new Float64Buffer(this->comb_tilde_03_feedForward_bufferobj);
                this->comb_tilde_03_feedBack_bufferobj->setIndex(28);
                this->comb_tilde_03_feedBack_buffer = new Float64Buffer(this->comb_tilde_03_feedBack_bufferobj);
                this->comb_tilde_04_feedForward_bufferobj->setIndex(29);
                this->comb_tilde_04_feedForward_buffer = new Float64Buffer(this->comb_tilde_04_feedForward_bufferobj);
                this->comb_tilde_04_feedBack_bufferobj->setIndex(30);
                this->comb_tilde_04_feedBack_buffer = new Float64Buffer(this->comb_tilde_04_feedBack_bufferobj);
                this->comb_tilde_05_feedForward_bufferobj->setIndex(31);
                this->comb_tilde_05_feedForward_buffer = new Float64Buffer(this->comb_tilde_05_feedForward_bufferobj);
                this->comb_tilde_05_feedBack_bufferobj->setIndex(32);
                this->comb_tilde_05_feedBack_buffer = new Float64Buffer(this->comb_tilde_05_feedBack_bufferobj);
                this->comb_tilde_06_feedForward_bufferobj->setIndex(33);
                this->comb_tilde_06_feedForward_buffer = new Float64Buffer(this->comb_tilde_06_feedForward_bufferobj);
                this->comb_tilde_06_feedBack_bufferobj->setIndex(34);
                this->comb_tilde_06_feedBack_buffer = new Float64Buffer(this->comb_tilde_06_feedBack_bufferobj);
                this->comb_tilde_07_feedForward_bufferobj->setIndex(35);
                this->comb_tilde_07_feedForward_buffer = new Float64Buffer(this->comb_tilde_07_feedForward_bufferobj);
                this->comb_tilde_07_feedBack_bufferobj->setIndex(36);
                this->comb_tilde_07_feedBack_buffer = new Float64Buffer(this->comb_tilde_07_feedBack_bufferobj);
            }
            
            protected:
            
            void eventinlet_07_out1_bang_bang() {
                this->expr_23_in1_bang();
                this->expr_22_in1_bang();
                this->expr_21_in1_bang();
                this->expr_20_in1_bang();
                this->expr_19_in1_bang();
                this->expr_18_in1_bang();
                this->expr_17_in1_bang();
            }
            
            void eventinlet_07_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_23_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_23_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_22_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_22_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_21_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_21_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_20_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_20_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_19_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_19_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_18_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_18_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_17_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_17_in1_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 7;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->comb_tilde_01_feedForward_init();
                this->comb_tilde_01_feedBack_init();
                this->comb_tilde_01_init();
                this->comb_tilde_02_feedForward_init();
                this->comb_tilde_02_feedBack_init();
                this->comb_tilde_02_init();
                this->comb_tilde_03_feedForward_init();
                this->comb_tilde_03_feedBack_init();
                this->comb_tilde_03_init();
                this->comb_tilde_04_feedForward_init();
                this->comb_tilde_04_feedBack_init();
                this->comb_tilde_04_init();
                this->comb_tilde_05_feedForward_init();
                this->comb_tilde_05_feedBack_init();
                this->comb_tilde_05_init();
                this->comb_tilde_06_feedForward_init();
                this->comb_tilde_06_feedBack_init();
                this->comb_tilde_06_init();
                this->comb_tilde_07_feedForward_init();
                this->comb_tilde_07_feedBack_init();
                this->comb_tilde_07_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->comb_tilde_01_feedForward_buffer = this->comb_tilde_01_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_01_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_01_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_01_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(23);
                }
            
                this->comb_tilde_01_feedBack_buffer = this->comb_tilde_01_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_01_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_01_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_01_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(24);
                }
            
                this->comb_tilde_02_feedForward_buffer = this->comb_tilde_02_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_02_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_02_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_02_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(25);
                }
            
                this->comb_tilde_02_feedBack_buffer = this->comb_tilde_02_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_02_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_02_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_02_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(26);
                }
            
                this->comb_tilde_03_feedForward_buffer = this->comb_tilde_03_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_03_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_03_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_03_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(27);
                }
            
                this->comb_tilde_03_feedBack_buffer = this->comb_tilde_03_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_03_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_03_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_03_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(28);
                }
            
                this->comb_tilde_04_feedForward_buffer = this->comb_tilde_04_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_04_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_04_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_04_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(29);
                }
            
                this->comb_tilde_04_feedBack_buffer = this->comb_tilde_04_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_04_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_04_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_04_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(30);
                }
            
                this->comb_tilde_05_feedForward_buffer = this->comb_tilde_05_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_05_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_05_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_05_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(31);
                }
            
                this->comb_tilde_05_feedBack_buffer = this->comb_tilde_05_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_05_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_05_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_05_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(32);
                }
            
                this->comb_tilde_06_feedForward_buffer = this->comb_tilde_06_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_06_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_06_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_06_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(33);
                }
            
                this->comb_tilde_06_feedBack_buffer = this->comb_tilde_06_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_06_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_06_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_06_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(34);
                }
            
                this->comb_tilde_07_feedForward_buffer = this->comb_tilde_07_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_07_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_07_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_07_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(35);
                }
            
                this->comb_tilde_07_feedBack_buffer = this->comb_tilde_07_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_07_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_07_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_07_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(36);
                }
            }
            
            void comb_tilde_07_delayTime_set(number v) {
                this->comb_tilde_07_delayTime = v;
            }
            
            void expr_23_out1_set(number v) {
                this->expr_23_out1 = v;
                this->comb_tilde_07_delayTime_set(this->expr_23_out1);
            }
            
            void expr_23_in1_set(number in1) {
                this->expr_23_in1 = in1;
                this->expr_23_out1_set(this->expr_23_in1 * this->expr_23_in2);//#map:reverb/combineL/*_obj-16:1
            }
            
            void comb_tilde_06_delayTime_set(number v) {
                this->comb_tilde_06_delayTime = v;
            }
            
            void expr_22_out1_set(number v) {
                this->expr_22_out1 = v;
                this->comb_tilde_06_delayTime_set(this->expr_22_out1);
            }
            
            void expr_22_in1_set(number in1) {
                this->expr_22_in1 = in1;
                this->expr_22_out1_set(this->expr_22_in1 * this->expr_22_in2);//#map:reverb/combineL/*_obj-17:1
            }
            
            void comb_tilde_05_delayTime_set(number v) {
                this->comb_tilde_05_delayTime = v;
            }
            
            void expr_21_out1_set(number v) {
                this->expr_21_out1 = v;
                this->comb_tilde_05_delayTime_set(this->expr_21_out1);
            }
            
            void expr_21_in1_set(number in1) {
                this->expr_21_in1 = in1;
                this->expr_21_out1_set(this->expr_21_in1 * this->expr_21_in2);//#map:reverb/combineL/*_obj-18:1
            }
            
            void comb_tilde_04_delayTime_set(number v) {
                this->comb_tilde_04_delayTime = v;
            }
            
            void expr_20_out1_set(number v) {
                this->expr_20_out1 = v;
                this->comb_tilde_04_delayTime_set(this->expr_20_out1);
            }
            
            void expr_20_in1_set(number in1) {
                this->expr_20_in1 = in1;
                this->expr_20_out1_set(this->expr_20_in1 * this->expr_20_in2);//#map:reverb/combineL/*_obj-19:1
            }
            
            void comb_tilde_03_delayTime_set(number v) {
                this->comb_tilde_03_delayTime = v;
            }
            
            void expr_19_out1_set(number v) {
                this->expr_19_out1 = v;
                this->comb_tilde_03_delayTime_set(this->expr_19_out1);
            }
            
            void expr_19_in1_set(number in1) {
                this->expr_19_in1 = in1;
                this->expr_19_out1_set(this->expr_19_in1 * this->expr_19_in2);//#map:reverb/combineL/*_obj-20:1
            }
            
            void comb_tilde_02_delayTime_set(number v) {
                this->comb_tilde_02_delayTime = v;
            }
            
            void expr_18_out1_set(number v) {
                this->expr_18_out1 = v;
                this->comb_tilde_02_delayTime_set(this->expr_18_out1);
            }
            
            void expr_18_in1_set(number in1) {
                this->expr_18_in1 = in1;
                this->expr_18_out1_set(this->expr_18_in1 * this->expr_18_in2);//#map:reverb/combineL/*_obj-21:1
            }
            
            void comb_tilde_01_delayTime_set(number v) {
                this->comb_tilde_01_delayTime = v;
            }
            
            void expr_17_out1_set(number v) {
                this->expr_17_out1 = v;
                this->comb_tilde_01_delayTime_set(this->expr_17_out1);
            }
            
            void expr_17_in1_set(number in1) {
                this->expr_17_in1 = in1;
                this->expr_17_out1_set(this->expr_17_in1 * this->expr_17_in2);//#map:reverb/combineL/*_obj-22:1
            }
            
            void eventinlet_07_out1_number_set(number v) {
                this->expr_23_in1_set(v);
                this->expr_22_in1_set(v);
                this->expr_21_in1_set(v);
                this->expr_20_in1_set(v);
                this->expr_19_in1_set(v);
                this->expr_18_in1_set(v);
                this->expr_17_in1_set(v);
            }
            
            void expr_23_in1_bang() {
                this->expr_23_out1_set(this->expr_23_in1 * this->expr_23_in2);//#map:reverb/combineL/*_obj-16:1
            }
            
            void expr_22_in1_bang() {
                this->expr_22_out1_set(this->expr_22_in1 * this->expr_22_in2);//#map:reverb/combineL/*_obj-17:1
            }
            
            void expr_21_in1_bang() {
                this->expr_21_out1_set(this->expr_21_in1 * this->expr_21_in2);//#map:reverb/combineL/*_obj-18:1
            }
            
            void expr_20_in1_bang() {
                this->expr_20_out1_set(this->expr_20_in1 * this->expr_20_in2);//#map:reverb/combineL/*_obj-19:1
            }
            
            void expr_19_in1_bang() {
                this->expr_19_out1_set(this->expr_19_in1 * this->expr_19_in2);//#map:reverb/combineL/*_obj-20:1
            }
            
            void expr_18_in1_bang() {
                this->expr_18_out1_set(this->expr_18_in1 * this->expr_18_in2);//#map:reverb/combineL/*_obj-21:1
            }
            
            void expr_17_in1_bang() {
                this->expr_17_out1_set(this->expr_17_in1 * this->expr_17_in2);//#map:reverb/combineL/*_obj-22:1
            }
            
            void expr_23_in2_set(number v) {
                this->expr_23_in2 = v;
            }
            
            void expr_22_in2_set(number v) {
                this->expr_22_in2 = v;
            }
            
            void expr_21_in2_set(number v) {
                this->expr_21_in2 = v;
            }
            
            void expr_20_in2_set(number v) {
                this->expr_20_in2 = v;
            }
            
            void expr_19_in2_set(number v) {
                this->expr_19_in2 = v;
            }
            
            void expr_18_in2_set(number v) {
                this->expr_18_in2 = v;
            }
            
            void expr_17_in2_set(number v) {
                this->expr_17_in2 = v;
            }
            
            void comb_tilde_01_perform(
                const Sample * x,
                number delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = fbGain;
                    number __ffGain = 0;
                    number __gain = 110;
                    number __delayTime = delayTime;
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_01_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_01_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_01_feedForward_write(x[(Index)i]);
                    this->comb_tilde_01_feedBack_write(ov);
                    this->comb_tilde_01_feedForward_step();
                    this->comb_tilde_01_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void comb_tilde_02_perform(
                const Sample * x,
                number delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = fbGain;
                    number __ffGain = 0;
                    number __gain = 160;
                    number __delayTime = delayTime;
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_02_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_02_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_02_feedForward_write(x[(Index)i]);
                    this->comb_tilde_02_feedBack_write(ov);
                    this->comb_tilde_02_feedForward_step();
                    this->comb_tilde_02_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void comb_tilde_03_perform(
                const Sample * x,
                number delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = fbGain;
                    number __ffGain = 0;
                    number __gain = 50;
                    number __delayTime = delayTime;
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_03_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_03_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_03_feedForward_write(x[(Index)i]);
                    this->comb_tilde_03_feedBack_write(ov);
                    this->comb_tilde_03_feedForward_step();
                    this->comb_tilde_03_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void comb_tilde_04_perform(
                const Sample * x,
                number delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = fbGain;
                    number __ffGain = 0;
                    number __gain = 25;
                    number __delayTime = delayTime;
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_04_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_04_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_04_feedForward_write(x[(Index)i]);
                    this->comb_tilde_04_feedBack_write(ov);
                    this->comb_tilde_04_feedForward_step();
                    this->comb_tilde_04_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void comb_tilde_05_perform(
                const Sample * x,
                number delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = fbGain;
                    number __ffGain = 0;
                    number __gain = 69;
                    number __delayTime = delayTime;
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_05_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_05_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_05_feedForward_write(x[(Index)i]);
                    this->comb_tilde_05_feedBack_write(ov);
                    this->comb_tilde_05_feedForward_step();
                    this->comb_tilde_05_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void comb_tilde_06_perform(
                const Sample * x,
                number delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = fbGain;
                    number __ffGain = 0;
                    number __gain = 80;
                    number __delayTime = delayTime;
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_06_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_06_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_06_feedForward_write(x[(Index)i]);
                    this->comb_tilde_06_feedBack_write(ov);
                    this->comb_tilde_06_feedForward_step();
                    this->comb_tilde_06_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void comb_tilde_07_perform(
                const Sample * x,
                number delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = fbGain;
                    number __ffGain = 0;
                    number __gain = 75;
                    number __delayTime = delayTime;
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_07_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_07_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_07_feedForward_write(x[(Index)i]);
                    this->comb_tilde_07_feedBack_write(ov);
                    this->comb_tilde_07_feedForward_step();
                    this->comb_tilde_07_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void signaladder_09_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                }
            }
            
            void dspexpr_02_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * -1;//#map:_###_obj_###_:1
                }
            }
            
            void signaladder_10_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                }
            }
            
            void dspexpr_01_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 0.15;//#map:_###_obj_###_:1
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void comb_tilde_01_feedForward_step() {
                this->comb_tilde_01_feedForward_reader++;
            
                if (this->comb_tilde_01_feedForward_reader >= (int)(this->comb_tilde_01_feedForward_buffer->getSize()))
                    this->comb_tilde_01_feedForward_reader = 0;
            }
            
            number comb_tilde_01_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? 1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? 1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_01_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                );
            }
            
            void comb_tilde_01_feedForward_write(number v) {
                this->comb_tilde_01_feedForward_writer = this->comb_tilde_01_feedForward_reader;
                this->comb_tilde_01_feedForward_buffer[(Index)this->comb_tilde_01_feedForward_writer] = v;
            }
            
            number comb_tilde_01_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_01_feedForward__maxdelay : size);
                number val = this->comb_tilde_01_feedForward_read(effectiveSize, 0);
                this->comb_tilde_01_feedForward_write(v);
                this->comb_tilde_01_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_01_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_01_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_01_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_01_feedForward_init() {
                auto result = this->comb_tilde_01_feedForward_calcSizeInSamples();
                this->comb_tilde_01_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_01_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_01_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_01_feedForward_clear() {
                this->comb_tilde_01_feedForward_buffer->setZero();
            }
            
            void comb_tilde_01_feedForward_reset() {
                auto result = this->comb_tilde_01_feedForward_calcSizeInSamples();
                this->comb_tilde_01_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_01_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_01_feedForward_buffer);
                this->comb_tilde_01_feedForward_wrap = this->comb_tilde_01_feedForward_buffer->getSize() - 1;
                this->comb_tilde_01_feedForward_clear();
            
                if (this->comb_tilde_01_feedForward_reader >= this->comb_tilde_01_feedForward__maxdelay || this->comb_tilde_01_feedForward_writer >= this->comb_tilde_01_feedForward__maxdelay) {
                    this->comb_tilde_01_feedForward_reader = 0;
                    this->comb_tilde_01_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_01_feedForward_dspsetup() {
                this->comb_tilde_01_feedForward_reset();
            }
            
            number comb_tilde_01_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_01_feedForward_size() {
                return this->comb_tilde_01_feedForward__maxdelay;
            }
            
            void comb_tilde_01_feedBack_step() {
                this->comb_tilde_01_feedBack_reader++;
            
                if (this->comb_tilde_01_feedBack_reader >= (int)(this->comb_tilde_01_feedBack_buffer->getSize()))
                    this->comb_tilde_01_feedBack_reader = 0;
            }
            
            number comb_tilde_01_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? 1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? 1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_01_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                );
            }
            
            void comb_tilde_01_feedBack_write(number v) {
                this->comb_tilde_01_feedBack_writer = this->comb_tilde_01_feedBack_reader;
                this->comb_tilde_01_feedBack_buffer[(Index)this->comb_tilde_01_feedBack_writer] = v;
            }
            
            number comb_tilde_01_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_01_feedBack__maxdelay : size);
                number val = this->comb_tilde_01_feedBack_read(effectiveSize, 0);
                this->comb_tilde_01_feedBack_write(v);
                this->comb_tilde_01_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_01_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_01_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_01_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_01_feedBack_init() {
                auto result = this->comb_tilde_01_feedBack_calcSizeInSamples();
                this->comb_tilde_01_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_01_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_01_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_01_feedBack_clear() {
                this->comb_tilde_01_feedBack_buffer->setZero();
            }
            
            void comb_tilde_01_feedBack_reset() {
                auto result = this->comb_tilde_01_feedBack_calcSizeInSamples();
                this->comb_tilde_01_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_01_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_01_feedBack_buffer);
                this->comb_tilde_01_feedBack_wrap = this->comb_tilde_01_feedBack_buffer->getSize() - 1;
                this->comb_tilde_01_feedBack_clear();
            
                if (this->comb_tilde_01_feedBack_reader >= this->comb_tilde_01_feedBack__maxdelay || this->comb_tilde_01_feedBack_writer >= this->comb_tilde_01_feedBack__maxdelay) {
                    this->comb_tilde_01_feedBack_reader = 0;
                    this->comb_tilde_01_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_01_feedBack_dspsetup() {
                this->comb_tilde_01_feedBack_reset();
            }
            
            number comb_tilde_01_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_01_feedBack_size() {
                return this->comb_tilde_01_feedBack__maxdelay;
            }
            
            void comb_tilde_01_init() {
                this->comb_tilde_01_feedForward_init();
                this->comb_tilde_01_feedBack_init();
            }
            
            void comb_tilde_01_clear() {
                this->comb_tilde_01_feedForward_clear();
                this->comb_tilde_01_feedBack_clear();
            }
            
            void comb_tilde_01_reset() {
                this->comb_tilde_01_init();
                this->comb_tilde_01_clear();
            }
            
            void comb_tilde_01_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_01_reset();
                this->comb_tilde_01_setupDone = true;
                this->comb_tilde_01_feedForward_dspsetup();
                this->comb_tilde_01_feedBack_dspsetup();
            }
            
            void comb_tilde_02_feedForward_step() {
                this->comb_tilde_02_feedForward_reader++;
            
                if (this->comb_tilde_02_feedForward_reader >= (int)(this->comb_tilde_02_feedForward_buffer->getSize()))
                    this->comb_tilde_02_feedForward_reader = 0;
            }
            
            number comb_tilde_02_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? 1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? 1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_02_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                );
            }
            
            void comb_tilde_02_feedForward_write(number v) {
                this->comb_tilde_02_feedForward_writer = this->comb_tilde_02_feedForward_reader;
                this->comb_tilde_02_feedForward_buffer[(Index)this->comb_tilde_02_feedForward_writer] = v;
            }
            
            number comb_tilde_02_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_02_feedForward__maxdelay : size);
                number val = this->comb_tilde_02_feedForward_read(effectiveSize, 0);
                this->comb_tilde_02_feedForward_write(v);
                this->comb_tilde_02_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_02_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_02_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_02_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_02_feedForward_init() {
                auto result = this->comb_tilde_02_feedForward_calcSizeInSamples();
                this->comb_tilde_02_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_02_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_02_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_02_feedForward_clear() {
                this->comb_tilde_02_feedForward_buffer->setZero();
            }
            
            void comb_tilde_02_feedForward_reset() {
                auto result = this->comb_tilde_02_feedForward_calcSizeInSamples();
                this->comb_tilde_02_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_02_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_02_feedForward_buffer);
                this->comb_tilde_02_feedForward_wrap = this->comb_tilde_02_feedForward_buffer->getSize() - 1;
                this->comb_tilde_02_feedForward_clear();
            
                if (this->comb_tilde_02_feedForward_reader >= this->comb_tilde_02_feedForward__maxdelay || this->comb_tilde_02_feedForward_writer >= this->comb_tilde_02_feedForward__maxdelay) {
                    this->comb_tilde_02_feedForward_reader = 0;
                    this->comb_tilde_02_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_02_feedForward_dspsetup() {
                this->comb_tilde_02_feedForward_reset();
            }
            
            number comb_tilde_02_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_02_feedForward_size() {
                return this->comb_tilde_02_feedForward__maxdelay;
            }
            
            void comb_tilde_02_feedBack_step() {
                this->comb_tilde_02_feedBack_reader++;
            
                if (this->comb_tilde_02_feedBack_reader >= (int)(this->comb_tilde_02_feedBack_buffer->getSize()))
                    this->comb_tilde_02_feedBack_reader = 0;
            }
            
            number comb_tilde_02_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? 1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? 1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_02_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                );
            }
            
            void comb_tilde_02_feedBack_write(number v) {
                this->comb_tilde_02_feedBack_writer = this->comb_tilde_02_feedBack_reader;
                this->comb_tilde_02_feedBack_buffer[(Index)this->comb_tilde_02_feedBack_writer] = v;
            }
            
            number comb_tilde_02_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_02_feedBack__maxdelay : size);
                number val = this->comb_tilde_02_feedBack_read(effectiveSize, 0);
                this->comb_tilde_02_feedBack_write(v);
                this->comb_tilde_02_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_02_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_02_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_02_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_02_feedBack_init() {
                auto result = this->comb_tilde_02_feedBack_calcSizeInSamples();
                this->comb_tilde_02_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_02_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_02_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_02_feedBack_clear() {
                this->comb_tilde_02_feedBack_buffer->setZero();
            }
            
            void comb_tilde_02_feedBack_reset() {
                auto result = this->comb_tilde_02_feedBack_calcSizeInSamples();
                this->comb_tilde_02_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_02_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_02_feedBack_buffer);
                this->comb_tilde_02_feedBack_wrap = this->comb_tilde_02_feedBack_buffer->getSize() - 1;
                this->comb_tilde_02_feedBack_clear();
            
                if (this->comb_tilde_02_feedBack_reader >= this->comb_tilde_02_feedBack__maxdelay || this->comb_tilde_02_feedBack_writer >= this->comb_tilde_02_feedBack__maxdelay) {
                    this->comb_tilde_02_feedBack_reader = 0;
                    this->comb_tilde_02_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_02_feedBack_dspsetup() {
                this->comb_tilde_02_feedBack_reset();
            }
            
            number comb_tilde_02_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_02_feedBack_size() {
                return this->comb_tilde_02_feedBack__maxdelay;
            }
            
            void comb_tilde_02_init() {
                this->comb_tilde_02_feedForward_init();
                this->comb_tilde_02_feedBack_init();
            }
            
            void comb_tilde_02_clear() {
                this->comb_tilde_02_feedForward_clear();
                this->comb_tilde_02_feedBack_clear();
            }
            
            void comb_tilde_02_reset() {
                this->comb_tilde_02_init();
                this->comb_tilde_02_clear();
            }
            
            void comb_tilde_02_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_02_reset();
                this->comb_tilde_02_setupDone = true;
                this->comb_tilde_02_feedForward_dspsetup();
                this->comb_tilde_02_feedBack_dspsetup();
            }
            
            void comb_tilde_03_feedForward_step() {
                this->comb_tilde_03_feedForward_reader++;
            
                if (this->comb_tilde_03_feedForward_reader >= (int)(this->comb_tilde_03_feedForward_buffer->getSize()))
                    this->comb_tilde_03_feedForward_reader = 0;
            }
            
            number comb_tilde_03_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? 1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? 1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_03_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                );
            }
            
            void comb_tilde_03_feedForward_write(number v) {
                this->comb_tilde_03_feedForward_writer = this->comb_tilde_03_feedForward_reader;
                this->comb_tilde_03_feedForward_buffer[(Index)this->comb_tilde_03_feedForward_writer] = v;
            }
            
            number comb_tilde_03_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_03_feedForward__maxdelay : size);
                number val = this->comb_tilde_03_feedForward_read(effectiveSize, 0);
                this->comb_tilde_03_feedForward_write(v);
                this->comb_tilde_03_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_03_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_03_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_03_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_03_feedForward_init() {
                auto result = this->comb_tilde_03_feedForward_calcSizeInSamples();
                this->comb_tilde_03_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_03_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_03_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_03_feedForward_clear() {
                this->comb_tilde_03_feedForward_buffer->setZero();
            }
            
            void comb_tilde_03_feedForward_reset() {
                auto result = this->comb_tilde_03_feedForward_calcSizeInSamples();
                this->comb_tilde_03_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_03_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_03_feedForward_buffer);
                this->comb_tilde_03_feedForward_wrap = this->comb_tilde_03_feedForward_buffer->getSize() - 1;
                this->comb_tilde_03_feedForward_clear();
            
                if (this->comb_tilde_03_feedForward_reader >= this->comb_tilde_03_feedForward__maxdelay || this->comb_tilde_03_feedForward_writer >= this->comb_tilde_03_feedForward__maxdelay) {
                    this->comb_tilde_03_feedForward_reader = 0;
                    this->comb_tilde_03_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_03_feedForward_dspsetup() {
                this->comb_tilde_03_feedForward_reset();
            }
            
            number comb_tilde_03_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_03_feedForward_size() {
                return this->comb_tilde_03_feedForward__maxdelay;
            }
            
            void comb_tilde_03_feedBack_step() {
                this->comb_tilde_03_feedBack_reader++;
            
                if (this->comb_tilde_03_feedBack_reader >= (int)(this->comb_tilde_03_feedBack_buffer->getSize()))
                    this->comb_tilde_03_feedBack_reader = 0;
            }
            
            number comb_tilde_03_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? 1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? 1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_03_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                );
            }
            
            void comb_tilde_03_feedBack_write(number v) {
                this->comb_tilde_03_feedBack_writer = this->comb_tilde_03_feedBack_reader;
                this->comb_tilde_03_feedBack_buffer[(Index)this->comb_tilde_03_feedBack_writer] = v;
            }
            
            number comb_tilde_03_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_03_feedBack__maxdelay : size);
                number val = this->comb_tilde_03_feedBack_read(effectiveSize, 0);
                this->comb_tilde_03_feedBack_write(v);
                this->comb_tilde_03_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_03_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_03_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_03_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_03_feedBack_init() {
                auto result = this->comb_tilde_03_feedBack_calcSizeInSamples();
                this->comb_tilde_03_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_03_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_03_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_03_feedBack_clear() {
                this->comb_tilde_03_feedBack_buffer->setZero();
            }
            
            void comb_tilde_03_feedBack_reset() {
                auto result = this->comb_tilde_03_feedBack_calcSizeInSamples();
                this->comb_tilde_03_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_03_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_03_feedBack_buffer);
                this->comb_tilde_03_feedBack_wrap = this->comb_tilde_03_feedBack_buffer->getSize() - 1;
                this->comb_tilde_03_feedBack_clear();
            
                if (this->comb_tilde_03_feedBack_reader >= this->comb_tilde_03_feedBack__maxdelay || this->comb_tilde_03_feedBack_writer >= this->comb_tilde_03_feedBack__maxdelay) {
                    this->comb_tilde_03_feedBack_reader = 0;
                    this->comb_tilde_03_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_03_feedBack_dspsetup() {
                this->comb_tilde_03_feedBack_reset();
            }
            
            number comb_tilde_03_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_03_feedBack_size() {
                return this->comb_tilde_03_feedBack__maxdelay;
            }
            
            void comb_tilde_03_init() {
                this->comb_tilde_03_feedForward_init();
                this->comb_tilde_03_feedBack_init();
            }
            
            void comb_tilde_03_clear() {
                this->comb_tilde_03_feedForward_clear();
                this->comb_tilde_03_feedBack_clear();
            }
            
            void comb_tilde_03_reset() {
                this->comb_tilde_03_init();
                this->comb_tilde_03_clear();
            }
            
            void comb_tilde_03_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_03_reset();
                this->comb_tilde_03_setupDone = true;
                this->comb_tilde_03_feedForward_dspsetup();
                this->comb_tilde_03_feedBack_dspsetup();
            }
            
            void comb_tilde_04_feedForward_step() {
                this->comb_tilde_04_feedForward_reader++;
            
                if (this->comb_tilde_04_feedForward_reader >= (int)(this->comb_tilde_04_feedForward_buffer->getSize()))
                    this->comb_tilde_04_feedForward_reader = 0;
            }
            
            number comb_tilde_04_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? 1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? 1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_04_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                );
            }
            
            void comb_tilde_04_feedForward_write(number v) {
                this->comb_tilde_04_feedForward_writer = this->comb_tilde_04_feedForward_reader;
                this->comb_tilde_04_feedForward_buffer[(Index)this->comb_tilde_04_feedForward_writer] = v;
            }
            
            number comb_tilde_04_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_04_feedForward__maxdelay : size);
                number val = this->comb_tilde_04_feedForward_read(effectiveSize, 0);
                this->comb_tilde_04_feedForward_write(v);
                this->comb_tilde_04_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_04_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_04_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_04_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_04_feedForward_init() {
                auto result = this->comb_tilde_04_feedForward_calcSizeInSamples();
                this->comb_tilde_04_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_04_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_04_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_04_feedForward_clear() {
                this->comb_tilde_04_feedForward_buffer->setZero();
            }
            
            void comb_tilde_04_feedForward_reset() {
                auto result = this->comb_tilde_04_feedForward_calcSizeInSamples();
                this->comb_tilde_04_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_04_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_04_feedForward_buffer);
                this->comb_tilde_04_feedForward_wrap = this->comb_tilde_04_feedForward_buffer->getSize() - 1;
                this->comb_tilde_04_feedForward_clear();
            
                if (this->comb_tilde_04_feedForward_reader >= this->comb_tilde_04_feedForward__maxdelay || this->comb_tilde_04_feedForward_writer >= this->comb_tilde_04_feedForward__maxdelay) {
                    this->comb_tilde_04_feedForward_reader = 0;
                    this->comb_tilde_04_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_04_feedForward_dspsetup() {
                this->comb_tilde_04_feedForward_reset();
            }
            
            number comb_tilde_04_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_04_feedForward_size() {
                return this->comb_tilde_04_feedForward__maxdelay;
            }
            
            void comb_tilde_04_feedBack_step() {
                this->comb_tilde_04_feedBack_reader++;
            
                if (this->comb_tilde_04_feedBack_reader >= (int)(this->comb_tilde_04_feedBack_buffer->getSize()))
                    this->comb_tilde_04_feedBack_reader = 0;
            }
            
            number comb_tilde_04_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? 1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? 1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_04_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                );
            }
            
            void comb_tilde_04_feedBack_write(number v) {
                this->comb_tilde_04_feedBack_writer = this->comb_tilde_04_feedBack_reader;
                this->comb_tilde_04_feedBack_buffer[(Index)this->comb_tilde_04_feedBack_writer] = v;
            }
            
            number comb_tilde_04_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_04_feedBack__maxdelay : size);
                number val = this->comb_tilde_04_feedBack_read(effectiveSize, 0);
                this->comb_tilde_04_feedBack_write(v);
                this->comb_tilde_04_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_04_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_04_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_04_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_04_feedBack_init() {
                auto result = this->comb_tilde_04_feedBack_calcSizeInSamples();
                this->comb_tilde_04_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_04_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_04_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_04_feedBack_clear() {
                this->comb_tilde_04_feedBack_buffer->setZero();
            }
            
            void comb_tilde_04_feedBack_reset() {
                auto result = this->comb_tilde_04_feedBack_calcSizeInSamples();
                this->comb_tilde_04_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_04_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_04_feedBack_buffer);
                this->comb_tilde_04_feedBack_wrap = this->comb_tilde_04_feedBack_buffer->getSize() - 1;
                this->comb_tilde_04_feedBack_clear();
            
                if (this->comb_tilde_04_feedBack_reader >= this->comb_tilde_04_feedBack__maxdelay || this->comb_tilde_04_feedBack_writer >= this->comb_tilde_04_feedBack__maxdelay) {
                    this->comb_tilde_04_feedBack_reader = 0;
                    this->comb_tilde_04_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_04_feedBack_dspsetup() {
                this->comb_tilde_04_feedBack_reset();
            }
            
            number comb_tilde_04_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_04_feedBack_size() {
                return this->comb_tilde_04_feedBack__maxdelay;
            }
            
            void comb_tilde_04_init() {
                this->comb_tilde_04_feedForward_init();
                this->comb_tilde_04_feedBack_init();
            }
            
            void comb_tilde_04_clear() {
                this->comb_tilde_04_feedForward_clear();
                this->comb_tilde_04_feedBack_clear();
            }
            
            void comb_tilde_04_reset() {
                this->comb_tilde_04_init();
                this->comb_tilde_04_clear();
            }
            
            void comb_tilde_04_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_04_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_04_reset();
                this->comb_tilde_04_setupDone = true;
                this->comb_tilde_04_feedForward_dspsetup();
                this->comb_tilde_04_feedBack_dspsetup();
            }
            
            void comb_tilde_05_feedForward_step() {
                this->comb_tilde_05_feedForward_reader++;
            
                if (this->comb_tilde_05_feedForward_reader >= (int)(this->comb_tilde_05_feedForward_buffer->getSize()))
                    this->comb_tilde_05_feedForward_reader = 0;
            }
            
            number comb_tilde_05_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? 1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? 1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_05_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                );
            }
            
            void comb_tilde_05_feedForward_write(number v) {
                this->comb_tilde_05_feedForward_writer = this->comb_tilde_05_feedForward_reader;
                this->comb_tilde_05_feedForward_buffer[(Index)this->comb_tilde_05_feedForward_writer] = v;
            }
            
            number comb_tilde_05_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_05_feedForward__maxdelay : size);
                number val = this->comb_tilde_05_feedForward_read(effectiveSize, 0);
                this->comb_tilde_05_feedForward_write(v);
                this->comb_tilde_05_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_05_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_05_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_05_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_05_feedForward_init() {
                auto result = this->comb_tilde_05_feedForward_calcSizeInSamples();
                this->comb_tilde_05_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_05_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_05_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_05_feedForward_clear() {
                this->comb_tilde_05_feedForward_buffer->setZero();
            }
            
            void comb_tilde_05_feedForward_reset() {
                auto result = this->comb_tilde_05_feedForward_calcSizeInSamples();
                this->comb_tilde_05_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_05_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_05_feedForward_buffer);
                this->comb_tilde_05_feedForward_wrap = this->comb_tilde_05_feedForward_buffer->getSize() - 1;
                this->comb_tilde_05_feedForward_clear();
            
                if (this->comb_tilde_05_feedForward_reader >= this->comb_tilde_05_feedForward__maxdelay || this->comb_tilde_05_feedForward_writer >= this->comb_tilde_05_feedForward__maxdelay) {
                    this->comb_tilde_05_feedForward_reader = 0;
                    this->comb_tilde_05_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_05_feedForward_dspsetup() {
                this->comb_tilde_05_feedForward_reset();
            }
            
            number comb_tilde_05_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_05_feedForward_size() {
                return this->comb_tilde_05_feedForward__maxdelay;
            }
            
            void comb_tilde_05_feedBack_step() {
                this->comb_tilde_05_feedBack_reader++;
            
                if (this->comb_tilde_05_feedBack_reader >= (int)(this->comb_tilde_05_feedBack_buffer->getSize()))
                    this->comb_tilde_05_feedBack_reader = 0;
            }
            
            number comb_tilde_05_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? 1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? 1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_05_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                );
            }
            
            void comb_tilde_05_feedBack_write(number v) {
                this->comb_tilde_05_feedBack_writer = this->comb_tilde_05_feedBack_reader;
                this->comb_tilde_05_feedBack_buffer[(Index)this->comb_tilde_05_feedBack_writer] = v;
            }
            
            number comb_tilde_05_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_05_feedBack__maxdelay : size);
                number val = this->comb_tilde_05_feedBack_read(effectiveSize, 0);
                this->comb_tilde_05_feedBack_write(v);
                this->comb_tilde_05_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_05_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_05_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_05_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_05_feedBack_init() {
                auto result = this->comb_tilde_05_feedBack_calcSizeInSamples();
                this->comb_tilde_05_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_05_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_05_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_05_feedBack_clear() {
                this->comb_tilde_05_feedBack_buffer->setZero();
            }
            
            void comb_tilde_05_feedBack_reset() {
                auto result = this->comb_tilde_05_feedBack_calcSizeInSamples();
                this->comb_tilde_05_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_05_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_05_feedBack_buffer);
                this->comb_tilde_05_feedBack_wrap = this->comb_tilde_05_feedBack_buffer->getSize() - 1;
                this->comb_tilde_05_feedBack_clear();
            
                if (this->comb_tilde_05_feedBack_reader >= this->comb_tilde_05_feedBack__maxdelay || this->comb_tilde_05_feedBack_writer >= this->comb_tilde_05_feedBack__maxdelay) {
                    this->comb_tilde_05_feedBack_reader = 0;
                    this->comb_tilde_05_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_05_feedBack_dspsetup() {
                this->comb_tilde_05_feedBack_reset();
            }
            
            number comb_tilde_05_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_05_feedBack_size() {
                return this->comb_tilde_05_feedBack__maxdelay;
            }
            
            void comb_tilde_05_init() {
                this->comb_tilde_05_feedForward_init();
                this->comb_tilde_05_feedBack_init();
            }
            
            void comb_tilde_05_clear() {
                this->comb_tilde_05_feedForward_clear();
                this->comb_tilde_05_feedBack_clear();
            }
            
            void comb_tilde_05_reset() {
                this->comb_tilde_05_init();
                this->comb_tilde_05_clear();
            }
            
            void comb_tilde_05_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_05_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_05_reset();
                this->comb_tilde_05_setupDone = true;
                this->comb_tilde_05_feedForward_dspsetup();
                this->comb_tilde_05_feedBack_dspsetup();
            }
            
            void comb_tilde_06_feedForward_step() {
                this->comb_tilde_06_feedForward_reader++;
            
                if (this->comb_tilde_06_feedForward_reader >= (int)(this->comb_tilde_06_feedForward_buffer->getSize()))
                    this->comb_tilde_06_feedForward_reader = 0;
            }
            
            number comb_tilde_06_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? 1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? 1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_06_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                );
            }
            
            void comb_tilde_06_feedForward_write(number v) {
                this->comb_tilde_06_feedForward_writer = this->comb_tilde_06_feedForward_reader;
                this->comb_tilde_06_feedForward_buffer[(Index)this->comb_tilde_06_feedForward_writer] = v;
            }
            
            number comb_tilde_06_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_06_feedForward__maxdelay : size);
                number val = this->comb_tilde_06_feedForward_read(effectiveSize, 0);
                this->comb_tilde_06_feedForward_write(v);
                this->comb_tilde_06_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_06_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_06_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_06_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_06_feedForward_init() {
                auto result = this->comb_tilde_06_feedForward_calcSizeInSamples();
                this->comb_tilde_06_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_06_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_06_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_06_feedForward_clear() {
                this->comb_tilde_06_feedForward_buffer->setZero();
            }
            
            void comb_tilde_06_feedForward_reset() {
                auto result = this->comb_tilde_06_feedForward_calcSizeInSamples();
                this->comb_tilde_06_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_06_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_06_feedForward_buffer);
                this->comb_tilde_06_feedForward_wrap = this->comb_tilde_06_feedForward_buffer->getSize() - 1;
                this->comb_tilde_06_feedForward_clear();
            
                if (this->comb_tilde_06_feedForward_reader >= this->comb_tilde_06_feedForward__maxdelay || this->comb_tilde_06_feedForward_writer >= this->comb_tilde_06_feedForward__maxdelay) {
                    this->comb_tilde_06_feedForward_reader = 0;
                    this->comb_tilde_06_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_06_feedForward_dspsetup() {
                this->comb_tilde_06_feedForward_reset();
            }
            
            number comb_tilde_06_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_06_feedForward_size() {
                return this->comb_tilde_06_feedForward__maxdelay;
            }
            
            void comb_tilde_06_feedBack_step() {
                this->comb_tilde_06_feedBack_reader++;
            
                if (this->comb_tilde_06_feedBack_reader >= (int)(this->comb_tilde_06_feedBack_buffer->getSize()))
                    this->comb_tilde_06_feedBack_reader = 0;
            }
            
            number comb_tilde_06_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? 1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? 1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_06_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                );
            }
            
            void comb_tilde_06_feedBack_write(number v) {
                this->comb_tilde_06_feedBack_writer = this->comb_tilde_06_feedBack_reader;
                this->comb_tilde_06_feedBack_buffer[(Index)this->comb_tilde_06_feedBack_writer] = v;
            }
            
            number comb_tilde_06_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_06_feedBack__maxdelay : size);
                number val = this->comb_tilde_06_feedBack_read(effectiveSize, 0);
                this->comb_tilde_06_feedBack_write(v);
                this->comb_tilde_06_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_06_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_06_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_06_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_06_feedBack_init() {
                auto result = this->comb_tilde_06_feedBack_calcSizeInSamples();
                this->comb_tilde_06_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_06_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_06_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_06_feedBack_clear() {
                this->comb_tilde_06_feedBack_buffer->setZero();
            }
            
            void comb_tilde_06_feedBack_reset() {
                auto result = this->comb_tilde_06_feedBack_calcSizeInSamples();
                this->comb_tilde_06_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_06_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_06_feedBack_buffer);
                this->comb_tilde_06_feedBack_wrap = this->comb_tilde_06_feedBack_buffer->getSize() - 1;
                this->comb_tilde_06_feedBack_clear();
            
                if (this->comb_tilde_06_feedBack_reader >= this->comb_tilde_06_feedBack__maxdelay || this->comb_tilde_06_feedBack_writer >= this->comb_tilde_06_feedBack__maxdelay) {
                    this->comb_tilde_06_feedBack_reader = 0;
                    this->comb_tilde_06_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_06_feedBack_dspsetup() {
                this->comb_tilde_06_feedBack_reset();
            }
            
            number comb_tilde_06_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_06_feedBack_size() {
                return this->comb_tilde_06_feedBack__maxdelay;
            }
            
            void comb_tilde_06_init() {
                this->comb_tilde_06_feedForward_init();
                this->comb_tilde_06_feedBack_init();
            }
            
            void comb_tilde_06_clear() {
                this->comb_tilde_06_feedForward_clear();
                this->comb_tilde_06_feedBack_clear();
            }
            
            void comb_tilde_06_reset() {
                this->comb_tilde_06_init();
                this->comb_tilde_06_clear();
            }
            
            void comb_tilde_06_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_06_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_06_reset();
                this->comb_tilde_06_setupDone = true;
                this->comb_tilde_06_feedForward_dspsetup();
                this->comb_tilde_06_feedBack_dspsetup();
            }
            
            void comb_tilde_07_feedForward_step() {
                this->comb_tilde_07_feedForward_reader++;
            
                if (this->comb_tilde_07_feedForward_reader >= (int)(this->comb_tilde_07_feedForward_buffer->getSize()))
                    this->comb_tilde_07_feedForward_reader = 0;
            }
            
            number comb_tilde_07_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? 1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? 1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_07_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                );
            }
            
            void comb_tilde_07_feedForward_write(number v) {
                this->comb_tilde_07_feedForward_writer = this->comb_tilde_07_feedForward_reader;
                this->comb_tilde_07_feedForward_buffer[(Index)this->comb_tilde_07_feedForward_writer] = v;
            }
            
            number comb_tilde_07_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_07_feedForward__maxdelay : size);
                number val = this->comb_tilde_07_feedForward_read(effectiveSize, 0);
                this->comb_tilde_07_feedForward_write(v);
                this->comb_tilde_07_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_07_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_07_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_07_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_07_feedForward_init() {
                auto result = this->comb_tilde_07_feedForward_calcSizeInSamples();
                this->comb_tilde_07_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_07_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_07_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_07_feedForward_clear() {
                this->comb_tilde_07_feedForward_buffer->setZero();
            }
            
            void comb_tilde_07_feedForward_reset() {
                auto result = this->comb_tilde_07_feedForward_calcSizeInSamples();
                this->comb_tilde_07_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_07_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_07_feedForward_buffer);
                this->comb_tilde_07_feedForward_wrap = this->comb_tilde_07_feedForward_buffer->getSize() - 1;
                this->comb_tilde_07_feedForward_clear();
            
                if (this->comb_tilde_07_feedForward_reader >= this->comb_tilde_07_feedForward__maxdelay || this->comb_tilde_07_feedForward_writer >= this->comb_tilde_07_feedForward__maxdelay) {
                    this->comb_tilde_07_feedForward_reader = 0;
                    this->comb_tilde_07_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_07_feedForward_dspsetup() {
                this->comb_tilde_07_feedForward_reset();
            }
            
            number comb_tilde_07_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_07_feedForward_size() {
                return this->comb_tilde_07_feedForward__maxdelay;
            }
            
            void comb_tilde_07_feedBack_step() {
                this->comb_tilde_07_feedBack_reader++;
            
                if (this->comb_tilde_07_feedBack_reader >= (int)(this->comb_tilde_07_feedBack_buffer->getSize()))
                    this->comb_tilde_07_feedBack_reader = 0;
            }
            
            number comb_tilde_07_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? 1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? 1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_07_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                );
            }
            
            void comb_tilde_07_feedBack_write(number v) {
                this->comb_tilde_07_feedBack_writer = this->comb_tilde_07_feedBack_reader;
                this->comb_tilde_07_feedBack_buffer[(Index)this->comb_tilde_07_feedBack_writer] = v;
            }
            
            number comb_tilde_07_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_07_feedBack__maxdelay : size);
                number val = this->comb_tilde_07_feedBack_read(effectiveSize, 0);
                this->comb_tilde_07_feedBack_write(v);
                this->comb_tilde_07_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_07_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_07_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_07_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_07_feedBack_init() {
                auto result = this->comb_tilde_07_feedBack_calcSizeInSamples();
                this->comb_tilde_07_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_07_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_07_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_07_feedBack_clear() {
                this->comb_tilde_07_feedBack_buffer->setZero();
            }
            
            void comb_tilde_07_feedBack_reset() {
                auto result = this->comb_tilde_07_feedBack_calcSizeInSamples();
                this->comb_tilde_07_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_07_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_07_feedBack_buffer);
                this->comb_tilde_07_feedBack_wrap = this->comb_tilde_07_feedBack_buffer->getSize() - 1;
                this->comb_tilde_07_feedBack_clear();
            
                if (this->comb_tilde_07_feedBack_reader >= this->comb_tilde_07_feedBack__maxdelay || this->comb_tilde_07_feedBack_writer >= this->comb_tilde_07_feedBack__maxdelay) {
                    this->comb_tilde_07_feedBack_reader = 0;
                    this->comb_tilde_07_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_07_feedBack_dspsetup() {
                this->comb_tilde_07_feedBack_reset();
            }
            
            number comb_tilde_07_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_07_feedBack_size() {
                return this->comb_tilde_07_feedBack__maxdelay;
            }
            
            void comb_tilde_07_init() {
                this->comb_tilde_07_feedForward_init();
                this->comb_tilde_07_feedBack_init();
            }
            
            void comb_tilde_07_clear() {
                this->comb_tilde_07_feedForward_clear();
                this->comb_tilde_07_feedBack_clear();
            }
            
            void comb_tilde_07_reset() {
                this->comb_tilde_07_init();
                this->comb_tilde_07_clear();
            }
            
            void comb_tilde_07_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_07_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_07_reset();
                this->comb_tilde_07_setupDone = true;
                this->comb_tilde_07_feedForward_dspsetup();
                this->comb_tilde_07_feedBack_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                comb_tilde_01_x = 0;
                comb_tilde_01_delayTime = 300;
                comb_tilde_01_gain = 110;
                comb_tilde_01_ffGain = 0;
                comb_tilde_01_fbGain = 1;
                expr_17_in1 = 0;
                expr_17_in2 = 110;
                expr_17_out1 = 0;
                comb_tilde_02_x = 0;
                comb_tilde_02_delayTime = 300;
                comb_tilde_02_gain = 160;
                comb_tilde_02_ffGain = 0;
                comb_tilde_02_fbGain = 1;
                expr_18_in1 = 0;
                expr_18_in2 = 160;
                expr_18_out1 = 0;
                dspexpr_01_in1 = 0;
                dspexpr_01_in2 = 0.15;
                dspexpr_02_in1 = 0;
                dspexpr_02_in2 = -1;
                comb_tilde_03_x = 0;
                comb_tilde_03_delayTime = 200;
                comb_tilde_03_gain = 50;
                comb_tilde_03_ffGain = 0;
                comb_tilde_03_fbGain = 1;
                expr_19_in1 = 0;
                expr_19_in2 = 50;
                expr_19_out1 = 0;
                comb_tilde_04_x = 0;
                comb_tilde_04_delayTime = 100;
                comb_tilde_04_gain = 25;
                comb_tilde_04_ffGain = 0;
                comb_tilde_04_fbGain = 1;
                expr_20_in1 = 0;
                expr_20_in2 = 25;
                expr_20_out1 = 0;
                comb_tilde_05_x = 0;
                comb_tilde_05_delayTime = 200;
                comb_tilde_05_gain = 69;
                comb_tilde_05_ffGain = 0;
                comb_tilde_05_fbGain = 1;
                expr_21_in1 = 0;
                expr_21_in2 = 69;
                expr_21_out1 = 0;
                comb_tilde_06_x = 0;
                comb_tilde_06_delayTime = 200;
                comb_tilde_06_gain = 80;
                comb_tilde_06_ffGain = 0;
                comb_tilde_06_fbGain = 1;
                expr_22_in1 = 0;
                expr_22_in2 = 80;
                expr_22_out1 = 0;
                comb_tilde_07_x = 0;
                comb_tilde_07_delayTime = 200;
                comb_tilde_07_gain = 75;
                comb_tilde_07_ffGain = 0;
                comb_tilde_07_fbGain = 1;
                expr_23_in1 = 0;
                expr_23_in2 = 75;
                expr_23_out1 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                signals[7] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                comb_tilde_01_feedForward__maxdelay = 0;
                comb_tilde_01_feedForward_sizemode = 0;
                comb_tilde_01_feedForward_wrap = 0;
                comb_tilde_01_feedForward_reader = 0;
                comb_tilde_01_feedForward_writer = 0;
                comb_tilde_01_feedBack__maxdelay = 0;
                comb_tilde_01_feedBack_sizemode = 0;
                comb_tilde_01_feedBack_wrap = 0;
                comb_tilde_01_feedBack_reader = 0;
                comb_tilde_01_feedBack_writer = 0;
                comb_tilde_01_setupDone = false;
                comb_tilde_02_feedForward__maxdelay = 0;
                comb_tilde_02_feedForward_sizemode = 0;
                comb_tilde_02_feedForward_wrap = 0;
                comb_tilde_02_feedForward_reader = 0;
                comb_tilde_02_feedForward_writer = 0;
                comb_tilde_02_feedBack__maxdelay = 0;
                comb_tilde_02_feedBack_sizemode = 0;
                comb_tilde_02_feedBack_wrap = 0;
                comb_tilde_02_feedBack_reader = 0;
                comb_tilde_02_feedBack_writer = 0;
                comb_tilde_02_setupDone = false;
                comb_tilde_03_feedForward__maxdelay = 0;
                comb_tilde_03_feedForward_sizemode = 0;
                comb_tilde_03_feedForward_wrap = 0;
                comb_tilde_03_feedForward_reader = 0;
                comb_tilde_03_feedForward_writer = 0;
                comb_tilde_03_feedBack__maxdelay = 0;
                comb_tilde_03_feedBack_sizemode = 0;
                comb_tilde_03_feedBack_wrap = 0;
                comb_tilde_03_feedBack_reader = 0;
                comb_tilde_03_feedBack_writer = 0;
                comb_tilde_03_setupDone = false;
                comb_tilde_04_feedForward__maxdelay = 0;
                comb_tilde_04_feedForward_sizemode = 0;
                comb_tilde_04_feedForward_wrap = 0;
                comb_tilde_04_feedForward_reader = 0;
                comb_tilde_04_feedForward_writer = 0;
                comb_tilde_04_feedBack__maxdelay = 0;
                comb_tilde_04_feedBack_sizemode = 0;
                comb_tilde_04_feedBack_wrap = 0;
                comb_tilde_04_feedBack_reader = 0;
                comb_tilde_04_feedBack_writer = 0;
                comb_tilde_04_setupDone = false;
                comb_tilde_05_feedForward__maxdelay = 0;
                comb_tilde_05_feedForward_sizemode = 0;
                comb_tilde_05_feedForward_wrap = 0;
                comb_tilde_05_feedForward_reader = 0;
                comb_tilde_05_feedForward_writer = 0;
                comb_tilde_05_feedBack__maxdelay = 0;
                comb_tilde_05_feedBack_sizemode = 0;
                comb_tilde_05_feedBack_wrap = 0;
                comb_tilde_05_feedBack_reader = 0;
                comb_tilde_05_feedBack_writer = 0;
                comb_tilde_05_setupDone = false;
                comb_tilde_06_feedForward__maxdelay = 0;
                comb_tilde_06_feedForward_sizemode = 0;
                comb_tilde_06_feedForward_wrap = 0;
                comb_tilde_06_feedForward_reader = 0;
                comb_tilde_06_feedForward_writer = 0;
                comb_tilde_06_feedBack__maxdelay = 0;
                comb_tilde_06_feedBack_sizemode = 0;
                comb_tilde_06_feedBack_wrap = 0;
                comb_tilde_06_feedBack_reader = 0;
                comb_tilde_06_feedBack_writer = 0;
                comb_tilde_06_setupDone = false;
                comb_tilde_07_feedForward__maxdelay = 0;
                comb_tilde_07_feedForward_sizemode = 0;
                comb_tilde_07_feedForward_wrap = 0;
                comb_tilde_07_feedForward_reader = 0;
                comb_tilde_07_feedForward_writer = 0;
                comb_tilde_07_feedBack__maxdelay = 0;
                comb_tilde_07_feedBack_sizemode = 0;
                comb_tilde_07_feedBack_wrap = 0;
                comb_tilde_07_feedBack_reader = 0;
                comb_tilde_07_feedBack_writer = 0;
                comb_tilde_07_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number comb_tilde_01_x;
                number comb_tilde_01_delayTime;
                number comb_tilde_01_gain;
                number comb_tilde_01_ffGain;
                number comb_tilde_01_fbGain;
                number expr_17_in1;
                number expr_17_in2;
                number expr_17_out1;
                number comb_tilde_02_x;
                number comb_tilde_02_delayTime;
                number comb_tilde_02_gain;
                number comb_tilde_02_ffGain;
                number comb_tilde_02_fbGain;
                number expr_18_in1;
                number expr_18_in2;
                number expr_18_out1;
                number dspexpr_01_in1;
                number dspexpr_01_in2;
                number dspexpr_02_in1;
                number dspexpr_02_in2;
                number comb_tilde_03_x;
                number comb_tilde_03_delayTime;
                number comb_tilde_03_gain;
                number comb_tilde_03_ffGain;
                number comb_tilde_03_fbGain;
                number expr_19_in1;
                number expr_19_in2;
                number expr_19_out1;
                number comb_tilde_04_x;
                number comb_tilde_04_delayTime;
                number comb_tilde_04_gain;
                number comb_tilde_04_ffGain;
                number comb_tilde_04_fbGain;
                number expr_20_in1;
                number expr_20_in2;
                number expr_20_out1;
                number comb_tilde_05_x;
                number comb_tilde_05_delayTime;
                number comb_tilde_05_gain;
                number comb_tilde_05_ffGain;
                number comb_tilde_05_fbGain;
                number expr_21_in1;
                number expr_21_in2;
                number expr_21_out1;
                number comb_tilde_06_x;
                number comb_tilde_06_delayTime;
                number comb_tilde_06_gain;
                number comb_tilde_06_ffGain;
                number comb_tilde_06_fbGain;
                number expr_22_in1;
                number expr_22_in2;
                number expr_22_out1;
                number comb_tilde_07_x;
                number comb_tilde_07_delayTime;
                number comb_tilde_07_gain;
                number comb_tilde_07_ffGain;
                number comb_tilde_07_fbGain;
                number expr_23_in1;
                number expr_23_in2;
                number expr_23_out1;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[8];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef comb_tilde_01_feedForward_buffer;
                Index comb_tilde_01_feedForward__maxdelay;
                Int comb_tilde_01_feedForward_sizemode;
                Index comb_tilde_01_feedForward_wrap;
                Int comb_tilde_01_feedForward_reader;
                Int comb_tilde_01_feedForward_writer;
                Float64BufferRef comb_tilde_01_feedBack_buffer;
                Index comb_tilde_01_feedBack__maxdelay;
                Int comb_tilde_01_feedBack_sizemode;
                Index comb_tilde_01_feedBack_wrap;
                Int comb_tilde_01_feedBack_reader;
                Int comb_tilde_01_feedBack_writer;
                bool comb_tilde_01_setupDone;
                Float64BufferRef comb_tilde_02_feedForward_buffer;
                Index comb_tilde_02_feedForward__maxdelay;
                Int comb_tilde_02_feedForward_sizemode;
                Index comb_tilde_02_feedForward_wrap;
                Int comb_tilde_02_feedForward_reader;
                Int comb_tilde_02_feedForward_writer;
                Float64BufferRef comb_tilde_02_feedBack_buffer;
                Index comb_tilde_02_feedBack__maxdelay;
                Int comb_tilde_02_feedBack_sizemode;
                Index comb_tilde_02_feedBack_wrap;
                Int comb_tilde_02_feedBack_reader;
                Int comb_tilde_02_feedBack_writer;
                bool comb_tilde_02_setupDone;
                Float64BufferRef comb_tilde_03_feedForward_buffer;
                Index comb_tilde_03_feedForward__maxdelay;
                Int comb_tilde_03_feedForward_sizemode;
                Index comb_tilde_03_feedForward_wrap;
                Int comb_tilde_03_feedForward_reader;
                Int comb_tilde_03_feedForward_writer;
                Float64BufferRef comb_tilde_03_feedBack_buffer;
                Index comb_tilde_03_feedBack__maxdelay;
                Int comb_tilde_03_feedBack_sizemode;
                Index comb_tilde_03_feedBack_wrap;
                Int comb_tilde_03_feedBack_reader;
                Int comb_tilde_03_feedBack_writer;
                bool comb_tilde_03_setupDone;
                Float64BufferRef comb_tilde_04_feedForward_buffer;
                Index comb_tilde_04_feedForward__maxdelay;
                Int comb_tilde_04_feedForward_sizemode;
                Index comb_tilde_04_feedForward_wrap;
                Int comb_tilde_04_feedForward_reader;
                Int comb_tilde_04_feedForward_writer;
                Float64BufferRef comb_tilde_04_feedBack_buffer;
                Index comb_tilde_04_feedBack__maxdelay;
                Int comb_tilde_04_feedBack_sizemode;
                Index comb_tilde_04_feedBack_wrap;
                Int comb_tilde_04_feedBack_reader;
                Int comb_tilde_04_feedBack_writer;
                bool comb_tilde_04_setupDone;
                Float64BufferRef comb_tilde_05_feedForward_buffer;
                Index comb_tilde_05_feedForward__maxdelay;
                Int comb_tilde_05_feedForward_sizemode;
                Index comb_tilde_05_feedForward_wrap;
                Int comb_tilde_05_feedForward_reader;
                Int comb_tilde_05_feedForward_writer;
                Float64BufferRef comb_tilde_05_feedBack_buffer;
                Index comb_tilde_05_feedBack__maxdelay;
                Int comb_tilde_05_feedBack_sizemode;
                Index comb_tilde_05_feedBack_wrap;
                Int comb_tilde_05_feedBack_reader;
                Int comb_tilde_05_feedBack_writer;
                bool comb_tilde_05_setupDone;
                Float64BufferRef comb_tilde_06_feedForward_buffer;
                Index comb_tilde_06_feedForward__maxdelay;
                Int comb_tilde_06_feedForward_sizemode;
                Index comb_tilde_06_feedForward_wrap;
                Int comb_tilde_06_feedForward_reader;
                Int comb_tilde_06_feedForward_writer;
                Float64BufferRef comb_tilde_06_feedBack_buffer;
                Index comb_tilde_06_feedBack__maxdelay;
                Int comb_tilde_06_feedBack_sizemode;
                Index comb_tilde_06_feedBack_wrap;
                Int comb_tilde_06_feedBack_reader;
                Int comb_tilde_06_feedBack_writer;
                bool comb_tilde_06_setupDone;
                Float64BufferRef comb_tilde_07_feedForward_buffer;
                Index comb_tilde_07_feedForward__maxdelay;
                Int comb_tilde_07_feedForward_sizemode;
                Index comb_tilde_07_feedForward_wrap;
                Int comb_tilde_07_feedForward_reader;
                Int comb_tilde_07_feedForward_writer;
                Float64BufferRef comb_tilde_07_feedBack_buffer;
                Index comb_tilde_07_feedBack__maxdelay;
                Int comb_tilde_07_feedBack_sizemode;
                Index comb_tilde_07_feedBack_wrap;
                Int comb_tilde_07_feedBack_reader;
                Int comb_tilde_07_feedBack_writer;
                bool comb_tilde_07_setupDone;
                number stackprotect_count;
                DataRef comb_tilde_01_feedForward_bufferobj;
                DataRef comb_tilde_01_feedBack_bufferobj;
                DataRef comb_tilde_02_feedForward_bufferobj;
                DataRef comb_tilde_02_feedBack_bufferobj;
                DataRef comb_tilde_03_feedForward_bufferobj;
                DataRef comb_tilde_03_feedBack_bufferobj;
                DataRef comb_tilde_04_feedForward_bufferobj;
                DataRef comb_tilde_04_feedBack_bufferobj;
                DataRef comb_tilde_05_feedForward_bufferobj;
                DataRef comb_tilde_05_feedBack_bufferobj;
                DataRef comb_tilde_06_feedForward_bufferobj;
                DataRef comb_tilde_06_feedBack_bufferobj;
                DataRef comb_tilde_07_feedForward_bufferobj;
                DataRef comb_tilde_07_feedBack_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_26 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_30;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_26()
            {
            }
            
            ~RNBOSubpatcher_26()
            {
            }
            
            virtual RNBOSubpatcher_30* getPatcher() const {
                return static_cast<RNBOSubpatcher_30 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() {
                return this->sr;
            }
            
            Index vectorsize() {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                const SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                const SampleValue * in6 = (numInputs >= 6 && inputs[5] ? inputs[5] : this->zeroBuffer);
                const SampleValue * in7 = (numInputs >= 7 && inputs[6] ? inputs[6] : this->zeroBuffer);
            
                this->comb_tilde_08_perform(
                    in1,
                    this->comb_tilde_08_delayTime,
                    this->comb_tilde_08_gain,
                    this->comb_tilde_08_ffGain,
                    this->comb_tilde_08_fbGain,
                    this->signals[0],
                    n
                );
            
                this->comb_tilde_09_perform(
                    in2,
                    this->comb_tilde_09_delayTime,
                    this->comb_tilde_09_gain,
                    this->comb_tilde_09_ffGain,
                    this->comb_tilde_09_fbGain,
                    this->signals[1],
                    n
                );
            
                this->comb_tilde_10_perform(
                    in3,
                    this->comb_tilde_10_delayTime,
                    this->comb_tilde_10_gain,
                    this->comb_tilde_10_ffGain,
                    this->comb_tilde_10_fbGain,
                    this->signals[2],
                    n
                );
            
                this->comb_tilde_11_perform(
                    in4,
                    this->comb_tilde_11_delayTime,
                    this->comb_tilde_11_gain,
                    this->comb_tilde_11_ffGain,
                    this->comb_tilde_11_fbGain,
                    this->signals[3],
                    n
                );
            
                this->comb_tilde_12_perform(
                    in5,
                    this->comb_tilde_12_delayTime,
                    this->comb_tilde_12_gain,
                    this->comb_tilde_12_ffGain,
                    this->comb_tilde_12_fbGain,
                    this->signals[4],
                    n
                );
            
                this->comb_tilde_13_perform(
                    in6,
                    this->comb_tilde_13_delayTime,
                    this->comb_tilde_13_gain,
                    this->comb_tilde_13_ffGain,
                    this->comb_tilde_13_fbGain,
                    this->signals[5],
                    n
                );
            
                this->comb_tilde_14_perform(
                    in7,
                    this->comb_tilde_14_delayTime,
                    this->comb_tilde_14_gain,
                    this->comb_tilde_14_ffGain,
                    this->comb_tilde_14_fbGain,
                    this->signals[6],
                    n
                );
            
                this->signaladder_11_perform(
                    this->signals[6],
                    this->signals[5],
                    this->signals[4],
                    this->signals[2],
                    this->signals[2],
                    n
                );
            
                this->dspexpr_04_perform(this->signals[2], this->dspexpr_04_in2, this->signals[7], n);
            
                this->signaladder_12_perform(
                    this->signals[3],
                    this->signals[1],
                    this->signals[0],
                    this->signals[7],
                    this->signals[7],
                    n
                );
            
                this->dspexpr_03_perform(this->signals[7], this->dspexpr_03_in2, out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 8; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->comb_tilde_08_dspsetup(forceDSPSetup);
                this->comb_tilde_09_dspsetup(forceDSPSetup);
                this->comb_tilde_10_dspsetup(forceDSPSetup);
                this->comb_tilde_11_dspsetup(forceDSPSetup);
                this->comb_tilde_12_dspsetup(forceDSPSetup);
                this->comb_tilde_13_dspsetup(forceDSPSetup);
                this->comb_tilde_14_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 23:
                    {
                    return addressOf(this->comb_tilde_08_feedForward_bufferobj);
                    break;
                    }
                case 24:
                    {
                    return addressOf(this->comb_tilde_08_feedBack_bufferobj);
                    break;
                    }
                case 25:
                    {
                    return addressOf(this->comb_tilde_09_feedForward_bufferobj);
                    break;
                    }
                case 26:
                    {
                    return addressOf(this->comb_tilde_09_feedBack_bufferobj);
                    break;
                    }
                case 27:
                    {
                    return addressOf(this->comb_tilde_10_feedForward_bufferobj);
                    break;
                    }
                case 28:
                    {
                    return addressOf(this->comb_tilde_10_feedBack_bufferobj);
                    break;
                    }
                case 29:
                    {
                    return addressOf(this->comb_tilde_11_feedForward_bufferobj);
                    break;
                    }
                case 30:
                    {
                    return addressOf(this->comb_tilde_11_feedBack_bufferobj);
                    break;
                    }
                case 31:
                    {
                    return addressOf(this->comb_tilde_12_feedForward_bufferobj);
                    break;
                    }
                case 32:
                    {
                    return addressOf(this->comb_tilde_12_feedBack_bufferobj);
                    break;
                    }
                case 33:
                    {
                    return addressOf(this->comb_tilde_13_feedForward_bufferobj);
                    break;
                    }
                case 34:
                    {
                    return addressOf(this->comb_tilde_13_feedBack_bufferobj);
                    break;
                    }
                case 35:
                    {
                    return addressOf(this->comb_tilde_14_feedForward_bufferobj);
                    break;
                    }
                case 36:
                    {
                    return addressOf(this->comb_tilde_14_feedBack_bufferobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 14;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 23) {
                    this->comb_tilde_08_feedForward_buffer = new Float64Buffer(this->comb_tilde_08_feedForward_bufferobj);
                }
            
                if (index == 24) {
                    this->comb_tilde_08_feedBack_buffer = new Float64Buffer(this->comb_tilde_08_feedBack_bufferobj);
                }
            
                if (index == 25) {
                    this->comb_tilde_09_feedForward_buffer = new Float64Buffer(this->comb_tilde_09_feedForward_bufferobj);
                }
            
                if (index == 26) {
                    this->comb_tilde_09_feedBack_buffer = new Float64Buffer(this->comb_tilde_09_feedBack_bufferobj);
                }
            
                if (index == 27) {
                    this->comb_tilde_10_feedForward_buffer = new Float64Buffer(this->comb_tilde_10_feedForward_bufferobj);
                }
            
                if (index == 28) {
                    this->comb_tilde_10_feedBack_buffer = new Float64Buffer(this->comb_tilde_10_feedBack_bufferobj);
                }
            
                if (index == 29) {
                    this->comb_tilde_11_feedForward_buffer = new Float64Buffer(this->comb_tilde_11_feedForward_bufferobj);
                }
            
                if (index == 30) {
                    this->comb_tilde_11_feedBack_buffer = new Float64Buffer(this->comb_tilde_11_feedBack_bufferobj);
                }
            
                if (index == 31) {
                    this->comb_tilde_12_feedForward_buffer = new Float64Buffer(this->comb_tilde_12_feedForward_bufferobj);
                }
            
                if (index == 32) {
                    this->comb_tilde_12_feedBack_buffer = new Float64Buffer(this->comb_tilde_12_feedBack_bufferobj);
                }
            
                if (index == 33) {
                    this->comb_tilde_13_feedForward_buffer = new Float64Buffer(this->comb_tilde_13_feedForward_bufferobj);
                }
            
                if (index == 34) {
                    this->comb_tilde_13_feedBack_buffer = new Float64Buffer(this->comb_tilde_13_feedBack_bufferobj);
                }
            
                if (index == 35) {
                    this->comb_tilde_14_feedForward_buffer = new Float64Buffer(this->comb_tilde_14_feedForward_bufferobj);
                }
            
                if (index == 36) {
                    this->comb_tilde_14_feedBack_buffer = new Float64Buffer(this->comb_tilde_14_feedBack_bufferobj);
                }
            }
            
            void initialize() {
                this->comb_tilde_08_feedForward_bufferobj = initDataRef("comb_tilde_08_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_08_feedBack_bufferobj = initDataRef("comb_tilde_08_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_09_feedForward_bufferobj = initDataRef("comb_tilde_09_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_09_feedBack_bufferobj = initDataRef("comb_tilde_09_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_10_feedForward_bufferobj = initDataRef("comb_tilde_10_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_10_feedBack_bufferobj = initDataRef("comb_tilde_10_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_11_feedForward_bufferobj = initDataRef("comb_tilde_11_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_11_feedBack_bufferobj = initDataRef("comb_tilde_11_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_12_feedForward_bufferobj = initDataRef("comb_tilde_12_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_12_feedBack_bufferobj = initDataRef("comb_tilde_12_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_13_feedForward_bufferobj = initDataRef("comb_tilde_13_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_13_feedBack_bufferobj = initDataRef("comb_tilde_13_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_14_feedForward_bufferobj = initDataRef("comb_tilde_14_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_14_feedBack_bufferobj = initDataRef("comb_tilde_14_feedBack_bufferobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->comb_tilde_08_feedForward_bufferobj->setIndex(23);
                this->comb_tilde_08_feedForward_buffer = new Float64Buffer(this->comb_tilde_08_feedForward_bufferobj);
                this->comb_tilde_08_feedBack_bufferobj->setIndex(24);
                this->comb_tilde_08_feedBack_buffer = new Float64Buffer(this->comb_tilde_08_feedBack_bufferobj);
                this->comb_tilde_09_feedForward_bufferobj->setIndex(25);
                this->comb_tilde_09_feedForward_buffer = new Float64Buffer(this->comb_tilde_09_feedForward_bufferobj);
                this->comb_tilde_09_feedBack_bufferobj->setIndex(26);
                this->comb_tilde_09_feedBack_buffer = new Float64Buffer(this->comb_tilde_09_feedBack_bufferobj);
                this->comb_tilde_10_feedForward_bufferobj->setIndex(27);
                this->comb_tilde_10_feedForward_buffer = new Float64Buffer(this->comb_tilde_10_feedForward_bufferobj);
                this->comb_tilde_10_feedBack_bufferobj->setIndex(28);
                this->comb_tilde_10_feedBack_buffer = new Float64Buffer(this->comb_tilde_10_feedBack_bufferobj);
                this->comb_tilde_11_feedForward_bufferobj->setIndex(29);
                this->comb_tilde_11_feedForward_buffer = new Float64Buffer(this->comb_tilde_11_feedForward_bufferobj);
                this->comb_tilde_11_feedBack_bufferobj->setIndex(30);
                this->comb_tilde_11_feedBack_buffer = new Float64Buffer(this->comb_tilde_11_feedBack_bufferobj);
                this->comb_tilde_12_feedForward_bufferobj->setIndex(31);
                this->comb_tilde_12_feedForward_buffer = new Float64Buffer(this->comb_tilde_12_feedForward_bufferobj);
                this->comb_tilde_12_feedBack_bufferobj->setIndex(32);
                this->comb_tilde_12_feedBack_buffer = new Float64Buffer(this->comb_tilde_12_feedBack_bufferobj);
                this->comb_tilde_13_feedForward_bufferobj->setIndex(33);
                this->comb_tilde_13_feedForward_buffer = new Float64Buffer(this->comb_tilde_13_feedForward_bufferobj);
                this->comb_tilde_13_feedBack_bufferobj->setIndex(34);
                this->comb_tilde_13_feedBack_buffer = new Float64Buffer(this->comb_tilde_13_feedBack_bufferobj);
                this->comb_tilde_14_feedForward_bufferobj->setIndex(35);
                this->comb_tilde_14_feedForward_buffer = new Float64Buffer(this->comb_tilde_14_feedForward_bufferobj);
                this->comb_tilde_14_feedBack_bufferobj->setIndex(36);
                this->comb_tilde_14_feedBack_buffer = new Float64Buffer(this->comb_tilde_14_feedBack_bufferobj);
            }
            
            protected:
            
            void eventinlet_08_out1_bang_bang() {
                this->expr_30_in1_bang();
                this->expr_29_in1_bang();
                this->expr_28_in1_bang();
                this->expr_27_in1_bang();
                this->expr_26_in1_bang();
                this->expr_25_in1_bang();
                this->expr_24_in1_bang();
            }
            
            void eventinlet_08_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_30_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_30_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_29_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_29_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_28_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_28_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_27_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_27_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_26_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_26_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_25_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_25_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_24_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_24_in1_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 7;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->comb_tilde_08_feedForward_init();
                this->comb_tilde_08_feedBack_init();
                this->comb_tilde_08_init();
                this->comb_tilde_09_feedForward_init();
                this->comb_tilde_09_feedBack_init();
                this->comb_tilde_09_init();
                this->comb_tilde_10_feedForward_init();
                this->comb_tilde_10_feedBack_init();
                this->comb_tilde_10_init();
                this->comb_tilde_11_feedForward_init();
                this->comb_tilde_11_feedBack_init();
                this->comb_tilde_11_init();
                this->comb_tilde_12_feedForward_init();
                this->comb_tilde_12_feedBack_init();
                this->comb_tilde_12_init();
                this->comb_tilde_13_feedForward_init();
                this->comb_tilde_13_feedBack_init();
                this->comb_tilde_13_init();
                this->comb_tilde_14_feedForward_init();
                this->comb_tilde_14_feedBack_init();
                this->comb_tilde_14_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->comb_tilde_08_feedForward_buffer = this->comb_tilde_08_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_08_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_08_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_08_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(23);
                }
            
                this->comb_tilde_08_feedBack_buffer = this->comb_tilde_08_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_08_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_08_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_08_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(24);
                }
            
                this->comb_tilde_09_feedForward_buffer = this->comb_tilde_09_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_09_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_09_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_09_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(25);
                }
            
                this->comb_tilde_09_feedBack_buffer = this->comb_tilde_09_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_09_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_09_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_09_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(26);
                }
            
                this->comb_tilde_10_feedForward_buffer = this->comb_tilde_10_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_10_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_10_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_10_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(27);
                }
            
                this->comb_tilde_10_feedBack_buffer = this->comb_tilde_10_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_10_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_10_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_10_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(28);
                }
            
                this->comb_tilde_11_feedForward_buffer = this->comb_tilde_11_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_11_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_11_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_11_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(29);
                }
            
                this->comb_tilde_11_feedBack_buffer = this->comb_tilde_11_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_11_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_11_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_11_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(30);
                }
            
                this->comb_tilde_12_feedForward_buffer = this->comb_tilde_12_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_12_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_12_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_12_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(31);
                }
            
                this->comb_tilde_12_feedBack_buffer = this->comb_tilde_12_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_12_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_12_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_12_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(32);
                }
            
                this->comb_tilde_13_feedForward_buffer = this->comb_tilde_13_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_13_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_13_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_13_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(33);
                }
            
                this->comb_tilde_13_feedBack_buffer = this->comb_tilde_13_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_13_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_13_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_13_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(34);
                }
            
                this->comb_tilde_14_feedForward_buffer = this->comb_tilde_14_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_14_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_14_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_14_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(35);
                }
            
                this->comb_tilde_14_feedBack_buffer = this->comb_tilde_14_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_14_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_14_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_14_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(36);
                }
            }
            
            void comb_tilde_14_delayTime_set(number v) {
                this->comb_tilde_14_delayTime = v;
            }
            
            void expr_30_out1_set(number v) {
                this->expr_30_out1 = v;
                this->comb_tilde_14_delayTime_set(this->expr_30_out1);
            }
            
            void expr_30_in1_set(number in1) {
                this->expr_30_in1 = in1;
                this->expr_30_out1_set(this->expr_30_in1 * this->expr_30_in2);//#map:reverb/combineR/*_obj-16:1
            }
            
            void comb_tilde_13_delayTime_set(number v) {
                this->comb_tilde_13_delayTime = v;
            }
            
            void expr_29_out1_set(number v) {
                this->expr_29_out1 = v;
                this->comb_tilde_13_delayTime_set(this->expr_29_out1);
            }
            
            void expr_29_in1_set(number in1) {
                this->expr_29_in1 = in1;
                this->expr_29_out1_set(this->expr_29_in1 * this->expr_29_in2);//#map:reverb/combineR/*_obj-17:1
            }
            
            void comb_tilde_12_delayTime_set(number v) {
                this->comb_tilde_12_delayTime = v;
            }
            
            void expr_28_out1_set(number v) {
                this->expr_28_out1 = v;
                this->comb_tilde_12_delayTime_set(this->expr_28_out1);
            }
            
            void expr_28_in1_set(number in1) {
                this->expr_28_in1 = in1;
                this->expr_28_out1_set(this->expr_28_in1 * this->expr_28_in2);//#map:reverb/combineR/*_obj-18:1
            }
            
            void comb_tilde_11_delayTime_set(number v) {
                this->comb_tilde_11_delayTime = v;
            }
            
            void expr_27_out1_set(number v) {
                this->expr_27_out1 = v;
                this->comb_tilde_11_delayTime_set(this->expr_27_out1);
            }
            
            void expr_27_in1_set(number in1) {
                this->expr_27_in1 = in1;
                this->expr_27_out1_set(this->expr_27_in1 * this->expr_27_in2);//#map:reverb/combineR/*_obj-19:1
            }
            
            void comb_tilde_10_delayTime_set(number v) {
                this->comb_tilde_10_delayTime = v;
            }
            
            void expr_26_out1_set(number v) {
                this->expr_26_out1 = v;
                this->comb_tilde_10_delayTime_set(this->expr_26_out1);
            }
            
            void expr_26_in1_set(number in1) {
                this->expr_26_in1 = in1;
                this->expr_26_out1_set(this->expr_26_in1 * this->expr_26_in2);//#map:reverb/combineR/*_obj-20:1
            }
            
            void comb_tilde_09_delayTime_set(number v) {
                this->comb_tilde_09_delayTime = v;
            }
            
            void expr_25_out1_set(number v) {
                this->expr_25_out1 = v;
                this->comb_tilde_09_delayTime_set(this->expr_25_out1);
            }
            
            void expr_25_in1_set(number in1) {
                this->expr_25_in1 = in1;
                this->expr_25_out1_set(this->expr_25_in1 * this->expr_25_in2);//#map:reverb/combineR/*_obj-21:1
            }
            
            void comb_tilde_08_delayTime_set(number v) {
                this->comb_tilde_08_delayTime = v;
            }
            
            void expr_24_out1_set(number v) {
                this->expr_24_out1 = v;
                this->comb_tilde_08_delayTime_set(this->expr_24_out1);
            }
            
            void expr_24_in1_set(number in1) {
                this->expr_24_in1 = in1;
                this->expr_24_out1_set(this->expr_24_in1 * this->expr_24_in2);//#map:reverb/combineR/*_obj-22:1
            }
            
            void eventinlet_08_out1_number_set(number v) {
                this->expr_30_in1_set(v);
                this->expr_29_in1_set(v);
                this->expr_28_in1_set(v);
                this->expr_27_in1_set(v);
                this->expr_26_in1_set(v);
                this->expr_25_in1_set(v);
                this->expr_24_in1_set(v);
            }
            
            void expr_30_in1_bang() {
                this->expr_30_out1_set(this->expr_30_in1 * this->expr_30_in2);//#map:reverb/combineR/*_obj-16:1
            }
            
            void expr_29_in1_bang() {
                this->expr_29_out1_set(this->expr_29_in1 * this->expr_29_in2);//#map:reverb/combineR/*_obj-17:1
            }
            
            void expr_28_in1_bang() {
                this->expr_28_out1_set(this->expr_28_in1 * this->expr_28_in2);//#map:reverb/combineR/*_obj-18:1
            }
            
            void expr_27_in1_bang() {
                this->expr_27_out1_set(this->expr_27_in1 * this->expr_27_in2);//#map:reverb/combineR/*_obj-19:1
            }
            
            void expr_26_in1_bang() {
                this->expr_26_out1_set(this->expr_26_in1 * this->expr_26_in2);//#map:reverb/combineR/*_obj-20:1
            }
            
            void expr_25_in1_bang() {
                this->expr_25_out1_set(this->expr_25_in1 * this->expr_25_in2);//#map:reverb/combineR/*_obj-21:1
            }
            
            void expr_24_in1_bang() {
                this->expr_24_out1_set(this->expr_24_in1 * this->expr_24_in2);//#map:reverb/combineR/*_obj-22:1
            }
            
            void expr_30_in2_set(number v) {
                this->expr_30_in2 = v;
            }
            
            void expr_29_in2_set(number v) {
                this->expr_29_in2 = v;
            }
            
            void expr_28_in2_set(number v) {
                this->expr_28_in2 = v;
            }
            
            void expr_27_in2_set(number v) {
                this->expr_27_in2 = v;
            }
            
            void expr_26_in2_set(number v) {
                this->expr_26_in2 = v;
            }
            
            void expr_25_in2_set(number v) {
                this->expr_25_in2 = v;
            }
            
            void expr_24_in2_set(number v) {
                this->expr_24_in2 = v;
            }
            
            void comb_tilde_08_perform(
                const Sample * x,
                number delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = fbGain;
                    number __ffGain = 0;
                    number __gain = 110;
                    number __delayTime = delayTime;
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_08_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_08_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_08_feedForward_write(x[(Index)i]);
                    this->comb_tilde_08_feedBack_write(ov);
                    this->comb_tilde_08_feedForward_step();
                    this->comb_tilde_08_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void comb_tilde_09_perform(
                const Sample * x,
                number delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = fbGain;
                    number __ffGain = 0;
                    number __gain = 135;
                    number __delayTime = delayTime;
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_09_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_09_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_09_feedForward_write(x[(Index)i]);
                    this->comb_tilde_09_feedBack_write(ov);
                    this->comb_tilde_09_feedForward_step();
                    this->comb_tilde_09_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void comb_tilde_10_perform(
                const Sample * x,
                number delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = fbGain;
                    number __ffGain = 0;
                    number __gain = 55;
                    number __delayTime = delayTime;
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_10_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_10_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_10_feedForward_write(x[(Index)i]);
                    this->comb_tilde_10_feedBack_write(ov);
                    this->comb_tilde_10_feedForward_step();
                    this->comb_tilde_10_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void comb_tilde_11_perform(
                const Sample * x,
                number delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = fbGain;
                    number __ffGain = 0;
                    number __gain = 3;
                    number __delayTime = delayTime;
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_11_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_11_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_11_feedForward_write(x[(Index)i]);
                    this->comb_tilde_11_feedBack_write(ov);
                    this->comb_tilde_11_feedForward_step();
                    this->comb_tilde_11_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void comb_tilde_12_perform(
                const Sample * x,
                number delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = fbGain;
                    number __ffGain = 0;
                    number __gain = 35;
                    number __delayTime = delayTime;
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_12_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_12_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_12_feedForward_write(x[(Index)i]);
                    this->comb_tilde_12_feedBack_write(ov);
                    this->comb_tilde_12_feedForward_step();
                    this->comb_tilde_12_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void comb_tilde_13_perform(
                const Sample * x,
                number delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = fbGain;
                    number __ffGain = 0;
                    number __gain = 27;
                    number __delayTime = delayTime;
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_13_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_13_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_13_feedForward_write(x[(Index)i]);
                    this->comb_tilde_13_feedBack_write(ov);
                    this->comb_tilde_13_feedForward_step();
                    this->comb_tilde_13_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void comb_tilde_14_perform(
                const Sample * x,
                number delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = fbGain;
                    number __ffGain = 0;
                    number __gain = 52;
                    number __delayTime = delayTime;
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_14_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_14_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_14_feedForward_write(x[(Index)i]);
                    this->comb_tilde_14_feedBack_write(ov);
                    this->comb_tilde_14_feedForward_step();
                    this->comb_tilde_14_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void signaladder_11_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                }
            }
            
            void dspexpr_04_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * -1;//#map:_###_obj_###_:1
                }
            }
            
            void signaladder_12_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                }
            }
            
            void dspexpr_03_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 0.15;//#map:_###_obj_###_:1
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void comb_tilde_08_feedForward_step() {
                this->comb_tilde_08_feedForward_reader++;
            
                if (this->comb_tilde_08_feedForward_reader >= (int)(this->comb_tilde_08_feedForward_buffer->getSize()))
                    this->comb_tilde_08_feedForward_reader = 0;
            }
            
            number comb_tilde_08_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? 1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? 1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_08_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                );
            }
            
            void comb_tilde_08_feedForward_write(number v) {
                this->comb_tilde_08_feedForward_writer = this->comb_tilde_08_feedForward_reader;
                this->comb_tilde_08_feedForward_buffer[(Index)this->comb_tilde_08_feedForward_writer] = v;
            }
            
            number comb_tilde_08_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_08_feedForward__maxdelay : size);
                number val = this->comb_tilde_08_feedForward_read(effectiveSize, 0);
                this->comb_tilde_08_feedForward_write(v);
                this->comb_tilde_08_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_08_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_08_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_08_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_08_feedForward_init() {
                auto result = this->comb_tilde_08_feedForward_calcSizeInSamples();
                this->comb_tilde_08_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_08_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_08_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_08_feedForward_clear() {
                this->comb_tilde_08_feedForward_buffer->setZero();
            }
            
            void comb_tilde_08_feedForward_reset() {
                auto result = this->comb_tilde_08_feedForward_calcSizeInSamples();
                this->comb_tilde_08_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_08_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_08_feedForward_buffer);
                this->comb_tilde_08_feedForward_wrap = this->comb_tilde_08_feedForward_buffer->getSize() - 1;
                this->comb_tilde_08_feedForward_clear();
            
                if (this->comb_tilde_08_feedForward_reader >= this->comb_tilde_08_feedForward__maxdelay || this->comb_tilde_08_feedForward_writer >= this->comb_tilde_08_feedForward__maxdelay) {
                    this->comb_tilde_08_feedForward_reader = 0;
                    this->comb_tilde_08_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_08_feedForward_dspsetup() {
                this->comb_tilde_08_feedForward_reset();
            }
            
            number comb_tilde_08_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_08_feedForward_size() {
                return this->comb_tilde_08_feedForward__maxdelay;
            }
            
            void comb_tilde_08_feedBack_step() {
                this->comb_tilde_08_feedBack_reader++;
            
                if (this->comb_tilde_08_feedBack_reader >= (int)(this->comb_tilde_08_feedBack_buffer->getSize()))
                    this->comb_tilde_08_feedBack_reader = 0;
            }
            
            number comb_tilde_08_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? 1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? 1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_08_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                );
            }
            
            void comb_tilde_08_feedBack_write(number v) {
                this->comb_tilde_08_feedBack_writer = this->comb_tilde_08_feedBack_reader;
                this->comb_tilde_08_feedBack_buffer[(Index)this->comb_tilde_08_feedBack_writer] = v;
            }
            
            number comb_tilde_08_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_08_feedBack__maxdelay : size);
                number val = this->comb_tilde_08_feedBack_read(effectiveSize, 0);
                this->comb_tilde_08_feedBack_write(v);
                this->comb_tilde_08_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_08_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_08_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_08_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_08_feedBack_init() {
                auto result = this->comb_tilde_08_feedBack_calcSizeInSamples();
                this->comb_tilde_08_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_08_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_08_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_08_feedBack_clear() {
                this->comb_tilde_08_feedBack_buffer->setZero();
            }
            
            void comb_tilde_08_feedBack_reset() {
                auto result = this->comb_tilde_08_feedBack_calcSizeInSamples();
                this->comb_tilde_08_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_08_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_08_feedBack_buffer);
                this->comb_tilde_08_feedBack_wrap = this->comb_tilde_08_feedBack_buffer->getSize() - 1;
                this->comb_tilde_08_feedBack_clear();
            
                if (this->comb_tilde_08_feedBack_reader >= this->comb_tilde_08_feedBack__maxdelay || this->comb_tilde_08_feedBack_writer >= this->comb_tilde_08_feedBack__maxdelay) {
                    this->comb_tilde_08_feedBack_reader = 0;
                    this->comb_tilde_08_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_08_feedBack_dspsetup() {
                this->comb_tilde_08_feedBack_reset();
            }
            
            number comb_tilde_08_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_08_feedBack_size() {
                return this->comb_tilde_08_feedBack__maxdelay;
            }
            
            void comb_tilde_08_init() {
                this->comb_tilde_08_feedForward_init();
                this->comb_tilde_08_feedBack_init();
            }
            
            void comb_tilde_08_clear() {
                this->comb_tilde_08_feedForward_clear();
                this->comb_tilde_08_feedBack_clear();
            }
            
            void comb_tilde_08_reset() {
                this->comb_tilde_08_init();
                this->comb_tilde_08_clear();
            }
            
            void comb_tilde_08_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_08_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_08_reset();
                this->comb_tilde_08_setupDone = true;
                this->comb_tilde_08_feedForward_dspsetup();
                this->comb_tilde_08_feedBack_dspsetup();
            }
            
            void comb_tilde_09_feedForward_step() {
                this->comb_tilde_09_feedForward_reader++;
            
                if (this->comb_tilde_09_feedForward_reader >= (int)(this->comb_tilde_09_feedForward_buffer->getSize()))
                    this->comb_tilde_09_feedForward_reader = 0;
            }
            
            number comb_tilde_09_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? 1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? 1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_09_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                );
            }
            
            void comb_tilde_09_feedForward_write(number v) {
                this->comb_tilde_09_feedForward_writer = this->comb_tilde_09_feedForward_reader;
                this->comb_tilde_09_feedForward_buffer[(Index)this->comb_tilde_09_feedForward_writer] = v;
            }
            
            number comb_tilde_09_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_09_feedForward__maxdelay : size);
                number val = this->comb_tilde_09_feedForward_read(effectiveSize, 0);
                this->comb_tilde_09_feedForward_write(v);
                this->comb_tilde_09_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_09_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_09_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_09_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_09_feedForward_init() {
                auto result = this->comb_tilde_09_feedForward_calcSizeInSamples();
                this->comb_tilde_09_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_09_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_09_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_09_feedForward_clear() {
                this->comb_tilde_09_feedForward_buffer->setZero();
            }
            
            void comb_tilde_09_feedForward_reset() {
                auto result = this->comb_tilde_09_feedForward_calcSizeInSamples();
                this->comb_tilde_09_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_09_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_09_feedForward_buffer);
                this->comb_tilde_09_feedForward_wrap = this->comb_tilde_09_feedForward_buffer->getSize() - 1;
                this->comb_tilde_09_feedForward_clear();
            
                if (this->comb_tilde_09_feedForward_reader >= this->comb_tilde_09_feedForward__maxdelay || this->comb_tilde_09_feedForward_writer >= this->comb_tilde_09_feedForward__maxdelay) {
                    this->comb_tilde_09_feedForward_reader = 0;
                    this->comb_tilde_09_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_09_feedForward_dspsetup() {
                this->comb_tilde_09_feedForward_reset();
            }
            
            number comb_tilde_09_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_09_feedForward_size() {
                return this->comb_tilde_09_feedForward__maxdelay;
            }
            
            void comb_tilde_09_feedBack_step() {
                this->comb_tilde_09_feedBack_reader++;
            
                if (this->comb_tilde_09_feedBack_reader >= (int)(this->comb_tilde_09_feedBack_buffer->getSize()))
                    this->comb_tilde_09_feedBack_reader = 0;
            }
            
            number comb_tilde_09_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? 1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? 1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_09_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                );
            }
            
            void comb_tilde_09_feedBack_write(number v) {
                this->comb_tilde_09_feedBack_writer = this->comb_tilde_09_feedBack_reader;
                this->comb_tilde_09_feedBack_buffer[(Index)this->comb_tilde_09_feedBack_writer] = v;
            }
            
            number comb_tilde_09_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_09_feedBack__maxdelay : size);
                number val = this->comb_tilde_09_feedBack_read(effectiveSize, 0);
                this->comb_tilde_09_feedBack_write(v);
                this->comb_tilde_09_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_09_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_09_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_09_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_09_feedBack_init() {
                auto result = this->comb_tilde_09_feedBack_calcSizeInSamples();
                this->comb_tilde_09_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_09_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_09_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_09_feedBack_clear() {
                this->comb_tilde_09_feedBack_buffer->setZero();
            }
            
            void comb_tilde_09_feedBack_reset() {
                auto result = this->comb_tilde_09_feedBack_calcSizeInSamples();
                this->comb_tilde_09_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_09_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_09_feedBack_buffer);
                this->comb_tilde_09_feedBack_wrap = this->comb_tilde_09_feedBack_buffer->getSize() - 1;
                this->comb_tilde_09_feedBack_clear();
            
                if (this->comb_tilde_09_feedBack_reader >= this->comb_tilde_09_feedBack__maxdelay || this->comb_tilde_09_feedBack_writer >= this->comb_tilde_09_feedBack__maxdelay) {
                    this->comb_tilde_09_feedBack_reader = 0;
                    this->comb_tilde_09_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_09_feedBack_dspsetup() {
                this->comb_tilde_09_feedBack_reset();
            }
            
            number comb_tilde_09_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_09_feedBack_size() {
                return this->comb_tilde_09_feedBack__maxdelay;
            }
            
            void comb_tilde_09_init() {
                this->comb_tilde_09_feedForward_init();
                this->comb_tilde_09_feedBack_init();
            }
            
            void comb_tilde_09_clear() {
                this->comb_tilde_09_feedForward_clear();
                this->comb_tilde_09_feedBack_clear();
            }
            
            void comb_tilde_09_reset() {
                this->comb_tilde_09_init();
                this->comb_tilde_09_clear();
            }
            
            void comb_tilde_09_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_09_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_09_reset();
                this->comb_tilde_09_setupDone = true;
                this->comb_tilde_09_feedForward_dspsetup();
                this->comb_tilde_09_feedBack_dspsetup();
            }
            
            void comb_tilde_10_feedForward_step() {
                this->comb_tilde_10_feedForward_reader++;
            
                if (this->comb_tilde_10_feedForward_reader >= (int)(this->comb_tilde_10_feedForward_buffer->getSize()))
                    this->comb_tilde_10_feedForward_reader = 0;
            }
            
            number comb_tilde_10_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? 1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? 1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_10_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                );
            }
            
            void comb_tilde_10_feedForward_write(number v) {
                this->comb_tilde_10_feedForward_writer = this->comb_tilde_10_feedForward_reader;
                this->comb_tilde_10_feedForward_buffer[(Index)this->comb_tilde_10_feedForward_writer] = v;
            }
            
            number comb_tilde_10_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_10_feedForward__maxdelay : size);
                number val = this->comb_tilde_10_feedForward_read(effectiveSize, 0);
                this->comb_tilde_10_feedForward_write(v);
                this->comb_tilde_10_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_10_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_10_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_10_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_10_feedForward_init() {
                auto result = this->comb_tilde_10_feedForward_calcSizeInSamples();
                this->comb_tilde_10_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_10_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_10_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_10_feedForward_clear() {
                this->comb_tilde_10_feedForward_buffer->setZero();
            }
            
            void comb_tilde_10_feedForward_reset() {
                auto result = this->comb_tilde_10_feedForward_calcSizeInSamples();
                this->comb_tilde_10_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_10_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_10_feedForward_buffer);
                this->comb_tilde_10_feedForward_wrap = this->comb_tilde_10_feedForward_buffer->getSize() - 1;
                this->comb_tilde_10_feedForward_clear();
            
                if (this->comb_tilde_10_feedForward_reader >= this->comb_tilde_10_feedForward__maxdelay || this->comb_tilde_10_feedForward_writer >= this->comb_tilde_10_feedForward__maxdelay) {
                    this->comb_tilde_10_feedForward_reader = 0;
                    this->comb_tilde_10_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_10_feedForward_dspsetup() {
                this->comb_tilde_10_feedForward_reset();
            }
            
            number comb_tilde_10_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_10_feedForward_size() {
                return this->comb_tilde_10_feedForward__maxdelay;
            }
            
            void comb_tilde_10_feedBack_step() {
                this->comb_tilde_10_feedBack_reader++;
            
                if (this->comb_tilde_10_feedBack_reader >= (int)(this->comb_tilde_10_feedBack_buffer->getSize()))
                    this->comb_tilde_10_feedBack_reader = 0;
            }
            
            number comb_tilde_10_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? 1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? 1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_10_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                );
            }
            
            void comb_tilde_10_feedBack_write(number v) {
                this->comb_tilde_10_feedBack_writer = this->comb_tilde_10_feedBack_reader;
                this->comb_tilde_10_feedBack_buffer[(Index)this->comb_tilde_10_feedBack_writer] = v;
            }
            
            number comb_tilde_10_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_10_feedBack__maxdelay : size);
                number val = this->comb_tilde_10_feedBack_read(effectiveSize, 0);
                this->comb_tilde_10_feedBack_write(v);
                this->comb_tilde_10_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_10_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_10_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_10_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_10_feedBack_init() {
                auto result = this->comb_tilde_10_feedBack_calcSizeInSamples();
                this->comb_tilde_10_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_10_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_10_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_10_feedBack_clear() {
                this->comb_tilde_10_feedBack_buffer->setZero();
            }
            
            void comb_tilde_10_feedBack_reset() {
                auto result = this->comb_tilde_10_feedBack_calcSizeInSamples();
                this->comb_tilde_10_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_10_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_10_feedBack_buffer);
                this->comb_tilde_10_feedBack_wrap = this->comb_tilde_10_feedBack_buffer->getSize() - 1;
                this->comb_tilde_10_feedBack_clear();
            
                if (this->comb_tilde_10_feedBack_reader >= this->comb_tilde_10_feedBack__maxdelay || this->comb_tilde_10_feedBack_writer >= this->comb_tilde_10_feedBack__maxdelay) {
                    this->comb_tilde_10_feedBack_reader = 0;
                    this->comb_tilde_10_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_10_feedBack_dspsetup() {
                this->comb_tilde_10_feedBack_reset();
            }
            
            number comb_tilde_10_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_10_feedBack_size() {
                return this->comb_tilde_10_feedBack__maxdelay;
            }
            
            void comb_tilde_10_init() {
                this->comb_tilde_10_feedForward_init();
                this->comb_tilde_10_feedBack_init();
            }
            
            void comb_tilde_10_clear() {
                this->comb_tilde_10_feedForward_clear();
                this->comb_tilde_10_feedBack_clear();
            }
            
            void comb_tilde_10_reset() {
                this->comb_tilde_10_init();
                this->comb_tilde_10_clear();
            }
            
            void comb_tilde_10_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_10_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_10_reset();
                this->comb_tilde_10_setupDone = true;
                this->comb_tilde_10_feedForward_dspsetup();
                this->comb_tilde_10_feedBack_dspsetup();
            }
            
            void comb_tilde_11_feedForward_step() {
                this->comb_tilde_11_feedForward_reader++;
            
                if (this->comb_tilde_11_feedForward_reader >= (int)(this->comb_tilde_11_feedForward_buffer->getSize()))
                    this->comb_tilde_11_feedForward_reader = 0;
            }
            
            number comb_tilde_11_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? 1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? 1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_11_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                );
            }
            
            void comb_tilde_11_feedForward_write(number v) {
                this->comb_tilde_11_feedForward_writer = this->comb_tilde_11_feedForward_reader;
                this->comb_tilde_11_feedForward_buffer[(Index)this->comb_tilde_11_feedForward_writer] = v;
            }
            
            number comb_tilde_11_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_11_feedForward__maxdelay : size);
                number val = this->comb_tilde_11_feedForward_read(effectiveSize, 0);
                this->comb_tilde_11_feedForward_write(v);
                this->comb_tilde_11_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_11_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_11_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_11_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_11_feedForward_init() {
                auto result = this->comb_tilde_11_feedForward_calcSizeInSamples();
                this->comb_tilde_11_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_11_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_11_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_11_feedForward_clear() {
                this->comb_tilde_11_feedForward_buffer->setZero();
            }
            
            void comb_tilde_11_feedForward_reset() {
                auto result = this->comb_tilde_11_feedForward_calcSizeInSamples();
                this->comb_tilde_11_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_11_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_11_feedForward_buffer);
                this->comb_tilde_11_feedForward_wrap = this->comb_tilde_11_feedForward_buffer->getSize() - 1;
                this->comb_tilde_11_feedForward_clear();
            
                if (this->comb_tilde_11_feedForward_reader >= this->comb_tilde_11_feedForward__maxdelay || this->comb_tilde_11_feedForward_writer >= this->comb_tilde_11_feedForward__maxdelay) {
                    this->comb_tilde_11_feedForward_reader = 0;
                    this->comb_tilde_11_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_11_feedForward_dspsetup() {
                this->comb_tilde_11_feedForward_reset();
            }
            
            number comb_tilde_11_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_11_feedForward_size() {
                return this->comb_tilde_11_feedForward__maxdelay;
            }
            
            void comb_tilde_11_feedBack_step() {
                this->comb_tilde_11_feedBack_reader++;
            
                if (this->comb_tilde_11_feedBack_reader >= (int)(this->comb_tilde_11_feedBack_buffer->getSize()))
                    this->comb_tilde_11_feedBack_reader = 0;
            }
            
            number comb_tilde_11_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? 1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? 1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_11_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                );
            }
            
            void comb_tilde_11_feedBack_write(number v) {
                this->comb_tilde_11_feedBack_writer = this->comb_tilde_11_feedBack_reader;
                this->comb_tilde_11_feedBack_buffer[(Index)this->comb_tilde_11_feedBack_writer] = v;
            }
            
            number comb_tilde_11_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_11_feedBack__maxdelay : size);
                number val = this->comb_tilde_11_feedBack_read(effectiveSize, 0);
                this->comb_tilde_11_feedBack_write(v);
                this->comb_tilde_11_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_11_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_11_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_11_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_11_feedBack_init() {
                auto result = this->comb_tilde_11_feedBack_calcSizeInSamples();
                this->comb_tilde_11_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_11_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_11_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_11_feedBack_clear() {
                this->comb_tilde_11_feedBack_buffer->setZero();
            }
            
            void comb_tilde_11_feedBack_reset() {
                auto result = this->comb_tilde_11_feedBack_calcSizeInSamples();
                this->comb_tilde_11_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_11_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_11_feedBack_buffer);
                this->comb_tilde_11_feedBack_wrap = this->comb_tilde_11_feedBack_buffer->getSize() - 1;
                this->comb_tilde_11_feedBack_clear();
            
                if (this->comb_tilde_11_feedBack_reader >= this->comb_tilde_11_feedBack__maxdelay || this->comb_tilde_11_feedBack_writer >= this->comb_tilde_11_feedBack__maxdelay) {
                    this->comb_tilde_11_feedBack_reader = 0;
                    this->comb_tilde_11_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_11_feedBack_dspsetup() {
                this->comb_tilde_11_feedBack_reset();
            }
            
            number comb_tilde_11_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_11_feedBack_size() {
                return this->comb_tilde_11_feedBack__maxdelay;
            }
            
            void comb_tilde_11_init() {
                this->comb_tilde_11_feedForward_init();
                this->comb_tilde_11_feedBack_init();
            }
            
            void comb_tilde_11_clear() {
                this->comb_tilde_11_feedForward_clear();
                this->comb_tilde_11_feedBack_clear();
            }
            
            void comb_tilde_11_reset() {
                this->comb_tilde_11_init();
                this->comb_tilde_11_clear();
            }
            
            void comb_tilde_11_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_11_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_11_reset();
                this->comb_tilde_11_setupDone = true;
                this->comb_tilde_11_feedForward_dspsetup();
                this->comb_tilde_11_feedBack_dspsetup();
            }
            
            void comb_tilde_12_feedForward_step() {
                this->comb_tilde_12_feedForward_reader++;
            
                if (this->comb_tilde_12_feedForward_reader >= (int)(this->comb_tilde_12_feedForward_buffer->getSize()))
                    this->comb_tilde_12_feedForward_reader = 0;
            }
            
            number comb_tilde_12_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? 1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? 1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_12_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                );
            }
            
            void comb_tilde_12_feedForward_write(number v) {
                this->comb_tilde_12_feedForward_writer = this->comb_tilde_12_feedForward_reader;
                this->comb_tilde_12_feedForward_buffer[(Index)this->comb_tilde_12_feedForward_writer] = v;
            }
            
            number comb_tilde_12_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_12_feedForward__maxdelay : size);
                number val = this->comb_tilde_12_feedForward_read(effectiveSize, 0);
                this->comb_tilde_12_feedForward_write(v);
                this->comb_tilde_12_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_12_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_12_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_12_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_12_feedForward_init() {
                auto result = this->comb_tilde_12_feedForward_calcSizeInSamples();
                this->comb_tilde_12_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_12_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_12_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_12_feedForward_clear() {
                this->comb_tilde_12_feedForward_buffer->setZero();
            }
            
            void comb_tilde_12_feedForward_reset() {
                auto result = this->comb_tilde_12_feedForward_calcSizeInSamples();
                this->comb_tilde_12_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_12_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_12_feedForward_buffer);
                this->comb_tilde_12_feedForward_wrap = this->comb_tilde_12_feedForward_buffer->getSize() - 1;
                this->comb_tilde_12_feedForward_clear();
            
                if (this->comb_tilde_12_feedForward_reader >= this->comb_tilde_12_feedForward__maxdelay || this->comb_tilde_12_feedForward_writer >= this->comb_tilde_12_feedForward__maxdelay) {
                    this->comb_tilde_12_feedForward_reader = 0;
                    this->comb_tilde_12_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_12_feedForward_dspsetup() {
                this->comb_tilde_12_feedForward_reset();
            }
            
            number comb_tilde_12_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_12_feedForward_size() {
                return this->comb_tilde_12_feedForward__maxdelay;
            }
            
            void comb_tilde_12_feedBack_step() {
                this->comb_tilde_12_feedBack_reader++;
            
                if (this->comb_tilde_12_feedBack_reader >= (int)(this->comb_tilde_12_feedBack_buffer->getSize()))
                    this->comb_tilde_12_feedBack_reader = 0;
            }
            
            number comb_tilde_12_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? 1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? 1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_12_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                );
            }
            
            void comb_tilde_12_feedBack_write(number v) {
                this->comb_tilde_12_feedBack_writer = this->comb_tilde_12_feedBack_reader;
                this->comb_tilde_12_feedBack_buffer[(Index)this->comb_tilde_12_feedBack_writer] = v;
            }
            
            number comb_tilde_12_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_12_feedBack__maxdelay : size);
                number val = this->comb_tilde_12_feedBack_read(effectiveSize, 0);
                this->comb_tilde_12_feedBack_write(v);
                this->comb_tilde_12_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_12_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_12_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_12_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_12_feedBack_init() {
                auto result = this->comb_tilde_12_feedBack_calcSizeInSamples();
                this->comb_tilde_12_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_12_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_12_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_12_feedBack_clear() {
                this->comb_tilde_12_feedBack_buffer->setZero();
            }
            
            void comb_tilde_12_feedBack_reset() {
                auto result = this->comb_tilde_12_feedBack_calcSizeInSamples();
                this->comb_tilde_12_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_12_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_12_feedBack_buffer);
                this->comb_tilde_12_feedBack_wrap = this->comb_tilde_12_feedBack_buffer->getSize() - 1;
                this->comb_tilde_12_feedBack_clear();
            
                if (this->comb_tilde_12_feedBack_reader >= this->comb_tilde_12_feedBack__maxdelay || this->comb_tilde_12_feedBack_writer >= this->comb_tilde_12_feedBack__maxdelay) {
                    this->comb_tilde_12_feedBack_reader = 0;
                    this->comb_tilde_12_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_12_feedBack_dspsetup() {
                this->comb_tilde_12_feedBack_reset();
            }
            
            number comb_tilde_12_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_12_feedBack_size() {
                return this->comb_tilde_12_feedBack__maxdelay;
            }
            
            void comb_tilde_12_init() {
                this->comb_tilde_12_feedForward_init();
                this->comb_tilde_12_feedBack_init();
            }
            
            void comb_tilde_12_clear() {
                this->comb_tilde_12_feedForward_clear();
                this->comb_tilde_12_feedBack_clear();
            }
            
            void comb_tilde_12_reset() {
                this->comb_tilde_12_init();
                this->comb_tilde_12_clear();
            }
            
            void comb_tilde_12_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_12_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_12_reset();
                this->comb_tilde_12_setupDone = true;
                this->comb_tilde_12_feedForward_dspsetup();
                this->comb_tilde_12_feedBack_dspsetup();
            }
            
            void comb_tilde_13_feedForward_step() {
                this->comb_tilde_13_feedForward_reader++;
            
                if (this->comb_tilde_13_feedForward_reader >= (int)(this->comb_tilde_13_feedForward_buffer->getSize()))
                    this->comb_tilde_13_feedForward_reader = 0;
            }
            
            number comb_tilde_13_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? 1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? 1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_13_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                );
            }
            
            void comb_tilde_13_feedForward_write(number v) {
                this->comb_tilde_13_feedForward_writer = this->comb_tilde_13_feedForward_reader;
                this->comb_tilde_13_feedForward_buffer[(Index)this->comb_tilde_13_feedForward_writer] = v;
            }
            
            number comb_tilde_13_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_13_feedForward__maxdelay : size);
                number val = this->comb_tilde_13_feedForward_read(effectiveSize, 0);
                this->comb_tilde_13_feedForward_write(v);
                this->comb_tilde_13_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_13_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_13_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_13_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_13_feedForward_init() {
                auto result = this->comb_tilde_13_feedForward_calcSizeInSamples();
                this->comb_tilde_13_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_13_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_13_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_13_feedForward_clear() {
                this->comb_tilde_13_feedForward_buffer->setZero();
            }
            
            void comb_tilde_13_feedForward_reset() {
                auto result = this->comb_tilde_13_feedForward_calcSizeInSamples();
                this->comb_tilde_13_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_13_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_13_feedForward_buffer);
                this->comb_tilde_13_feedForward_wrap = this->comb_tilde_13_feedForward_buffer->getSize() - 1;
                this->comb_tilde_13_feedForward_clear();
            
                if (this->comb_tilde_13_feedForward_reader >= this->comb_tilde_13_feedForward__maxdelay || this->comb_tilde_13_feedForward_writer >= this->comb_tilde_13_feedForward__maxdelay) {
                    this->comb_tilde_13_feedForward_reader = 0;
                    this->comb_tilde_13_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_13_feedForward_dspsetup() {
                this->comb_tilde_13_feedForward_reset();
            }
            
            number comb_tilde_13_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_13_feedForward_size() {
                return this->comb_tilde_13_feedForward__maxdelay;
            }
            
            void comb_tilde_13_feedBack_step() {
                this->comb_tilde_13_feedBack_reader++;
            
                if (this->comb_tilde_13_feedBack_reader >= (int)(this->comb_tilde_13_feedBack_buffer->getSize()))
                    this->comb_tilde_13_feedBack_reader = 0;
            }
            
            number comb_tilde_13_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? 1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? 1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_13_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                );
            }
            
            void comb_tilde_13_feedBack_write(number v) {
                this->comb_tilde_13_feedBack_writer = this->comb_tilde_13_feedBack_reader;
                this->comb_tilde_13_feedBack_buffer[(Index)this->comb_tilde_13_feedBack_writer] = v;
            }
            
            number comb_tilde_13_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_13_feedBack__maxdelay : size);
                number val = this->comb_tilde_13_feedBack_read(effectiveSize, 0);
                this->comb_tilde_13_feedBack_write(v);
                this->comb_tilde_13_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_13_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_13_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_13_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_13_feedBack_init() {
                auto result = this->comb_tilde_13_feedBack_calcSizeInSamples();
                this->comb_tilde_13_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_13_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_13_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_13_feedBack_clear() {
                this->comb_tilde_13_feedBack_buffer->setZero();
            }
            
            void comb_tilde_13_feedBack_reset() {
                auto result = this->comb_tilde_13_feedBack_calcSizeInSamples();
                this->comb_tilde_13_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_13_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_13_feedBack_buffer);
                this->comb_tilde_13_feedBack_wrap = this->comb_tilde_13_feedBack_buffer->getSize() - 1;
                this->comb_tilde_13_feedBack_clear();
            
                if (this->comb_tilde_13_feedBack_reader >= this->comb_tilde_13_feedBack__maxdelay || this->comb_tilde_13_feedBack_writer >= this->comb_tilde_13_feedBack__maxdelay) {
                    this->comb_tilde_13_feedBack_reader = 0;
                    this->comb_tilde_13_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_13_feedBack_dspsetup() {
                this->comb_tilde_13_feedBack_reset();
            }
            
            number comb_tilde_13_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_13_feedBack_size() {
                return this->comb_tilde_13_feedBack__maxdelay;
            }
            
            void comb_tilde_13_init() {
                this->comb_tilde_13_feedForward_init();
                this->comb_tilde_13_feedBack_init();
            }
            
            void comb_tilde_13_clear() {
                this->comb_tilde_13_feedForward_clear();
                this->comb_tilde_13_feedBack_clear();
            }
            
            void comb_tilde_13_reset() {
                this->comb_tilde_13_init();
                this->comb_tilde_13_clear();
            }
            
            void comb_tilde_13_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_13_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_13_reset();
                this->comb_tilde_13_setupDone = true;
                this->comb_tilde_13_feedForward_dspsetup();
                this->comb_tilde_13_feedBack_dspsetup();
            }
            
            void comb_tilde_14_feedForward_step() {
                this->comb_tilde_14_feedForward_reader++;
            
                if (this->comb_tilde_14_feedForward_reader >= (int)(this->comb_tilde_14_feedForward_buffer->getSize()))
                    this->comb_tilde_14_feedForward_reader = 0;
            }
            
            number comb_tilde_14_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? 1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? 1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_14_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                );
            }
            
            void comb_tilde_14_feedForward_write(number v) {
                this->comb_tilde_14_feedForward_writer = this->comb_tilde_14_feedForward_reader;
                this->comb_tilde_14_feedForward_buffer[(Index)this->comb_tilde_14_feedForward_writer] = v;
            }
            
            number comb_tilde_14_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_14_feedForward__maxdelay : size);
                number val = this->comb_tilde_14_feedForward_read(effectiveSize, 0);
                this->comb_tilde_14_feedForward_write(v);
                this->comb_tilde_14_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_14_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_14_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_14_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_14_feedForward_init() {
                auto result = this->comb_tilde_14_feedForward_calcSizeInSamples();
                this->comb_tilde_14_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_14_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_14_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_14_feedForward_clear() {
                this->comb_tilde_14_feedForward_buffer->setZero();
            }
            
            void comb_tilde_14_feedForward_reset() {
                auto result = this->comb_tilde_14_feedForward_calcSizeInSamples();
                this->comb_tilde_14_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_14_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_14_feedForward_buffer);
                this->comb_tilde_14_feedForward_wrap = this->comb_tilde_14_feedForward_buffer->getSize() - 1;
                this->comb_tilde_14_feedForward_clear();
            
                if (this->comb_tilde_14_feedForward_reader >= this->comb_tilde_14_feedForward__maxdelay || this->comb_tilde_14_feedForward_writer >= this->comb_tilde_14_feedForward__maxdelay) {
                    this->comb_tilde_14_feedForward_reader = 0;
                    this->comb_tilde_14_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_14_feedForward_dspsetup() {
                this->comb_tilde_14_feedForward_reset();
            }
            
            number comb_tilde_14_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_14_feedForward_size() {
                return this->comb_tilde_14_feedForward__maxdelay;
            }
            
            void comb_tilde_14_feedBack_step() {
                this->comb_tilde_14_feedBack_reader++;
            
                if (this->comb_tilde_14_feedBack_reader >= (int)(this->comb_tilde_14_feedBack_buffer->getSize()))
                    this->comb_tilde_14_feedBack_reader = 0;
            }
            
            number comb_tilde_14_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? 1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? 1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_14_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                );
            }
            
            void comb_tilde_14_feedBack_write(number v) {
                this->comb_tilde_14_feedBack_writer = this->comb_tilde_14_feedBack_reader;
                this->comb_tilde_14_feedBack_buffer[(Index)this->comb_tilde_14_feedBack_writer] = v;
            }
            
            number comb_tilde_14_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_14_feedBack__maxdelay : size);
                number val = this->comb_tilde_14_feedBack_read(effectiveSize, 0);
                this->comb_tilde_14_feedBack_write(v);
                this->comb_tilde_14_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_14_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_14_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_14_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_14_feedBack_init() {
                auto result = this->comb_tilde_14_feedBack_calcSizeInSamples();
                this->comb_tilde_14_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_14_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_14_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_14_feedBack_clear() {
                this->comb_tilde_14_feedBack_buffer->setZero();
            }
            
            void comb_tilde_14_feedBack_reset() {
                auto result = this->comb_tilde_14_feedBack_calcSizeInSamples();
                this->comb_tilde_14_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_14_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_14_feedBack_buffer);
                this->comb_tilde_14_feedBack_wrap = this->comb_tilde_14_feedBack_buffer->getSize() - 1;
                this->comb_tilde_14_feedBack_clear();
            
                if (this->comb_tilde_14_feedBack_reader >= this->comb_tilde_14_feedBack__maxdelay || this->comb_tilde_14_feedBack_writer >= this->comb_tilde_14_feedBack__maxdelay) {
                    this->comb_tilde_14_feedBack_reader = 0;
                    this->comb_tilde_14_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_14_feedBack_dspsetup() {
                this->comb_tilde_14_feedBack_reset();
            }
            
            number comb_tilde_14_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_14_feedBack_size() {
                return this->comb_tilde_14_feedBack__maxdelay;
            }
            
            void comb_tilde_14_init() {
                this->comb_tilde_14_feedForward_init();
                this->comb_tilde_14_feedBack_init();
            }
            
            void comb_tilde_14_clear() {
                this->comb_tilde_14_feedForward_clear();
                this->comb_tilde_14_feedBack_clear();
            }
            
            void comb_tilde_14_reset() {
                this->comb_tilde_14_init();
                this->comb_tilde_14_clear();
            }
            
            void comb_tilde_14_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_14_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_14_reset();
                this->comb_tilde_14_setupDone = true;
                this->comb_tilde_14_feedForward_dspsetup();
                this->comb_tilde_14_feedBack_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                comb_tilde_08_x = 0;
                comb_tilde_08_delayTime = 300;
                comb_tilde_08_gain = 110;
                comb_tilde_08_ffGain = 0;
                comb_tilde_08_fbGain = 1;
                expr_24_in1 = 0;
                expr_24_in2 = 110;
                expr_24_out1 = 0;
                comb_tilde_09_x = 0;
                comb_tilde_09_delayTime = 300;
                comb_tilde_09_gain = 135;
                comb_tilde_09_ffGain = 0;
                comb_tilde_09_fbGain = 1;
                expr_25_in1 = 0;
                expr_25_in2 = 135;
                expr_25_out1 = 0;
                dspexpr_03_in1 = 0;
                dspexpr_03_in2 = 0.15;
                dspexpr_04_in1 = 0;
                dspexpr_04_in2 = -1;
                comb_tilde_10_x = 0;
                comb_tilde_10_delayTime = 200;
                comb_tilde_10_gain = 55;
                comb_tilde_10_ffGain = 0;
                comb_tilde_10_fbGain = 1;
                expr_26_in1 = 0;
                expr_26_in2 = 55;
                expr_26_out1 = 0;
                comb_tilde_11_x = 0;
                comb_tilde_11_delayTime = 100;
                comb_tilde_11_gain = 3;
                comb_tilde_11_ffGain = 0;
                comb_tilde_11_fbGain = 1;
                expr_27_in1 = 0;
                expr_27_in2 = 3;
                expr_27_out1 = 0;
                comb_tilde_12_x = 0;
                comb_tilde_12_delayTime = 100;
                comb_tilde_12_gain = 35;
                comb_tilde_12_ffGain = 0;
                comb_tilde_12_fbGain = 1;
                expr_28_in1 = 0;
                expr_28_in2 = 35;
                expr_28_out1 = 0;
                comb_tilde_13_x = 0;
                comb_tilde_13_delayTime = 100;
                comb_tilde_13_gain = 27;
                comb_tilde_13_ffGain = 0;
                comb_tilde_13_fbGain = 1;
                expr_29_in1 = 0;
                expr_29_in2 = 27;
                expr_29_out1 = 0;
                comb_tilde_14_x = 0;
                comb_tilde_14_delayTime = 200;
                comb_tilde_14_gain = 52;
                comb_tilde_14_ffGain = 0;
                comb_tilde_14_fbGain = 1;
                expr_30_in1 = 0;
                expr_30_in2 = 52;
                expr_30_out1 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                signals[7] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                comb_tilde_08_feedForward__maxdelay = 0;
                comb_tilde_08_feedForward_sizemode = 0;
                comb_tilde_08_feedForward_wrap = 0;
                comb_tilde_08_feedForward_reader = 0;
                comb_tilde_08_feedForward_writer = 0;
                comb_tilde_08_feedBack__maxdelay = 0;
                comb_tilde_08_feedBack_sizemode = 0;
                comb_tilde_08_feedBack_wrap = 0;
                comb_tilde_08_feedBack_reader = 0;
                comb_tilde_08_feedBack_writer = 0;
                comb_tilde_08_setupDone = false;
                comb_tilde_09_feedForward__maxdelay = 0;
                comb_tilde_09_feedForward_sizemode = 0;
                comb_tilde_09_feedForward_wrap = 0;
                comb_tilde_09_feedForward_reader = 0;
                comb_tilde_09_feedForward_writer = 0;
                comb_tilde_09_feedBack__maxdelay = 0;
                comb_tilde_09_feedBack_sizemode = 0;
                comb_tilde_09_feedBack_wrap = 0;
                comb_tilde_09_feedBack_reader = 0;
                comb_tilde_09_feedBack_writer = 0;
                comb_tilde_09_setupDone = false;
                comb_tilde_10_feedForward__maxdelay = 0;
                comb_tilde_10_feedForward_sizemode = 0;
                comb_tilde_10_feedForward_wrap = 0;
                comb_tilde_10_feedForward_reader = 0;
                comb_tilde_10_feedForward_writer = 0;
                comb_tilde_10_feedBack__maxdelay = 0;
                comb_tilde_10_feedBack_sizemode = 0;
                comb_tilde_10_feedBack_wrap = 0;
                comb_tilde_10_feedBack_reader = 0;
                comb_tilde_10_feedBack_writer = 0;
                comb_tilde_10_setupDone = false;
                comb_tilde_11_feedForward__maxdelay = 0;
                comb_tilde_11_feedForward_sizemode = 0;
                comb_tilde_11_feedForward_wrap = 0;
                comb_tilde_11_feedForward_reader = 0;
                comb_tilde_11_feedForward_writer = 0;
                comb_tilde_11_feedBack__maxdelay = 0;
                comb_tilde_11_feedBack_sizemode = 0;
                comb_tilde_11_feedBack_wrap = 0;
                comb_tilde_11_feedBack_reader = 0;
                comb_tilde_11_feedBack_writer = 0;
                comb_tilde_11_setupDone = false;
                comb_tilde_12_feedForward__maxdelay = 0;
                comb_tilde_12_feedForward_sizemode = 0;
                comb_tilde_12_feedForward_wrap = 0;
                comb_tilde_12_feedForward_reader = 0;
                comb_tilde_12_feedForward_writer = 0;
                comb_tilde_12_feedBack__maxdelay = 0;
                comb_tilde_12_feedBack_sizemode = 0;
                comb_tilde_12_feedBack_wrap = 0;
                comb_tilde_12_feedBack_reader = 0;
                comb_tilde_12_feedBack_writer = 0;
                comb_tilde_12_setupDone = false;
                comb_tilde_13_feedForward__maxdelay = 0;
                comb_tilde_13_feedForward_sizemode = 0;
                comb_tilde_13_feedForward_wrap = 0;
                comb_tilde_13_feedForward_reader = 0;
                comb_tilde_13_feedForward_writer = 0;
                comb_tilde_13_feedBack__maxdelay = 0;
                comb_tilde_13_feedBack_sizemode = 0;
                comb_tilde_13_feedBack_wrap = 0;
                comb_tilde_13_feedBack_reader = 0;
                comb_tilde_13_feedBack_writer = 0;
                comb_tilde_13_setupDone = false;
                comb_tilde_14_feedForward__maxdelay = 0;
                comb_tilde_14_feedForward_sizemode = 0;
                comb_tilde_14_feedForward_wrap = 0;
                comb_tilde_14_feedForward_reader = 0;
                comb_tilde_14_feedForward_writer = 0;
                comb_tilde_14_feedBack__maxdelay = 0;
                comb_tilde_14_feedBack_sizemode = 0;
                comb_tilde_14_feedBack_wrap = 0;
                comb_tilde_14_feedBack_reader = 0;
                comb_tilde_14_feedBack_writer = 0;
                comb_tilde_14_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number comb_tilde_08_x;
                number comb_tilde_08_delayTime;
                number comb_tilde_08_gain;
                number comb_tilde_08_ffGain;
                number comb_tilde_08_fbGain;
                number expr_24_in1;
                number expr_24_in2;
                number expr_24_out1;
                number comb_tilde_09_x;
                number comb_tilde_09_delayTime;
                number comb_tilde_09_gain;
                number comb_tilde_09_ffGain;
                number comb_tilde_09_fbGain;
                number expr_25_in1;
                number expr_25_in2;
                number expr_25_out1;
                number dspexpr_03_in1;
                number dspexpr_03_in2;
                number dspexpr_04_in1;
                number dspexpr_04_in2;
                number comb_tilde_10_x;
                number comb_tilde_10_delayTime;
                number comb_tilde_10_gain;
                number comb_tilde_10_ffGain;
                number comb_tilde_10_fbGain;
                number expr_26_in1;
                number expr_26_in2;
                number expr_26_out1;
                number comb_tilde_11_x;
                number comb_tilde_11_delayTime;
                number comb_tilde_11_gain;
                number comb_tilde_11_ffGain;
                number comb_tilde_11_fbGain;
                number expr_27_in1;
                number expr_27_in2;
                number expr_27_out1;
                number comb_tilde_12_x;
                number comb_tilde_12_delayTime;
                number comb_tilde_12_gain;
                number comb_tilde_12_ffGain;
                number comb_tilde_12_fbGain;
                number expr_28_in1;
                number expr_28_in2;
                number expr_28_out1;
                number comb_tilde_13_x;
                number comb_tilde_13_delayTime;
                number comb_tilde_13_gain;
                number comb_tilde_13_ffGain;
                number comb_tilde_13_fbGain;
                number expr_29_in1;
                number expr_29_in2;
                number expr_29_out1;
                number comb_tilde_14_x;
                number comb_tilde_14_delayTime;
                number comb_tilde_14_gain;
                number comb_tilde_14_ffGain;
                number comb_tilde_14_fbGain;
                number expr_30_in1;
                number expr_30_in2;
                number expr_30_out1;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[8];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef comb_tilde_08_feedForward_buffer;
                Index comb_tilde_08_feedForward__maxdelay;
                Int comb_tilde_08_feedForward_sizemode;
                Index comb_tilde_08_feedForward_wrap;
                Int comb_tilde_08_feedForward_reader;
                Int comb_tilde_08_feedForward_writer;
                Float64BufferRef comb_tilde_08_feedBack_buffer;
                Index comb_tilde_08_feedBack__maxdelay;
                Int comb_tilde_08_feedBack_sizemode;
                Index comb_tilde_08_feedBack_wrap;
                Int comb_tilde_08_feedBack_reader;
                Int comb_tilde_08_feedBack_writer;
                bool comb_tilde_08_setupDone;
                Float64BufferRef comb_tilde_09_feedForward_buffer;
                Index comb_tilde_09_feedForward__maxdelay;
                Int comb_tilde_09_feedForward_sizemode;
                Index comb_tilde_09_feedForward_wrap;
                Int comb_tilde_09_feedForward_reader;
                Int comb_tilde_09_feedForward_writer;
                Float64BufferRef comb_tilde_09_feedBack_buffer;
                Index comb_tilde_09_feedBack__maxdelay;
                Int comb_tilde_09_feedBack_sizemode;
                Index comb_tilde_09_feedBack_wrap;
                Int comb_tilde_09_feedBack_reader;
                Int comb_tilde_09_feedBack_writer;
                bool comb_tilde_09_setupDone;
                Float64BufferRef comb_tilde_10_feedForward_buffer;
                Index comb_tilde_10_feedForward__maxdelay;
                Int comb_tilde_10_feedForward_sizemode;
                Index comb_tilde_10_feedForward_wrap;
                Int comb_tilde_10_feedForward_reader;
                Int comb_tilde_10_feedForward_writer;
                Float64BufferRef comb_tilde_10_feedBack_buffer;
                Index comb_tilde_10_feedBack__maxdelay;
                Int comb_tilde_10_feedBack_sizemode;
                Index comb_tilde_10_feedBack_wrap;
                Int comb_tilde_10_feedBack_reader;
                Int comb_tilde_10_feedBack_writer;
                bool comb_tilde_10_setupDone;
                Float64BufferRef comb_tilde_11_feedForward_buffer;
                Index comb_tilde_11_feedForward__maxdelay;
                Int comb_tilde_11_feedForward_sizemode;
                Index comb_tilde_11_feedForward_wrap;
                Int comb_tilde_11_feedForward_reader;
                Int comb_tilde_11_feedForward_writer;
                Float64BufferRef comb_tilde_11_feedBack_buffer;
                Index comb_tilde_11_feedBack__maxdelay;
                Int comb_tilde_11_feedBack_sizemode;
                Index comb_tilde_11_feedBack_wrap;
                Int comb_tilde_11_feedBack_reader;
                Int comb_tilde_11_feedBack_writer;
                bool comb_tilde_11_setupDone;
                Float64BufferRef comb_tilde_12_feedForward_buffer;
                Index comb_tilde_12_feedForward__maxdelay;
                Int comb_tilde_12_feedForward_sizemode;
                Index comb_tilde_12_feedForward_wrap;
                Int comb_tilde_12_feedForward_reader;
                Int comb_tilde_12_feedForward_writer;
                Float64BufferRef comb_tilde_12_feedBack_buffer;
                Index comb_tilde_12_feedBack__maxdelay;
                Int comb_tilde_12_feedBack_sizemode;
                Index comb_tilde_12_feedBack_wrap;
                Int comb_tilde_12_feedBack_reader;
                Int comb_tilde_12_feedBack_writer;
                bool comb_tilde_12_setupDone;
                Float64BufferRef comb_tilde_13_feedForward_buffer;
                Index comb_tilde_13_feedForward__maxdelay;
                Int comb_tilde_13_feedForward_sizemode;
                Index comb_tilde_13_feedForward_wrap;
                Int comb_tilde_13_feedForward_reader;
                Int comb_tilde_13_feedForward_writer;
                Float64BufferRef comb_tilde_13_feedBack_buffer;
                Index comb_tilde_13_feedBack__maxdelay;
                Int comb_tilde_13_feedBack_sizemode;
                Index comb_tilde_13_feedBack_wrap;
                Int comb_tilde_13_feedBack_reader;
                Int comb_tilde_13_feedBack_writer;
                bool comb_tilde_13_setupDone;
                Float64BufferRef comb_tilde_14_feedForward_buffer;
                Index comb_tilde_14_feedForward__maxdelay;
                Int comb_tilde_14_feedForward_sizemode;
                Index comb_tilde_14_feedForward_wrap;
                Int comb_tilde_14_feedForward_reader;
                Int comb_tilde_14_feedForward_writer;
                Float64BufferRef comb_tilde_14_feedBack_buffer;
                Index comb_tilde_14_feedBack__maxdelay;
                Int comb_tilde_14_feedBack_sizemode;
                Index comb_tilde_14_feedBack_wrap;
                Int comb_tilde_14_feedBack_reader;
                Int comb_tilde_14_feedBack_writer;
                bool comb_tilde_14_setupDone;
                number stackprotect_count;
                DataRef comb_tilde_08_feedForward_bufferobj;
                DataRef comb_tilde_08_feedBack_bufferobj;
                DataRef comb_tilde_09_feedForward_bufferobj;
                DataRef comb_tilde_09_feedBack_bufferobj;
                DataRef comb_tilde_10_feedForward_bufferobj;
                DataRef comb_tilde_10_feedBack_bufferobj;
                DataRef comb_tilde_11_feedForward_bufferobj;
                DataRef comb_tilde_11_feedBack_bufferobj;
                DataRef comb_tilde_12_feedForward_bufferobj;
                DataRef comb_tilde_12_feedBack_bufferobj;
                DataRef comb_tilde_13_feedForward_bufferobj;
                DataRef comb_tilde_13_feedBack_bufferobj;
                DataRef comb_tilde_14_feedForward_bufferobj;
                DataRef comb_tilde_14_feedBack_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_30()
    {
    }
    
    ~RNBOSubpatcher_30()
    {
        delete this->p_01;
        delete this->p_02;
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -871642103, false);
    }
    
    inline number linearinterp(number frac, number x, number y) {
        return x + (y - x) * frac;
    }
    
    inline number cubicinterp(number a, number w, number x, number y, number z) {
        number a2 = a * a;
        number f0 = z - y - w + x;
        number f1 = w - x - f0;
        number f2 = y - w;
        number f3 = x;
        return f0 * a * a2 + f1 * a2 + f2 * a + f3;
    }
    
    inline number splineinterp(number a, number w, number x, number y, number z) {
        number a2 = a * a;
        number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
        number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
        number f2 = -0.5 * w + 0.5 * y;
        return f0 * a * a2 + f1 * a2 + f2 * a + x;
    }
    
    inline number cosT8(number r) {
        number t84 = 56.0;
        number t83 = 1680.0;
        number t82 = 20160.0;
        number t81 = 2.4801587302e-05;
        number t73 = 42.0;
        number t72 = 840.0;
        number t71 = 1.9841269841e-04;
    
        if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
            number rr = r * r;
            return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
        } else if (r > 0.0) {
            r -= 1.57079632679489661923132169163975144;
            number rr = r * r;
            return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
        } else {
            r += 1.57079632679489661923132169163975144;
            number rr = r * r;
            return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
        }
    }
    
    inline number cosineinterp(number frac, number x, number y) {
        number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
        return x * (1.0 - a2) + y * a2;
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    number samplerate() {
        return this->sr;
    }
    
    Index vectorsize() {
        return this->vs;
    }
    
    number maximum(number x, number y) {
        return (x < y ? y : x);
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    number random(number low, number high) {
        number range = high - low;
        return rand01() * range + low;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        this->onepole_tilde_02_perform(in1, this->onepole_tilde_02_freqInHz, this->signals[0], n);
    
        this->allpass_tilde_06_perform(
            this->signals[0],
            this->allpass_tilde_06_delayTime,
            this->allpass_tilde_06_gain,
            this->signals[1],
            n
        );
    
        this->allpass_tilde_05_perform(
            this->signals[1],
            this->allpass_tilde_05_delayTime,
            this->allpass_tilde_05_gain,
            this->signals[0],
            n
        );
    
        this->allpass_tilde_04_perform(
            this->signals[0],
            this->allpass_tilde_04_delayTime,
            this->allpass_tilde_04_gain,
            this->signals[1],
            n
        );
    
        this->allpass_tilde_03_perform(
            this->signals[1],
            this->allpass_tilde_03_delayTime,
            this->allpass_tilde_03_gain,
            this->signals[0],
            n
        );
    
        this->ip_01_perform(this->signals[1], n);
        this->noise_tilde_01_perform(this->signals[2], n);
    
        this->lores_01_perform(
            this->lores_01_cutoff,
            this->lores_01_resonance,
            this->signals[2],
            this->signals[3],
            n
        );
    
        this->dspexpr_06_perform(this->signals[3], this->dspexpr_06_in2, this->signals[2], n);
        this->ip_02_perform(this->signals[3], n);
        this->noise_tilde_02_perform(this->signals[4], n);
    
        this->lores_02_perform(
            this->lores_02_cutoff,
            this->lores_02_resonance,
            this->signals[4],
            this->signals[5],
            n
        );
    
        this->dspexpr_08_perform(this->signals[5], this->dspexpr_08_in2, this->signals[4], n);
        this->feedbackreader_01_perform(this->signals[5], n);
        this->signaladder_05_perform(this->signals[0], this->signals[5], this->signals[5], n);
    
        this->allpass_tilde_02_perform(
            this->signals[5],
            this->allpass_tilde_02_delayTime,
            this->allpass_tilde_02_gain,
            this->signals[6],
            n
        );
    
        this->signaladder_06_perform(this->signals[1], this->signals[2], this->signals[2], n);
    
        this->comb_tilde_15_perform(
            this->signals[6],
            this->signals[2],
            this->comb_tilde_15_gain,
            this->comb_tilde_15_ffGain,
            this->comb_tilde_15_fbGain,
            this->signals[7],
            n
        );
    
        this->onepole_tilde_01_perform(this->signals[7], this->onepole_tilde_01_freqInHz, this->signals[1], n);
        this->dspexpr_05_perform(this->signals[1], this->dspexpr_05_in2, this->signals[8], n);
    
        this->allpass_tilde_01_perform(
            this->signals[8],
            this->allpass_tilde_01_delayTime,
            this->allpass_tilde_01_gain,
            this->signals[1],
            n
        );
    
        this->delaytilde_01_perform(this->delaytilde_01_delay, this->signals[1], this->signals[8], n);
        this->feedbackwriter_01_perform(this->signals[8], n);
        this->feedbackreader_02_perform(this->signals[9], n);
        this->signaladder_07_perform(this->signals[0], this->signals[9], this->signals[9], n);
    
        this->allpass_tilde_08_perform(
            this->signals[9],
            this->allpass_tilde_08_delayTime,
            this->allpass_tilde_08_gain,
            this->signals[10],
            n
        );
    
        this->signaladder_08_perform(this->signals[4], this->signals[3], this->signals[3], n);
    
        this->comb_tilde_16_perform(
            this->signals[10],
            this->signals[3],
            this->comb_tilde_16_gain,
            this->comb_tilde_16_ffGain,
            this->comb_tilde_16_fbGain,
            this->signals[0],
            n
        );
    
        this->onepole_tilde_03_perform(this->signals[0], this->onepole_tilde_03_freqInHz, this->signals[4], n);
        this->dspexpr_07_perform(this->signals[4], this->dspexpr_07_in2, this->signals[11], n);
    
        this->allpass_tilde_07_perform(
            this->signals[11],
            this->allpass_tilde_07_delayTime,
            this->allpass_tilde_07_gain,
            this->signals[4],
            n
        );
    
        this->delaytilde_02_perform(this->delaytilde_02_delay, this->signals[4], this->signals[11], n);
    
        this->p_02_perform(
            this->signals[10],
            this->signals[10],
            this->signals[4],
            this->signals[11],
            this->signals[7],
            this->signals[1],
            this->signals[8],
            out2,
            n
        );
    
        this->p_01_perform(
            this->signals[6],
            this->signals[6],
            this->signals[1],
            this->signals[8],
            this->signals[0],
            this->signals[4],
            this->signals[11],
            out1,
            n
        );
    
        this->feedbackwriter_02_perform(this->signals[11], n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 12; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->feedbacktilde_01_feedbackbuffer = resizeSignal(this->feedbacktilde_01_feedbackbuffer, this->maxvs, maxBlockSize);
            this->ip_01_sigbuf = resizeSignal(this->ip_01_sigbuf, this->maxvs, maxBlockSize);
            this->feedbacktilde_02_feedbackbuffer = resizeSignal(this->feedbacktilde_02_feedbackbuffer, this->maxvs, maxBlockSize);
            this->ip_02_sigbuf = resizeSignal(this->ip_02_sigbuf, this->maxvs, maxBlockSize);
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->onepole_tilde_02_dspsetup(forceDSPSetup);
        this->allpass_tilde_06_dspsetup(forceDSPSetup);
        this->allpass_tilde_05_dspsetup(forceDSPSetup);
        this->allpass_tilde_04_dspsetup(forceDSPSetup);
        this->allpass_tilde_03_dspsetup(forceDSPSetup);
        this->ip_01_dspsetup(forceDSPSetup);
        this->lores_01_dspsetup(forceDSPSetup);
        this->ip_02_dspsetup(forceDSPSetup);
        this->lores_02_dspsetup(forceDSPSetup);
        this->samplerate_01_dspsetup(forceDSPSetup);
        this->allpass_tilde_02_dspsetup(forceDSPSetup);
        this->comb_tilde_15_dspsetup(forceDSPSetup);
        this->onepole_tilde_01_dspsetup(forceDSPSetup);
        this->allpass_tilde_01_dspsetup(forceDSPSetup);
        this->delaytilde_01_dspsetup(forceDSPSetup);
        this->allpass_tilde_08_dspsetup(forceDSPSetup);
        this->comb_tilde_16_dspsetup(forceDSPSetup);
        this->onepole_tilde_03_dspsetup(forceDSPSetup);
        this->allpass_tilde_07_dspsetup(forceDSPSetup);
        this->delaytilde_02_dspsetup(forceDSPSetup);
        this->p_01->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_02->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_01 = new RNBOSubpatcher_25();
        this->p_01->setEngineAndPatcher(this->getEngine(), this);
        this->p_01->initialize();
        this->p_01->setParameterOffset(this->getParameterOffset(this->p_01));
        this->p_02 = new RNBOSubpatcher_26();
        this->p_02->setEngineAndPatcher(this->getEngine(), this);
        this->p_02->initialize();
        this->p_02->setParameterOffset(this->getParameterOffset(this->p_02));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->p_01->getPreset(getSubState(getSubState(preset, "__sps"), "combineL"));
        this->p_02->getPreset(getSubState(getSubState(preset, "__sps"), "combineR"));
    }
    
    void processTempoEvent(MillisecondTime time, Tempo tempo) {
        this->updateTime(time);
        this->p_01->processTempoEvent(time, tempo);
        this->p_02->processTempoEvent(time, tempo);
    }
    
    void processTransportEvent(MillisecondTime time, TransportState state) {
        this->updateTime(time);
        this->p_01->processTransportEvent(time, state);
        this->p_02->processTransportEvent(time, state);
    }
    
    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
        this->updateTime(time);
        this->p_01->processBeatTimeEvent(time, beattime);
        this->p_02->processBeatTimeEvent(time, beattime);
    }
    
    void onSampleRateChanged(double samplerate) {
        this->samplerate_01_onSampleRateChanged(samplerate);
    }
    
    void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
        this->updateTime(time);
        this->p_01->processTimeSignatureEvent(time, numerator, denominator);
        this->p_02->processTimeSignatureEvent(time, numerator, denominator);
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        RNBO_UNUSED(v);
        this->updateTime(time);
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_01->getNumParameters())
                this->p_01->setParameterValue(index, v, time);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                this->p_02->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterValue(index);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0 + this->p_01->getNumParameters() + this->p_02->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterName(index);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterId(index);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            default:
                {
                index -= 0;
    
                if (index < this->p_01->getNumParameters())
                    this->p_01->getParameterInfo(index, info);
    
                index -= this->p_01->getNumParameters();
    
                if (index < this->p_02->getNumParameters())
                    this->p_02->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_01)
            return 0;
    
        if (subpatcher == this->p_02)
            return 0 + this->p_01->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->constrainParameterValue(index, value);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(value);
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -871642103:
            {
            this->loadbang_01_startupbang_bang();
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("reverb/number_obj-15") == objectId)
                this->numberobj_01_valin_set(payload);
    
            if (TAG("reverb/number_obj-14") == objectId)
                this->numberobj_02_valin_set(payload);
    
            if (TAG("reverb/number_obj-16") == objectId)
                this->numberobj_03_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("reverb/number_obj-15") == objectId)
                this->numberobj_01_format_set(payload);
    
            if (TAG("reverb/number_obj-14") == objectId)
                this->numberobj_02_format_set(payload);
    
            if (TAG("reverb/number_obj-16") == objectId)
                this->numberobj_03_format_set(payload);
    
            break;
            }
        }
    
        this->p_01->processNumMessage(tag, objectId, time, payload);
        this->p_02->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_01->processListMessage(tag, objectId, time, payload);
        this->p_02->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("startupbang"):
            {
            if (TAG("reverb/loadbang_obj-62") == objectId)
                this->loadbang_01_startupbang_bang();
    
            break;
            }
        }
    
        this->p_01->processBangMessage(tag, objectId, time);
        this->p_02->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("reverb/number_obj-15"):
            {
            return "reverb/number_obj-15";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("reverb/number_obj-14"):
            {
            return "reverb/number_obj-14";
            }
        case TAG("reverb/number_obj-16"):
            {
            return "reverb/number_obj-16";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("startupbang"):
            {
            return "startupbang";
            }
        case TAG("reverb/loadbang_obj-62"):
            {
            return "reverb/loadbang_obj-62";
            }
        }
    
        auto subpatchResult_0 = this->p_01->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_02->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        case 1:
            {
            return addressOf(this->delaytilde_01_del_bufferobj);
            break;
            }
        case 2:
            {
            return addressOf(this->allpass_tilde_01_feedForward_bufferobj);
            break;
            }
        case 3:
            {
            return addressOf(this->allpass_tilde_01_feedBack_bufferobj);
            break;
            }
        case 4:
            {
            return addressOf(this->comb_tilde_15_feedForward_bufferobj);
            break;
            }
        case 5:
            {
            return addressOf(this->comb_tilde_15_feedBack_bufferobj);
            break;
            }
        case 6:
            {
            return addressOf(this->allpass_tilde_02_feedForward_bufferobj);
            break;
            }
        case 7:
            {
            return addressOf(this->allpass_tilde_02_feedBack_bufferobj);
            break;
            }
        case 8:
            {
            return addressOf(this->allpass_tilde_03_feedForward_bufferobj);
            break;
            }
        case 9:
            {
            return addressOf(this->allpass_tilde_03_feedBack_bufferobj);
            break;
            }
        case 10:
            {
            return addressOf(this->allpass_tilde_04_feedForward_bufferobj);
            break;
            }
        case 11:
            {
            return addressOf(this->allpass_tilde_04_feedBack_bufferobj);
            break;
            }
        case 12:
            {
            return addressOf(this->allpass_tilde_05_feedForward_bufferobj);
            break;
            }
        case 13:
            {
            return addressOf(this->allpass_tilde_05_feedBack_bufferobj);
            break;
            }
        case 14:
            {
            return addressOf(this->allpass_tilde_06_feedForward_bufferobj);
            break;
            }
        case 15:
            {
            return addressOf(this->allpass_tilde_06_feedBack_bufferobj);
            break;
            }
        case 16:
            {
            return addressOf(this->delaytilde_02_del_bufferobj);
            break;
            }
        case 17:
            {
            return addressOf(this->allpass_tilde_07_feedForward_bufferobj);
            break;
            }
        case 18:
            {
            return addressOf(this->allpass_tilde_07_feedBack_bufferobj);
            break;
            }
        case 19:
            {
            return addressOf(this->comb_tilde_16_feedForward_bufferobj);
            break;
            }
        case 20:
            {
            return addressOf(this->comb_tilde_16_feedBack_bufferobj);
            break;
            }
        case 21:
            {
            return addressOf(this->allpass_tilde_08_feedForward_bufferobj);
            break;
            }
        case 22:
            {
            return addressOf(this->allpass_tilde_08_feedBack_bufferobj);
            break;
            }
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 22;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void zeroDataRef(DataRef& ref) {
        ref->setZero();
    }
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 1) {
            this->delaytilde_01_del_buffer = new Float64Buffer(this->delaytilde_01_del_bufferobj);
        }
    
        if (index == 2) {
            this->allpass_tilde_01_feedForward_buffer = new Float64Buffer(this->allpass_tilde_01_feedForward_bufferobj);
        }
    
        if (index == 3) {
            this->allpass_tilde_01_feedBack_buffer = new Float64Buffer(this->allpass_tilde_01_feedBack_bufferobj);
        }
    
        if (index == 4) {
            this->comb_tilde_15_feedForward_buffer = new Float64Buffer(this->comb_tilde_15_feedForward_bufferobj);
        }
    
        if (index == 5) {
            this->comb_tilde_15_feedBack_buffer = new Float64Buffer(this->comb_tilde_15_feedBack_bufferobj);
        }
    
        if (index == 6) {
            this->allpass_tilde_02_feedForward_buffer = new Float64Buffer(this->allpass_tilde_02_feedForward_bufferobj);
        }
    
        if (index == 7) {
            this->allpass_tilde_02_feedBack_buffer = new Float64Buffer(this->allpass_tilde_02_feedBack_bufferobj);
        }
    
        if (index == 8) {
            this->allpass_tilde_03_feedForward_buffer = new Float64Buffer(this->allpass_tilde_03_feedForward_bufferobj);
        }
    
        if (index == 9) {
            this->allpass_tilde_03_feedBack_buffer = new Float64Buffer(this->allpass_tilde_03_feedBack_bufferobj);
        }
    
        if (index == 10) {
            this->allpass_tilde_04_feedForward_buffer = new Float64Buffer(this->allpass_tilde_04_feedForward_bufferobj);
        }
    
        if (index == 11) {
            this->allpass_tilde_04_feedBack_buffer = new Float64Buffer(this->allpass_tilde_04_feedBack_bufferobj);
        }
    
        if (index == 12) {
            this->allpass_tilde_05_feedForward_buffer = new Float64Buffer(this->allpass_tilde_05_feedForward_bufferobj);
        }
    
        if (index == 13) {
            this->allpass_tilde_05_feedBack_buffer = new Float64Buffer(this->allpass_tilde_05_feedBack_bufferobj);
        }
    
        if (index == 14) {
            this->allpass_tilde_06_feedForward_buffer = new Float64Buffer(this->allpass_tilde_06_feedForward_bufferobj);
        }
    
        if (index == 15) {
            this->allpass_tilde_06_feedBack_buffer = new Float64Buffer(this->allpass_tilde_06_feedBack_bufferobj);
        }
    
        if (index == 16) {
            this->delaytilde_02_del_buffer = new Float64Buffer(this->delaytilde_02_del_bufferobj);
        }
    
        if (index == 17) {
            this->allpass_tilde_07_feedForward_buffer = new Float64Buffer(this->allpass_tilde_07_feedForward_bufferobj);
        }
    
        if (index == 18) {
            this->allpass_tilde_07_feedBack_buffer = new Float64Buffer(this->allpass_tilde_07_feedBack_bufferobj);
        }
    
        if (index == 19) {
            this->comb_tilde_16_feedForward_buffer = new Float64Buffer(this->comb_tilde_16_feedForward_bufferobj);
        }
    
        if (index == 20) {
            this->comb_tilde_16_feedBack_buffer = new Float64Buffer(this->comb_tilde_16_feedBack_bufferobj);
        }
    
        if (index == 21) {
            this->allpass_tilde_08_feedForward_buffer = new Float64Buffer(this->allpass_tilde_08_feedForward_bufferobj);
        }
    
        if (index == 22) {
            this->allpass_tilde_08_feedBack_buffer = new Float64Buffer(this->allpass_tilde_08_feedBack_bufferobj);
        }
    
        this->p_01->processDataViewUpdate(index, time);
        this->p_02->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->delaytilde_01_del_bufferobj = initDataRef("delaytilde_01_del_bufferobj", true, nullptr, "buffer~");
        this->allpass_tilde_01_feedForward_bufferobj = initDataRef("allpass_tilde_01_feedForward_bufferobj", true, nullptr, "buffer~");
        this->allpass_tilde_01_feedBack_bufferobj = initDataRef("allpass_tilde_01_feedBack_bufferobj", true, nullptr, "buffer~");
        this->comb_tilde_15_feedForward_bufferobj = initDataRef("comb_tilde_15_feedForward_bufferobj", true, nullptr, "buffer~");
        this->comb_tilde_15_feedBack_bufferobj = initDataRef("comb_tilde_15_feedBack_bufferobj", true, nullptr, "buffer~");
        this->allpass_tilde_02_feedForward_bufferobj = initDataRef("allpass_tilde_02_feedForward_bufferobj", true, nullptr, "buffer~");
        this->allpass_tilde_02_feedBack_bufferobj = initDataRef("allpass_tilde_02_feedBack_bufferobj", true, nullptr, "buffer~");
        this->allpass_tilde_03_feedForward_bufferobj = initDataRef("allpass_tilde_03_feedForward_bufferobj", true, nullptr, "buffer~");
        this->allpass_tilde_03_feedBack_bufferobj = initDataRef("allpass_tilde_03_feedBack_bufferobj", true, nullptr, "buffer~");
        this->allpass_tilde_04_feedForward_bufferobj = initDataRef("allpass_tilde_04_feedForward_bufferobj", true, nullptr, "buffer~");
        this->allpass_tilde_04_feedBack_bufferobj = initDataRef("allpass_tilde_04_feedBack_bufferobj", true, nullptr, "buffer~");
        this->allpass_tilde_05_feedForward_bufferobj = initDataRef("allpass_tilde_05_feedForward_bufferobj", true, nullptr, "buffer~");
        this->allpass_tilde_05_feedBack_bufferobj = initDataRef("allpass_tilde_05_feedBack_bufferobj", true, nullptr, "buffer~");
        this->allpass_tilde_06_feedForward_bufferobj = initDataRef("allpass_tilde_06_feedForward_bufferobj", true, nullptr, "buffer~");
        this->allpass_tilde_06_feedBack_bufferobj = initDataRef("allpass_tilde_06_feedBack_bufferobj", true, nullptr, "buffer~");
        this->delaytilde_02_del_bufferobj = initDataRef("delaytilde_02_del_bufferobj", true, nullptr, "buffer~");
        this->allpass_tilde_07_feedForward_bufferobj = initDataRef("allpass_tilde_07_feedForward_bufferobj", true, nullptr, "buffer~");
        this->allpass_tilde_07_feedBack_bufferobj = initDataRef("allpass_tilde_07_feedBack_bufferobj", true, nullptr, "buffer~");
        this->comb_tilde_16_feedForward_bufferobj = initDataRef("comb_tilde_16_feedForward_bufferobj", true, nullptr, "buffer~");
        this->comb_tilde_16_feedBack_bufferobj = initDataRef("comb_tilde_16_feedBack_bufferobj", true, nullptr, "buffer~");
        this->allpass_tilde_08_feedForward_bufferobj = initDataRef("allpass_tilde_08_feedForward_bufferobj", true, nullptr, "buffer~");
        this->allpass_tilde_08_feedBack_bufferobj = initDataRef("allpass_tilde_08_feedBack_bufferobj", true, nullptr, "buffer~");
        this->assign_defaults();
        this->setState();
        this->delaytilde_01_del_bufferobj->setIndex(1);
        this->delaytilde_01_del_buffer = new Float64Buffer(this->delaytilde_01_del_bufferobj);
        this->allpass_tilde_01_feedForward_bufferobj->setIndex(2);
        this->allpass_tilde_01_feedForward_buffer = new Float64Buffer(this->allpass_tilde_01_feedForward_bufferobj);
        this->allpass_tilde_01_feedBack_bufferobj->setIndex(3);
        this->allpass_tilde_01_feedBack_buffer = new Float64Buffer(this->allpass_tilde_01_feedBack_bufferobj);
        this->comb_tilde_15_feedForward_bufferobj->setIndex(4);
        this->comb_tilde_15_feedForward_buffer = new Float64Buffer(this->comb_tilde_15_feedForward_bufferobj);
        this->comb_tilde_15_feedBack_bufferobj->setIndex(5);
        this->comb_tilde_15_feedBack_buffer = new Float64Buffer(this->comb_tilde_15_feedBack_bufferobj);
        this->allpass_tilde_02_feedForward_bufferobj->setIndex(6);
        this->allpass_tilde_02_feedForward_buffer = new Float64Buffer(this->allpass_tilde_02_feedForward_bufferobj);
        this->allpass_tilde_02_feedBack_bufferobj->setIndex(7);
        this->allpass_tilde_02_feedBack_buffer = new Float64Buffer(this->allpass_tilde_02_feedBack_bufferobj);
        this->allpass_tilde_03_feedForward_bufferobj->setIndex(8);
        this->allpass_tilde_03_feedForward_buffer = new Float64Buffer(this->allpass_tilde_03_feedForward_bufferobj);
        this->allpass_tilde_03_feedBack_bufferobj->setIndex(9);
        this->allpass_tilde_03_feedBack_buffer = new Float64Buffer(this->allpass_tilde_03_feedBack_bufferobj);
        this->allpass_tilde_04_feedForward_bufferobj->setIndex(10);
        this->allpass_tilde_04_feedForward_buffer = new Float64Buffer(this->allpass_tilde_04_feedForward_bufferobj);
        this->allpass_tilde_04_feedBack_bufferobj->setIndex(11);
        this->allpass_tilde_04_feedBack_buffer = new Float64Buffer(this->allpass_tilde_04_feedBack_bufferobj);
        this->allpass_tilde_05_feedForward_bufferobj->setIndex(12);
        this->allpass_tilde_05_feedForward_buffer = new Float64Buffer(this->allpass_tilde_05_feedForward_bufferobj);
        this->allpass_tilde_05_feedBack_bufferobj->setIndex(13);
        this->allpass_tilde_05_feedBack_buffer = new Float64Buffer(this->allpass_tilde_05_feedBack_bufferobj);
        this->allpass_tilde_06_feedForward_bufferobj->setIndex(14);
        this->allpass_tilde_06_feedForward_buffer = new Float64Buffer(this->allpass_tilde_06_feedForward_bufferobj);
        this->allpass_tilde_06_feedBack_bufferobj->setIndex(15);
        this->allpass_tilde_06_feedBack_buffer = new Float64Buffer(this->allpass_tilde_06_feedBack_bufferobj);
        this->delaytilde_02_del_bufferobj->setIndex(16);
        this->delaytilde_02_del_buffer = new Float64Buffer(this->delaytilde_02_del_bufferobj);
        this->allpass_tilde_07_feedForward_bufferobj->setIndex(17);
        this->allpass_tilde_07_feedForward_buffer = new Float64Buffer(this->allpass_tilde_07_feedForward_bufferobj);
        this->allpass_tilde_07_feedBack_bufferobj->setIndex(18);
        this->allpass_tilde_07_feedBack_buffer = new Float64Buffer(this->allpass_tilde_07_feedBack_bufferobj);
        this->comb_tilde_16_feedForward_bufferobj->setIndex(19);
        this->comb_tilde_16_feedForward_buffer = new Float64Buffer(this->comb_tilde_16_feedForward_bufferobj);
        this->comb_tilde_16_feedBack_bufferobj->setIndex(20);
        this->comb_tilde_16_feedBack_buffer = new Float64Buffer(this->comb_tilde_16_feedBack_bufferobj);
        this->allpass_tilde_08_feedForward_bufferobj->setIndex(21);
        this->allpass_tilde_08_feedForward_buffer = new Float64Buffer(this->allpass_tilde_08_feedForward_bufferobj);
        this->allpass_tilde_08_feedBack_bufferobj->setIndex(22);
        this->allpass_tilde_08_feedBack_buffer = new Float64Buffer(this->allpass_tilde_08_feedBack_bufferobj);
    }
    
    protected:
    
    void eventinlet_09_out1_bang_bang() {
        this->numberobj_02_value_bang();
    }
    
    void eventinlet_09_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_02_value_set(converted);
        }
    }
    
    void eventinlet_10_out1_bang_bang() {
        this->numberobj_01_value_bang();
    }
    
    void eventinlet_10_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_01_value_set(converted);
        }
    }
    
    void numberobj_01_valin_set(number v) {
        this->numberobj_01_value_set(v);
    }
    
    void numberobj_01_format_set(number v) {
        this->numberobj_01_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_02_valin_set(number v) {
        this->numberobj_02_value_set(v);
    }
    
    void numberobj_02_format_set(number v) {
        this->numberobj_02_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_03_valin_set(number v) {
        this->numberobj_03_value_set(v);
    }
    
    void numberobj_03_format_set(number v) {
        this->numberobj_03_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_11_out1_bang_bang() {
        this->numberobj_03_value_bang();
    }
    
    void eventinlet_11_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_03_value_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->onepole_tilde_02_freqInHz_set(converted);
        }
    }
    
    void eventinlet_12_out1_bang_bang() {
        this->trigger_05_input_bang_bang();
    }
    
    void eventinlet_12_out1_list_set(const list& v) {
        this->trigger_05_input_list_set(v);
    }
    
    void loadbang_01_startupbang_bang() {
        this->loadbang_01_output_bang();
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 1;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {
        this->delaytilde_01_del_init();
        this->allpass_tilde_01_feedForward_init();
        this->allpass_tilde_01_feedBack_init();
        this->allpass_tilde_01_init();
        this->comb_tilde_15_feedForward_init();
        this->comb_tilde_15_feedBack_init();
        this->comb_tilde_15_init();
        this->allpass_tilde_02_feedForward_init();
        this->allpass_tilde_02_feedBack_init();
        this->allpass_tilde_02_init();
        this->allpass_tilde_03_feedForward_init();
        this->allpass_tilde_03_feedBack_init();
        this->allpass_tilde_03_init();
        this->allpass_tilde_04_feedForward_init();
        this->allpass_tilde_04_feedBack_init();
        this->allpass_tilde_04_init();
        this->allpass_tilde_05_feedForward_init();
        this->allpass_tilde_05_feedBack_init();
        this->allpass_tilde_05_init();
        this->allpass_tilde_06_feedForward_init();
        this->allpass_tilde_06_feedBack_init();
        this->allpass_tilde_06_init();
        this->ip_01_init();
        this->noise_tilde_01_init();
        this->numberobj_01_init();
        this->numberobj_02_init();
        this->numberobj_03_init();
        this->delaytilde_02_del_init();
        this->allpass_tilde_07_feedForward_init();
        this->allpass_tilde_07_feedBack_init();
        this->allpass_tilde_07_init();
        this->comb_tilde_16_feedForward_init();
        this->comb_tilde_16_feedBack_init();
        this->comb_tilde_16_init();
        this->allpass_tilde_08_feedForward_init();
        this->allpass_tilde_08_feedBack_init();
        this->allpass_tilde_08_init();
        this->ip_02_init();
        this->noise_tilde_02_init();
        this->p_01->initializeObjects();
        this->p_02->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_01->startup();
        this->p_02->startup();
        this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
    }
    
    void allocateDataRefs() {
        this->p_01->allocateDataRefs();
        this->p_02->allocateDataRefs();
        this->delaytilde_01_del_buffer = this->delaytilde_01_del_buffer->allocateIfNeeded();
    
        if (this->delaytilde_01_del_bufferobj->hasRequestedSize()) {
            if (this->delaytilde_01_del_bufferobj->wantsFill())
                this->zeroDataRef(this->delaytilde_01_del_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(1);
        }
    
        this->allpass_tilde_01_feedForward_buffer = this->allpass_tilde_01_feedForward_buffer->allocateIfNeeded();
    
        if (this->allpass_tilde_01_feedForward_bufferobj->hasRequestedSize()) {
            if (this->allpass_tilde_01_feedForward_bufferobj->wantsFill())
                this->zeroDataRef(this->allpass_tilde_01_feedForward_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(2);
        }
    
        this->allpass_tilde_01_feedBack_buffer = this->allpass_tilde_01_feedBack_buffer->allocateIfNeeded();
    
        if (this->allpass_tilde_01_feedBack_bufferobj->hasRequestedSize()) {
            if (this->allpass_tilde_01_feedBack_bufferobj->wantsFill())
                this->zeroDataRef(this->allpass_tilde_01_feedBack_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(3);
        }
    
        this->comb_tilde_15_feedForward_buffer = this->comb_tilde_15_feedForward_buffer->allocateIfNeeded();
    
        if (this->comb_tilde_15_feedForward_bufferobj->hasRequestedSize()) {
            if (this->comb_tilde_15_feedForward_bufferobj->wantsFill())
                this->zeroDataRef(this->comb_tilde_15_feedForward_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(4);
        }
    
        this->comb_tilde_15_feedBack_buffer = this->comb_tilde_15_feedBack_buffer->allocateIfNeeded();
    
        if (this->comb_tilde_15_feedBack_bufferobj->hasRequestedSize()) {
            if (this->comb_tilde_15_feedBack_bufferobj->wantsFill())
                this->zeroDataRef(this->comb_tilde_15_feedBack_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(5);
        }
    
        this->allpass_tilde_02_feedForward_buffer = this->allpass_tilde_02_feedForward_buffer->allocateIfNeeded();
    
        if (this->allpass_tilde_02_feedForward_bufferobj->hasRequestedSize()) {
            if (this->allpass_tilde_02_feedForward_bufferobj->wantsFill())
                this->zeroDataRef(this->allpass_tilde_02_feedForward_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(6);
        }
    
        this->allpass_tilde_02_feedBack_buffer = this->allpass_tilde_02_feedBack_buffer->allocateIfNeeded();
    
        if (this->allpass_tilde_02_feedBack_bufferobj->hasRequestedSize()) {
            if (this->allpass_tilde_02_feedBack_bufferobj->wantsFill())
                this->zeroDataRef(this->allpass_tilde_02_feedBack_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(7);
        }
    
        this->allpass_tilde_03_feedForward_buffer = this->allpass_tilde_03_feedForward_buffer->allocateIfNeeded();
    
        if (this->allpass_tilde_03_feedForward_bufferobj->hasRequestedSize()) {
            if (this->allpass_tilde_03_feedForward_bufferobj->wantsFill())
                this->zeroDataRef(this->allpass_tilde_03_feedForward_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(8);
        }
    
        this->allpass_tilde_03_feedBack_buffer = this->allpass_tilde_03_feedBack_buffer->allocateIfNeeded();
    
        if (this->allpass_tilde_03_feedBack_bufferobj->hasRequestedSize()) {
            if (this->allpass_tilde_03_feedBack_bufferobj->wantsFill())
                this->zeroDataRef(this->allpass_tilde_03_feedBack_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(9);
        }
    
        this->allpass_tilde_04_feedForward_buffer = this->allpass_tilde_04_feedForward_buffer->allocateIfNeeded();
    
        if (this->allpass_tilde_04_feedForward_bufferobj->hasRequestedSize()) {
            if (this->allpass_tilde_04_feedForward_bufferobj->wantsFill())
                this->zeroDataRef(this->allpass_tilde_04_feedForward_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(10);
        }
    
        this->allpass_tilde_04_feedBack_buffer = this->allpass_tilde_04_feedBack_buffer->allocateIfNeeded();
    
        if (this->allpass_tilde_04_feedBack_bufferobj->hasRequestedSize()) {
            if (this->allpass_tilde_04_feedBack_bufferobj->wantsFill())
                this->zeroDataRef(this->allpass_tilde_04_feedBack_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(11);
        }
    
        this->allpass_tilde_05_feedForward_buffer = this->allpass_tilde_05_feedForward_buffer->allocateIfNeeded();
    
        if (this->allpass_tilde_05_feedForward_bufferobj->hasRequestedSize()) {
            if (this->allpass_tilde_05_feedForward_bufferobj->wantsFill())
                this->zeroDataRef(this->allpass_tilde_05_feedForward_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(12);
        }
    
        this->allpass_tilde_05_feedBack_buffer = this->allpass_tilde_05_feedBack_buffer->allocateIfNeeded();
    
        if (this->allpass_tilde_05_feedBack_bufferobj->hasRequestedSize()) {
            if (this->allpass_tilde_05_feedBack_bufferobj->wantsFill())
                this->zeroDataRef(this->allpass_tilde_05_feedBack_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(13);
        }
    
        this->allpass_tilde_06_feedForward_buffer = this->allpass_tilde_06_feedForward_buffer->allocateIfNeeded();
    
        if (this->allpass_tilde_06_feedForward_bufferobj->hasRequestedSize()) {
            if (this->allpass_tilde_06_feedForward_bufferobj->wantsFill())
                this->zeroDataRef(this->allpass_tilde_06_feedForward_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(14);
        }
    
        this->allpass_tilde_06_feedBack_buffer = this->allpass_tilde_06_feedBack_buffer->allocateIfNeeded();
    
        if (this->allpass_tilde_06_feedBack_bufferobj->hasRequestedSize()) {
            if (this->allpass_tilde_06_feedBack_bufferobj->wantsFill())
                this->zeroDataRef(this->allpass_tilde_06_feedBack_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(15);
        }
    
        this->delaytilde_02_del_buffer = this->delaytilde_02_del_buffer->allocateIfNeeded();
    
        if (this->delaytilde_02_del_bufferobj->hasRequestedSize()) {
            if (this->delaytilde_02_del_bufferobj->wantsFill())
                this->zeroDataRef(this->delaytilde_02_del_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(16);
        }
    
        this->allpass_tilde_07_feedForward_buffer = this->allpass_tilde_07_feedForward_buffer->allocateIfNeeded();
    
        if (this->allpass_tilde_07_feedForward_bufferobj->hasRequestedSize()) {
            if (this->allpass_tilde_07_feedForward_bufferobj->wantsFill())
                this->zeroDataRef(this->allpass_tilde_07_feedForward_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(17);
        }
    
        this->allpass_tilde_07_feedBack_buffer = this->allpass_tilde_07_feedBack_buffer->allocateIfNeeded();
    
        if (this->allpass_tilde_07_feedBack_bufferobj->hasRequestedSize()) {
            if (this->allpass_tilde_07_feedBack_bufferobj->wantsFill())
                this->zeroDataRef(this->allpass_tilde_07_feedBack_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(18);
        }
    
        this->comb_tilde_16_feedForward_buffer = this->comb_tilde_16_feedForward_buffer->allocateIfNeeded();
    
        if (this->comb_tilde_16_feedForward_bufferobj->hasRequestedSize()) {
            if (this->comb_tilde_16_feedForward_bufferobj->wantsFill())
                this->zeroDataRef(this->comb_tilde_16_feedForward_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(19);
        }
    
        this->comb_tilde_16_feedBack_buffer = this->comb_tilde_16_feedBack_buffer->allocateIfNeeded();
    
        if (this->comb_tilde_16_feedBack_bufferobj->hasRequestedSize()) {
            if (this->comb_tilde_16_feedBack_bufferobj->wantsFill())
                this->zeroDataRef(this->comb_tilde_16_feedBack_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(20);
        }
    
        this->allpass_tilde_08_feedForward_buffer = this->allpass_tilde_08_feedForward_buffer->allocateIfNeeded();
    
        if (this->allpass_tilde_08_feedForward_bufferobj->hasRequestedSize()) {
            if (this->allpass_tilde_08_feedForward_bufferobj->wantsFill())
                this->zeroDataRef(this->allpass_tilde_08_feedForward_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(21);
        }
    
        this->allpass_tilde_08_feedBack_buffer = this->allpass_tilde_08_feedBack_buffer->allocateIfNeeded();
    
        if (this->allpass_tilde_08_feedBack_bufferobj->hasRequestedSize()) {
            if (this->allpass_tilde_08_feedBack_bufferobj->wantsFill())
                this->zeroDataRef(this->allpass_tilde_08_feedBack_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(22);
        }
    }
    
    void p_02_in8_number_set(number v) {
        this->p_02->updateTime(this->_currentTime);
        this->p_02->eventinlet_08_out1_number_set(v);
    }
    
    void p_01_in8_number_set(number v) {
        this->p_01->updateTime(this->_currentTime);
        this->p_01->eventinlet_07_out1_number_set(v);
    }
    
    void expr_41_out1_set(number v) {
        this->expr_41_out1 = v;
        this->p_02_in8_number_set(this->expr_41_out1);
        this->p_01_in8_number_set(this->expr_41_out1);
    }
    
    void expr_41_in1_set(number in1) {
        this->expr_41_in1 = in1;
        this->expr_41_out1_set(this->expr_41_in1 * this->expr_41_in2);//#map:reverb/*_obj-57:1
    }
    
    void delaytilde_02_delay_set(number v) {
        this->delaytilde_02_delay = v;
    }
    
    void expr_39_out1_set(number v) {
        this->expr_39_out1 = v;
        this->delaytilde_02_delay_set(this->expr_39_out1);
    }
    
    void expr_39_in1_set(number in1) {
        this->expr_39_in1 = in1;
        this->expr_39_out1_set(this->expr_39_in1 * this->expr_39_in2);//#map:reverb/*_obj-80:1
    }
    
    void expr_40_out1_set(number v) {
        this->expr_40_out1 = v;
        this->expr_39_in1_set(this->expr_40_out1);
    }
    
    void expr_40_in1_set(number in1) {
        this->expr_40_in1 = in1;
        this->expr_40_out1_set(this->expr_40_in1 * this->expr_40_in2);//#map:reverb/*_obj-50:1
    }
    
    void allpass_tilde_07_delayTime_set(number v) {
        this->allpass_tilde_07_delayTime = v;
    }
    
    void expr_37_out1_set(number v) {
        this->expr_37_out1 = v;
        this->allpass_tilde_07_delayTime_set(this->expr_37_out1);
    }
    
    void expr_37_in1_set(number in1) {
        this->expr_37_in1 = in1;
        this->expr_37_out1_set(this->expr_37_in1 * this->expr_37_in2);//#map:reverb/*_obj-44:1
    }
    
    void allpass_tilde_08_delayTime_set(number v) {
        this->allpass_tilde_08_delayTime = v;
    }
    
    void expr_38_out1_set(number v) {
        this->expr_38_out1 = v;
        this->allpass_tilde_08_delayTime_set(this->expr_38_out1);
    }
    
    void expr_38_in1_set(number in1) {
        this->expr_38_in1 = in1;
        this->expr_38_out1_set(this->expr_38_in1 * this->expr_38_in2);//#map:reverb/*_obj-24:1
    }
    
    void ip_02_value_set(number v) {
        this->ip_02_value = v;
        this->ip_02_fillSigBuf();
        this->ip_02_lastValue = v;
    }
    
    void expr_36_out1_set(number v) {
        this->expr_36_out1 = v;
        this->ip_02_value_set(this->expr_36_out1);
    }
    
    void expr_36_in1_set(number in1) {
        this->expr_36_in1 = in1;
        this->expr_36_out1_set(this->expr_36_in1 * this->expr_36_in2);//#map:reverb/*_obj-34:1
    }
    
    void delaytilde_01_delay_set(number v) {
        this->delaytilde_01_delay = v;
    }
    
    void expr_34_out1_set(number v) {
        this->expr_34_out1 = v;
        this->delaytilde_01_delay_set(this->expr_34_out1);
    }
    
    void expr_34_in1_set(number in1) {
        this->expr_34_in1 = in1;
        this->expr_34_out1_set(this->expr_34_in1 * this->expr_34_in2);//#map:reverb/*_obj-91:1
    }
    
    void expr_35_out1_set(number v) {
        this->expr_35_out1 = v;
        this->expr_34_in1_set(this->expr_35_out1);
    }
    
    void expr_35_in1_set(number in1) {
        this->expr_35_in1 = in1;
        this->expr_35_out1_set(this->expr_35_in1 * this->expr_35_in2);//#map:reverb/*_obj-47:1
    }
    
    void allpass_tilde_01_delayTime_set(number v) {
        this->allpass_tilde_01_delayTime = v;
    }
    
    void expr_32_out1_set(number v) {
        this->expr_32_out1 = v;
        this->allpass_tilde_01_delayTime_set(this->expr_32_out1);
    }
    
    void expr_32_in1_set(number in1) {
        this->expr_32_in1 = in1;
        this->expr_32_out1_set(this->expr_32_in1 * this->expr_32_in2);//#map:reverb/*_obj-40:1
    }
    
    void allpass_tilde_02_delayTime_set(number v) {
        this->allpass_tilde_02_delayTime = v;
    }
    
    void expr_33_out1_set(number v) {
        this->expr_33_out1 = v;
        this->allpass_tilde_02_delayTime_set(this->expr_33_out1);
    }
    
    void expr_33_in1_set(number in1) {
        this->expr_33_in1 = in1;
        this->expr_33_out1_set(this->expr_33_in1 * this->expr_33_in2);//#map:reverb/*_obj-23:1
    }
    
    void ip_01_value_set(number v) {
        this->ip_01_value = v;
        this->ip_01_fillSigBuf();
        this->ip_01_lastValue = v;
    }
    
    void expr_31_out1_set(number v) {
        this->expr_31_out1 = v;
        this->ip_01_value_set(this->expr_31_out1);
    }
    
    void expr_31_in1_set(number in1) {
        this->expr_31_in1 = in1;
        this->expr_31_out1_set(this->expr_31_in1 * this->expr_31_in2);//#map:reverb/*_obj-29:1
    }
    
    void numberobj_02_output_set(number v) {
        this->expr_41_in1_set(v);
        this->expr_40_in1_set(v);
        this->expr_37_in1_set(v);
        this->expr_38_in1_set(v);
        this->expr_36_in1_set(v);
        this->expr_35_in1_set(v);
        this->expr_32_in1_set(v);
        this->expr_33_in1_set(v);
        this->expr_31_in1_set(v);
    }
    
    void numberobj_02_value_set(number v) {
        this->numberobj_02_value_setter(v);
        v = this->numberobj_02_value;
        number localvalue = v;
    
        if (this->numberobj_02_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("reverb/number_obj-14"), localvalue, this->_currentTime);
        this->numberobj_02_output_set(localvalue);
    }
    
    void eventinlet_09_out1_number_set(number v) {
        this->numberobj_02_value_set(v);
    }
    
    void dspexpr_07_in2_set(number v) {
        this->dspexpr_07_in2 = v;
    }
    
    void dspexpr_05_in2_set(number v) {
        this->dspexpr_05_in2 = v;
    }
    
    void numberobj_01_output_set(number v) {
        this->dspexpr_07_in2_set(v);
        this->dspexpr_05_in2_set(v);
    }
    
    void numberobj_01_value_set(number v) {
        this->numberobj_01_value_setter(v);
        v = this->numberobj_01_value;
        number localvalue = v;
    
        if (this->numberobj_01_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("reverb/number_obj-15"), localvalue, this->_currentTime);
        this->numberobj_01_output_set(localvalue);
    }
    
    void eventinlet_10_out1_number_set(number v) {
        this->numberobj_01_value_set(v);
    }
    
    void onepole_tilde_03_freqInHz_set(number v) {
        this->onepole_tilde_03_freqInHz = v;
    }
    
    void onepole_tilde_01_freqInHz_set(number v) {
        this->onepole_tilde_01_freqInHz = v;
    }
    
    void numberobj_03_output_set(number v) {
        this->onepole_tilde_03_freqInHz_set(v);
        this->onepole_tilde_01_freqInHz_set(v);
    }
    
    void numberobj_03_value_set(number v) {
        this->numberobj_03_value_setter(v);
        v = this->numberobj_03_value;
        number localvalue = v;
    
        if (this->numberobj_03_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("reverb/number_obj-16"), localvalue, this->_currentTime);
        this->numberobj_03_output_set(localvalue);
    }
    
    void onepole_tilde_02_freqInHz_set(number v) {
        this->onepole_tilde_02_freqInHz = v;
    }
    
    void eventinlet_11_out1_number_set(number v) {
        this->numberobj_03_value_set(v);
        this->onepole_tilde_02_freqInHz_set(v);
    }
    
    void expr_41_in2_set(number v) {
        this->expr_41_in2 = v;
    }
    
    void trigger_05_out2_set(number v) {
        this->expr_41_in2_set(v);
    }
    
    void expr_41_in1_bang() {
        this->expr_41_out1_set(this->expr_41_in1 * this->expr_41_in2);//#map:reverb/*_obj-57:1
    }
    
    void trigger_05_out1_bang() {
        this->expr_41_in1_bang();
    }
    
    void trigger_05_input_number_set(number v) {
        this->trigger_05_out2_set(v);
        this->trigger_05_out1_bang();
    }
    
    void eventinlet_12_out1_number_set(number v) {
        this->trigger_05_input_number_set(v);
    }
    
    void numberobj_02_value_bang() {
        number v = this->numberobj_02_value;
        number localvalue = v;
    
        if (this->numberobj_02_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("reverb/number_obj-14"), localvalue, this->_currentTime);
        this->numberobj_02_output_set(localvalue);
    }
    
    void numberobj_01_value_bang() {
        number v = this->numberobj_01_value;
        number localvalue = v;
    
        if (this->numberobj_01_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("reverb/number_obj-15"), localvalue, this->_currentTime);
        this->numberobj_01_output_set(localvalue);
    }
    
    void numberobj_03_value_bang() {
        number v = this->numberobj_03_value;
        number localvalue = v;
    
        if (this->numberobj_03_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("reverb/number_obj-16"), localvalue, this->_currentTime);
        this->numberobj_03_output_set(localvalue);
    }
    
    void trigger_05_input_bang_bang() {
        this->trigger_05_out2_set(0);
        this->trigger_05_out1_bang();
    }
    
    void trigger_05_input_list_set(const list& v) {
        this->trigger_05_out2_set((v->length > 0 ? v[0] : 0));
        this->trigger_05_out1_bang();
    }
    
    void expr_39_in2_set(number v) {
        this->expr_39_in2 = v;
    }
    
    void expr_34_in2_set(number v) {
        this->expr_34_in2 = v;
    }
    
    void expr_42_out1_set(number v) {
        this->expr_42_out1 = v;
        this->expr_39_in2_set(this->expr_42_out1);
        this->expr_34_in2_set(this->expr_42_out1);
    }
    
    void expr_42_in1_set(number in1) {
        this->expr_42_in1 = in1;
    
        this->expr_42_out1_set(
            (this->expr_42_in2 == 0 ? 0 : (this->expr_42_in2 == 0. ? 0. : this->expr_42_in1 / this->expr_42_in2))
        );//#map:reverb//_obj-78:1
    }
    
    void samplerate_01_samplerate_set(number v) {
        this->samplerate_01_samplerate = v;
        this->expr_42_in1_set(v);
    }
    
    void samplerate_01_input_bang() {
        this->samplerate_01_samplerate_set(this->samplerate());
    }
    
    void loadbang_01_output_bang() {
        this->samplerate_01_input_bang();
    }
    
    void onepole_tilde_02_perform(const Sample * x, number freqInHz, SampleValue * out1, Index n) {
        auto __onepole_tilde_02_lastY = this->onepole_tilde_02_lastY;
        auto __onepole_tilde_02_b1 = this->onepole_tilde_02_b1;
        auto __onepole_tilde_02_a0 = this->onepole_tilde_02_a0;
        auto __onepole_tilde_02_needsUpdate = this->onepole_tilde_02_needsUpdate;
        auto __onepole_tilde_02_freq = this->onepole_tilde_02_freq;
        Index i;
    
        for (i = 0; i < n; i++) {
            if (__onepole_tilde_02_freq != freqInHz || (bool)(__onepole_tilde_02_needsUpdate)) {
                __onepole_tilde_02_freq = freqInHz;
                __onepole_tilde_02_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz / this->sr);
                __onepole_tilde_02_a0 = (__onepole_tilde_02_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_02_a0 < 0.00001 ? 0.00001 : __onepole_tilde_02_a0));
                __onepole_tilde_02_b1 = 1 - __onepole_tilde_02_a0;
                __onepole_tilde_02_needsUpdate = false;
            }
    
            __onepole_tilde_02_lastY = __onepole_tilde_02_a0 * x[(Index)i] + __onepole_tilde_02_b1 * __onepole_tilde_02_lastY;
            out1[(Index)i] = __onepole_tilde_02_lastY;
        }
    
        this->onepole_tilde_02_freq = __onepole_tilde_02_freq;
        this->onepole_tilde_02_needsUpdate = __onepole_tilde_02_needsUpdate;
        this->onepole_tilde_02_a0 = __onepole_tilde_02_a0;
        this->onepole_tilde_02_b1 = __onepole_tilde_02_b1;
        this->onepole_tilde_02_lastY = __onepole_tilde_02_lastY;
    }
    
    void allpass_tilde_06_perform(
        const Sample * x,
        number delayTime,
        number gain,
        SampleValue * out1,
        Index n
    ) {
        RNBO_UNUSED(delayTime);
        Index i;
    
        for (i = 0; i < n; i++) {
            number __gain = gain;
            auto delayTimeinSamps = this->mstosamps(10);
            delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
            __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
            number ff = this->allpass_tilde_06_feedForward_read(delayTimeinSamps, 0);
            number fb = this->allpass_tilde_06_feedBack_read(delayTimeinSamps, 0);
            number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
            fixdenorm(ov);
            this->allpass_tilde_06_feedForward_write(x[(Index)i]);
            this->allpass_tilde_06_feedBack_write(ov);
            this->allpass_tilde_06_feedForward_step();
            this->allpass_tilde_06_feedBack_step();
            out1[(Index)i] = ov;
        }
    }
    
    void allpass_tilde_05_perform(
        const Sample * x,
        number delayTime,
        number gain,
        SampleValue * out1,
        Index n
    ) {
        RNBO_UNUSED(delayTime);
        Index i;
    
        for (i = 0; i < n; i++) {
            number __gain = gain;
            auto delayTimeinSamps = this->mstosamps(10);
            delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
            __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
            number ff = this->allpass_tilde_05_feedForward_read(delayTimeinSamps, 0);
            number fb = this->allpass_tilde_05_feedBack_read(delayTimeinSamps, 0);
            number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
            fixdenorm(ov);
            this->allpass_tilde_05_feedForward_write(x[(Index)i]);
            this->allpass_tilde_05_feedBack_write(ov);
            this->allpass_tilde_05_feedForward_step();
            this->allpass_tilde_05_feedBack_step();
            out1[(Index)i] = ov;
        }
    }
    
    void allpass_tilde_04_perform(
        const Sample * x,
        number delayTime,
        number gain,
        SampleValue * out1,
        Index n
    ) {
        RNBO_UNUSED(delayTime);
        Index i;
    
        for (i = 0; i < n; i++) {
            number __gain = gain;
            auto delayTimeinSamps = this->mstosamps(20);
            delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
            __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
            number ff = this->allpass_tilde_04_feedForward_read(delayTimeinSamps, 0);
            number fb = this->allpass_tilde_04_feedBack_read(delayTimeinSamps, 0);
            number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
            fixdenorm(ov);
            this->allpass_tilde_04_feedForward_write(x[(Index)i]);
            this->allpass_tilde_04_feedBack_write(ov);
            this->allpass_tilde_04_feedForward_step();
            this->allpass_tilde_04_feedBack_step();
            out1[(Index)i] = ov;
        }
    }
    
    void allpass_tilde_03_perform(
        const Sample * x,
        number delayTime,
        number gain,
        SampleValue * out1,
        Index n
    ) {
        RNBO_UNUSED(delayTime);
        Index i;
    
        for (i = 0; i < n; i++) {
            number __gain = gain;
            auto delayTimeinSamps = this->mstosamps(20);
            delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
            __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
            number ff = this->allpass_tilde_03_feedForward_read(delayTimeinSamps, 0);
            number fb = this->allpass_tilde_03_feedBack_read(delayTimeinSamps, 0);
            number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
            fixdenorm(ov);
            this->allpass_tilde_03_feedForward_write(x[(Index)i]);
            this->allpass_tilde_03_feedBack_write(ov);
            this->allpass_tilde_03_feedForward_step();
            this->allpass_tilde_03_feedBack_step();
            out1[(Index)i] = ov;
        }
    }
    
    void ip_01_perform(SampleValue * out, Index n) {
        auto __ip_01_lastValue = this->ip_01_lastValue;
        auto __ip_01_lastIndex = this->ip_01_lastIndex;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = ((SampleIndex)(i) >= __ip_01_lastIndex ? __ip_01_lastValue : this->ip_01_sigbuf[(Index)i]);
        }
    
        __ip_01_lastIndex = 0;
        this->ip_01_lastIndex = __ip_01_lastIndex;
    }
    
    void noise_tilde_01_perform(SampleValue * out1, Index n) {
        auto __noise_tilde_01_state = this->noise_tilde_01_state;
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = xoshiro_next(__noise_tilde_01_state);
        }
    }
    
    void lores_01_perform(
        number cutoff,
        number resonance,
        const SampleValue * input,
        SampleValue * out,
        Index n
    ) {
        RNBO_UNUSED(resonance);
        RNBO_UNUSED(cutoff);
        auto __lores_01_y_2 = this->lores_01_y_2;
        auto __lores_01_y_1 = this->lores_01_y_1;
        auto __lores_01_x_0 = this->lores_01_x_0;
        auto __lores_01_b_0 = this->lores_01_b_0;
        auto __lores_01_a_1 = this->lores_01_a_1;
        auto __lores_01_a_2 = this->lores_01_a_2;
        auto __lores_01_last_freq_calc = this->lores_01_last_freq_calc;
        auto __lores_01_last_res_calc = this->lores_01_last_res_calc;
        auto __lores_01_last_frequency = this->lores_01_last_frequency;
        auto __lores_01_last_resonance = this->lores_01_last_resonance;
    
        for (Index i = 0; i < n; i++) {
            if (0.995 != __lores_01_last_resonance || 0 != __lores_01_last_frequency) {
                __lores_01_last_res_calc = rnbo_exp(0.995 * 0.125) * 0.882497;
                __lores_01_last_freq_calc = rnbo_cos(2.0 * pi01() / this->sr * 0);
                __lores_01_last_resonance = 0.995;
                __lores_01_last_frequency = 0;
            }
    
            number res_temp = __lores_01_last_res_calc;
            number freq_temp = __lores_01_last_freq_calc;
            __lores_01_a_2 = res_temp * res_temp;
            __lores_01_a_1 = -2.0 * res_temp * freq_temp;
            __lores_01_b_0 = 1.0 + __lores_01_a_1 + __lores_01_a_2;
            __lores_01_x_0 = input[(Index)i];
            number y_0 = __lores_01_x_0 * __lores_01_b_0 - __lores_01_y_1 * __lores_01_a_1 - __lores_01_y_2 * __lores_01_a_2;
            __lores_01_y_2 = __lores_01_y_1;
            __lores_01_y_1 = y_0;
            out[(Index)i] = y_0;
        }
    
        this->lores_01_last_resonance = __lores_01_last_resonance;
        this->lores_01_last_frequency = __lores_01_last_frequency;
        this->lores_01_last_res_calc = __lores_01_last_res_calc;
        this->lores_01_last_freq_calc = __lores_01_last_freq_calc;
        this->lores_01_a_2 = __lores_01_a_2;
        this->lores_01_a_1 = __lores_01_a_1;
        this->lores_01_b_0 = __lores_01_b_0;
        this->lores_01_x_0 = __lores_01_x_0;
        this->lores_01_y_1 = __lores_01_y_1;
        this->lores_01_y_2 = __lores_01_y_2;
    }
    
    void dspexpr_06_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        RNBO_UNUSED(in2);
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * 20;//#map:_###_obj_###_:1
        }
    }
    
    void ip_02_perform(SampleValue * out, Index n) {
        auto __ip_02_lastValue = this->ip_02_lastValue;
        auto __ip_02_lastIndex = this->ip_02_lastIndex;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = ((SampleIndex)(i) >= __ip_02_lastIndex ? __ip_02_lastValue : this->ip_02_sigbuf[(Index)i]);
        }
    
        __ip_02_lastIndex = 0;
        this->ip_02_lastIndex = __ip_02_lastIndex;
    }
    
    void noise_tilde_02_perform(SampleValue * out1, Index n) {
        auto __noise_tilde_02_state = this->noise_tilde_02_state;
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = xoshiro_next(__noise_tilde_02_state);
        }
    }
    
    void lores_02_perform(
        number cutoff,
        number resonance,
        const SampleValue * input,
        SampleValue * out,
        Index n
    ) {
        RNBO_UNUSED(resonance);
        RNBO_UNUSED(cutoff);
        auto __lores_02_y_2 = this->lores_02_y_2;
        auto __lores_02_y_1 = this->lores_02_y_1;
        auto __lores_02_x_0 = this->lores_02_x_0;
        auto __lores_02_b_0 = this->lores_02_b_0;
        auto __lores_02_a_1 = this->lores_02_a_1;
        auto __lores_02_a_2 = this->lores_02_a_2;
        auto __lores_02_last_freq_calc = this->lores_02_last_freq_calc;
        auto __lores_02_last_res_calc = this->lores_02_last_res_calc;
        auto __lores_02_last_frequency = this->lores_02_last_frequency;
        auto __lores_02_last_resonance = this->lores_02_last_resonance;
    
        for (Index i = 0; i < n; i++) {
            if (0.995 != __lores_02_last_resonance || 0 != __lores_02_last_frequency) {
                __lores_02_last_res_calc = rnbo_exp(0.995 * 0.125) * 0.882497;
                __lores_02_last_freq_calc = rnbo_cos(2.0 * pi01() / this->sr * 0);
                __lores_02_last_resonance = 0.995;
                __lores_02_last_frequency = 0;
            }
    
            number res_temp = __lores_02_last_res_calc;
            number freq_temp = __lores_02_last_freq_calc;
            __lores_02_a_2 = res_temp * res_temp;
            __lores_02_a_1 = -2.0 * res_temp * freq_temp;
            __lores_02_b_0 = 1.0 + __lores_02_a_1 + __lores_02_a_2;
            __lores_02_x_0 = input[(Index)i];
            number y_0 = __lores_02_x_0 * __lores_02_b_0 - __lores_02_y_1 * __lores_02_a_1 - __lores_02_y_2 * __lores_02_a_2;
            __lores_02_y_2 = __lores_02_y_1;
            __lores_02_y_1 = y_0;
            out[(Index)i] = y_0;
        }
    
        this->lores_02_last_resonance = __lores_02_last_resonance;
        this->lores_02_last_frequency = __lores_02_last_frequency;
        this->lores_02_last_res_calc = __lores_02_last_res_calc;
        this->lores_02_last_freq_calc = __lores_02_last_freq_calc;
        this->lores_02_a_2 = __lores_02_a_2;
        this->lores_02_a_1 = __lores_02_a_1;
        this->lores_02_b_0 = __lores_02_b_0;
        this->lores_02_x_0 = __lores_02_x_0;
        this->lores_02_y_1 = __lores_02_y_1;
        this->lores_02_y_2 = __lores_02_y_2;
    }
    
    void dspexpr_08_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        RNBO_UNUSED(in2);
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * 20;//#map:_###_obj_###_:1
        }
    }
    
    void feedbackreader_01_perform(SampleValue * output, Index n) {
        auto& buffer = this->feedbacktilde_01_feedbackbuffer;
    
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = buffer[(Index)i];
        }
    }
    
    void signaladder_05_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void allpass_tilde_02_perform(
        const Sample * x,
        number delayTime,
        number gain,
        SampleValue * out1,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            number __gain = gain;
            auto delayTimeinSamps = this->mstosamps(delayTime);
            delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
            __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
            number ff = this->allpass_tilde_02_feedForward_read(delayTimeinSamps, 0);
            number fb = this->allpass_tilde_02_feedBack_read(delayTimeinSamps, 0);
            number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
            fixdenorm(ov);
            this->allpass_tilde_02_feedForward_write(x[(Index)i]);
            this->allpass_tilde_02_feedBack_write(ov);
            this->allpass_tilde_02_feedForward_step();
            this->allpass_tilde_02_feedBack_step();
            out1[(Index)i] = ov;
        }
    }
    
    void signaladder_06_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void comb_tilde_15_perform(
        const Sample * x,
        const Sample * delayTime,
        number gain,
        number ffGain,
        number fbGain,
        SampleValue * out1,
        Index n
    ) {
        RNBO_UNUSED(ffGain);
        RNBO_UNUSED(gain);
        Index i;
    
        for (i = 0; i < n; i++) {
            number __fbGain = fbGain;
            number __ffGain = 0;
            number __gain = 149.6;
            number __delayTime = delayTime[(Index)i];
            __delayTime = this->mstosamps(__delayTime);
            __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
            __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
            __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
            __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
            number tmp = x[(Index)i] * __gain;
            number ff = this->comb_tilde_15_feedForward_read(__delayTime, 0);
            number fb = this->comb_tilde_15_feedBack_read(__delayTime, 0);
            number ov = tmp + ff * __ffGain + fb * __fbGain;
            fixdenorm(ov);
            this->comb_tilde_15_feedForward_write(x[(Index)i]);
            this->comb_tilde_15_feedBack_write(ov);
            this->comb_tilde_15_feedForward_step();
            this->comb_tilde_15_feedBack_step();
            out1[(Index)i] = ov;
        }
    }
    
    void onepole_tilde_01_perform(const Sample * x, number freqInHz, SampleValue * out1, Index n) {
        auto __onepole_tilde_01_lastY = this->onepole_tilde_01_lastY;
        auto __onepole_tilde_01_b1 = this->onepole_tilde_01_b1;
        auto __onepole_tilde_01_a0 = this->onepole_tilde_01_a0;
        auto __onepole_tilde_01_needsUpdate = this->onepole_tilde_01_needsUpdate;
        auto __onepole_tilde_01_freq = this->onepole_tilde_01_freq;
        Index i;
    
        for (i = 0; i < n; i++) {
            if (__onepole_tilde_01_freq != freqInHz || (bool)(__onepole_tilde_01_needsUpdate)) {
                __onepole_tilde_01_freq = freqInHz;
                __onepole_tilde_01_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz / this->sr);
                __onepole_tilde_01_a0 = (__onepole_tilde_01_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_01_a0 < 0.00001 ? 0.00001 : __onepole_tilde_01_a0));
                __onepole_tilde_01_b1 = 1 - __onepole_tilde_01_a0;
                __onepole_tilde_01_needsUpdate = false;
            }
    
            __onepole_tilde_01_lastY = __onepole_tilde_01_a0 * x[(Index)i] + __onepole_tilde_01_b1 * __onepole_tilde_01_lastY;
            out1[(Index)i] = __onepole_tilde_01_lastY;
        }
    
        this->onepole_tilde_01_freq = __onepole_tilde_01_freq;
        this->onepole_tilde_01_needsUpdate = __onepole_tilde_01_needsUpdate;
        this->onepole_tilde_01_a0 = __onepole_tilde_01_a0;
        this->onepole_tilde_01_b1 = __onepole_tilde_01_b1;
        this->onepole_tilde_01_lastY = __onepole_tilde_01_lastY;
    }
    
    void dspexpr_05_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void allpass_tilde_01_perform(
        const Sample * x,
        number delayTime,
        number gain,
        SampleValue * out1,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            number __gain = gain;
            auto delayTimeinSamps = this->mstosamps(delayTime);
            delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
            __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
            number ff = this->allpass_tilde_01_feedForward_read(delayTimeinSamps, 0);
            number fb = this->allpass_tilde_01_feedBack_read(delayTimeinSamps, 0);
            number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
            fixdenorm(ov);
            this->allpass_tilde_01_feedForward_write(x[(Index)i]);
            this->allpass_tilde_01_feedBack_write(ov);
            this->allpass_tilde_01_feedForward_step();
            this->allpass_tilde_01_feedBack_step();
            out1[(Index)i] = ov;
        }
    }
    
    void delaytilde_01_perform(number delay, const SampleValue * input, SampleValue * output, Index n) {
        auto __delaytilde_01_crossfadeDelay = this->delaytilde_01_crossfadeDelay;
        auto __delaytilde_01_rampInSamples = this->delaytilde_01_rampInSamples;
        auto __delaytilde_01_ramp = this->delaytilde_01_ramp;
        auto __delaytilde_01_lastDelay = this->delaytilde_01_lastDelay;
    
        for (Index i = 0; i < n; i++) {
            if (__delaytilde_01_lastDelay == -1) {
                __delaytilde_01_lastDelay = delay;
            }
    
            if (__delaytilde_01_ramp > 0) {
                number factor = __delaytilde_01_ramp / __delaytilde_01_rampInSamples;
                output[(Index)i] = this->delaytilde_01_del_read(__delaytilde_01_crossfadeDelay, 0) * factor + this->delaytilde_01_del_read(__delaytilde_01_lastDelay, 0) * (1. - factor);
                __delaytilde_01_ramp--;
            } else {
                number effectiveDelay = delay;
    
                if (effectiveDelay != __delaytilde_01_lastDelay) {
                    __delaytilde_01_ramp = __delaytilde_01_rampInSamples;
                    __delaytilde_01_crossfadeDelay = __delaytilde_01_lastDelay;
                    __delaytilde_01_lastDelay = effectiveDelay;
                    output[(Index)i] = this->delaytilde_01_del_read(__delaytilde_01_crossfadeDelay, 0);
                    __delaytilde_01_ramp--;
                } else {
                    output[(Index)i] = this->delaytilde_01_del_read(effectiveDelay, 0);
                }
            }
    
            this->delaytilde_01_del_write(input[(Index)i]);
            this->delaytilde_01_del_step();
        }
    
        this->delaytilde_01_lastDelay = __delaytilde_01_lastDelay;
        this->delaytilde_01_ramp = __delaytilde_01_ramp;
        this->delaytilde_01_crossfadeDelay = __delaytilde_01_crossfadeDelay;
    }
    
    void feedbackwriter_01_perform(const SampleValue * input, Index n) {
        auto& buffer = this->feedbacktilde_01_feedbackbuffer;
    
        for (Index i = 0; i < n; i++) {
            buffer[(Index)i] = input[(Index)i];
        }
    }
    
    void feedbackreader_02_perform(SampleValue * output, Index n) {
        auto& buffer = this->feedbacktilde_02_feedbackbuffer;
    
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = buffer[(Index)i];
        }
    }
    
    void signaladder_07_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void allpass_tilde_08_perform(
        const Sample * x,
        number delayTime,
        number gain,
        SampleValue * out1,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            number __gain = gain;
            auto delayTimeinSamps = this->mstosamps(delayTime);
            delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
            __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
            number ff = this->allpass_tilde_08_feedForward_read(delayTimeinSamps, 0);
            number fb = this->allpass_tilde_08_feedBack_read(delayTimeinSamps, 0);
            number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
            fixdenorm(ov);
            this->allpass_tilde_08_feedForward_write(x[(Index)i]);
            this->allpass_tilde_08_feedBack_write(ov);
            this->allpass_tilde_08_feedForward_step();
            this->allpass_tilde_08_feedBack_step();
            out1[(Index)i] = ov;
        }
    }
    
    void signaladder_08_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void comb_tilde_16_perform(
        const Sample * x,
        const Sample * delayTime,
        number gain,
        number ffGain,
        number fbGain,
        SampleValue * out1,
        Index n
    ) {
        RNBO_UNUSED(ffGain);
        RNBO_UNUSED(gain);
        Index i;
    
        for (i = 0; i < n; i++) {
            number __fbGain = fbGain;
            number __ffGain = 0;
            number __gain = 141.7;
            number __delayTime = delayTime[(Index)i];
            __delayTime = this->mstosamps(__delayTime);
            __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
            __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
            __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
            __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
            number tmp = x[(Index)i] * __gain;
            number ff = this->comb_tilde_16_feedForward_read(__delayTime, 0);
            number fb = this->comb_tilde_16_feedBack_read(__delayTime, 0);
            number ov = tmp + ff * __ffGain + fb * __fbGain;
            fixdenorm(ov);
            this->comb_tilde_16_feedForward_write(x[(Index)i]);
            this->comb_tilde_16_feedBack_write(ov);
            this->comb_tilde_16_feedForward_step();
            this->comb_tilde_16_feedBack_step();
            out1[(Index)i] = ov;
        }
    }
    
    void onepole_tilde_03_perform(const Sample * x, number freqInHz, SampleValue * out1, Index n) {
        auto __onepole_tilde_03_lastY = this->onepole_tilde_03_lastY;
        auto __onepole_tilde_03_b1 = this->onepole_tilde_03_b1;
        auto __onepole_tilde_03_a0 = this->onepole_tilde_03_a0;
        auto __onepole_tilde_03_needsUpdate = this->onepole_tilde_03_needsUpdate;
        auto __onepole_tilde_03_freq = this->onepole_tilde_03_freq;
        Index i;
    
        for (i = 0; i < n; i++) {
            if (__onepole_tilde_03_freq != freqInHz || (bool)(__onepole_tilde_03_needsUpdate)) {
                __onepole_tilde_03_freq = freqInHz;
                __onepole_tilde_03_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz / this->sr);
                __onepole_tilde_03_a0 = (__onepole_tilde_03_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_03_a0 < 0.00001 ? 0.00001 : __onepole_tilde_03_a0));
                __onepole_tilde_03_b1 = 1 - __onepole_tilde_03_a0;
                __onepole_tilde_03_needsUpdate = false;
            }
    
            __onepole_tilde_03_lastY = __onepole_tilde_03_a0 * x[(Index)i] + __onepole_tilde_03_b1 * __onepole_tilde_03_lastY;
            out1[(Index)i] = __onepole_tilde_03_lastY;
        }
    
        this->onepole_tilde_03_freq = __onepole_tilde_03_freq;
        this->onepole_tilde_03_needsUpdate = __onepole_tilde_03_needsUpdate;
        this->onepole_tilde_03_a0 = __onepole_tilde_03_a0;
        this->onepole_tilde_03_b1 = __onepole_tilde_03_b1;
        this->onepole_tilde_03_lastY = __onepole_tilde_03_lastY;
    }
    
    void dspexpr_07_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void allpass_tilde_07_perform(
        const Sample * x,
        number delayTime,
        number gain,
        SampleValue * out1,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            number __gain = gain;
            auto delayTimeinSamps = this->mstosamps(delayTime);
            delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
            __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
            number ff = this->allpass_tilde_07_feedForward_read(delayTimeinSamps, 0);
            number fb = this->allpass_tilde_07_feedBack_read(delayTimeinSamps, 0);
            number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
            fixdenorm(ov);
            this->allpass_tilde_07_feedForward_write(x[(Index)i]);
            this->allpass_tilde_07_feedBack_write(ov);
            this->allpass_tilde_07_feedForward_step();
            this->allpass_tilde_07_feedBack_step();
            out1[(Index)i] = ov;
        }
    }
    
    void delaytilde_02_perform(number delay, const SampleValue * input, SampleValue * output, Index n) {
        auto __delaytilde_02_crossfadeDelay = this->delaytilde_02_crossfadeDelay;
        auto __delaytilde_02_rampInSamples = this->delaytilde_02_rampInSamples;
        auto __delaytilde_02_ramp = this->delaytilde_02_ramp;
        auto __delaytilde_02_lastDelay = this->delaytilde_02_lastDelay;
    
        for (Index i = 0; i < n; i++) {
            if (__delaytilde_02_lastDelay == -1) {
                __delaytilde_02_lastDelay = delay;
            }
    
            if (__delaytilde_02_ramp > 0) {
                number factor = __delaytilde_02_ramp / __delaytilde_02_rampInSamples;
                output[(Index)i] = this->delaytilde_02_del_read(__delaytilde_02_crossfadeDelay, 0) * factor + this->delaytilde_02_del_read(__delaytilde_02_lastDelay, 0) * (1. - factor);
                __delaytilde_02_ramp--;
            } else {
                number effectiveDelay = delay;
    
                if (effectiveDelay != __delaytilde_02_lastDelay) {
                    __delaytilde_02_ramp = __delaytilde_02_rampInSamples;
                    __delaytilde_02_crossfadeDelay = __delaytilde_02_lastDelay;
                    __delaytilde_02_lastDelay = effectiveDelay;
                    output[(Index)i] = this->delaytilde_02_del_read(__delaytilde_02_crossfadeDelay, 0);
                    __delaytilde_02_ramp--;
                } else {
                    output[(Index)i] = this->delaytilde_02_del_read(effectiveDelay, 0);
                }
            }
    
            this->delaytilde_02_del_write(input[(Index)i]);
            this->delaytilde_02_del_step();
        }
    
        this->delaytilde_02_lastDelay = __delaytilde_02_lastDelay;
        this->delaytilde_02_ramp = __delaytilde_02_ramp;
        this->delaytilde_02_crossfadeDelay = __delaytilde_02_crossfadeDelay;
    }
    
    void p_02_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        const SampleValue * in4,
        const SampleValue * in5,
        const SampleValue * in6,
        const SampleValue * in7,
        SampleValue * out1,
        Index n
    ) {
        // subpatcher: combineR
        ConstSampleArray<7> ins = {in1, in2, in3, in4, in5, in6, in7};
    
        SampleArray<1> outs = {out1};
        this->p_02->process(ins, 7, outs, 1, n);
    }
    
    void p_01_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        const SampleValue * in4,
        const SampleValue * in5,
        const SampleValue * in6,
        const SampleValue * in7,
        SampleValue * out1,
        Index n
    ) {
        // subpatcher: combineL
        ConstSampleArray<7> ins = {in1, in2, in3, in4, in5, in6, in7};
    
        SampleArray<1> outs = {out1};
        this->p_01->process(ins, 7, outs, 1, n);
    }
    
    void feedbackwriter_02_perform(const SampleValue * input, Index n) {
        auto& buffer = this->feedbacktilde_02_feedbackbuffer;
    
        for (Index i = 0; i < n; i++) {
            buffer[(Index)i] = input[(Index)i];
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void lores_01_resonance_setter(number v) {
        if (v < 0.0) {
            v = 0.0;
        } else if (v >= 1.0) {
            v = 1.0 - 1E-20;
        }
    
        this->lores_01_resonance = v;
    }
    
    void numberobj_01_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_01_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_01_value = localvalue;
    }
    
    void numberobj_02_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_02_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_02_value = localvalue;
    }
    
    void numberobj_03_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_03_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_03_value = localvalue;
    }
    
    void lores_02_resonance_setter(number v) {
        if (v < 0.0) {
            v = 0.0;
        } else if (v >= 1.0) {
            v = 1.0 - 1E-20;
        }
    
        this->lores_02_resonance = v;
    }
    
    void delaytilde_01_del_step() {
        this->delaytilde_01_del_reader++;
    
        if (this->delaytilde_01_del_reader >= (int)(this->delaytilde_01_del_buffer->getSize()))
            this->delaytilde_01_del_reader = 0;
    }
    
    number delaytilde_01_del_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_01_del_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_01_del_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
            ), this->delaytilde_01_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
            ));
        }
    
        number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->delaytilde_01_del_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
        );
    }
    
    void delaytilde_01_del_write(number v) {
        this->delaytilde_01_del_writer = this->delaytilde_01_del_reader;
        this->delaytilde_01_del_buffer[(Index)this->delaytilde_01_del_writer] = v;
    }
    
    number delaytilde_01_del_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->delaytilde_01_del__maxdelay : size);
        number val = this->delaytilde_01_del_read(effectiveSize, 0);
        this->delaytilde_01_del_write(v);
        this->delaytilde_01_del_step();
        return val;
    }
    
    array<Index, 2> delaytilde_01_del_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->delaytilde_01_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->delaytilde_01_del_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void delaytilde_01_del_init() {
        auto result = this->delaytilde_01_del_calcSizeInSamples();
        this->delaytilde_01_del__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->delaytilde_01_del_buffer->requestSize(requestedSizeInSamples, 1);
        this->delaytilde_01_del_wrap = requestedSizeInSamples - 1;
    }
    
    void delaytilde_01_del_clear() {
        this->delaytilde_01_del_buffer->setZero();
    }
    
    void delaytilde_01_del_reset() {
        auto result = this->delaytilde_01_del_calcSizeInSamples();
        this->delaytilde_01_del__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->delaytilde_01_del_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->delaytilde_01_del_buffer);
        this->delaytilde_01_del_wrap = this->delaytilde_01_del_buffer->getSize() - 1;
        this->delaytilde_01_del_clear();
    
        if (this->delaytilde_01_del_reader >= this->delaytilde_01_del__maxdelay || this->delaytilde_01_del_writer >= this->delaytilde_01_del__maxdelay) {
            this->delaytilde_01_del_reader = 0;
            this->delaytilde_01_del_writer = 0;
        }
    }
    
    void delaytilde_01_del_dspsetup() {
        this->delaytilde_01_del_reset();
    }
    
    number delaytilde_01_del_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        return samplerate;
    }
    
    number delaytilde_01_del_size() {
        return this->delaytilde_01_del__maxdelay;
    }
    
    void delaytilde_01_dspsetup(bool force) {
        if ((bool)(this->delaytilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->delaytilde_01_rampInSamples = (long)(this->mstosamps(50));
        this->delaytilde_01_lastDelay = -1;
        this->delaytilde_01_setupDone = true;
        this->delaytilde_01_del_dspsetup();
    }
    
    void allpass_tilde_01_feedForward_step() {
        this->allpass_tilde_01_feedForward_reader++;
    
        if (this->allpass_tilde_01_feedForward_reader >= (int)(this->allpass_tilde_01_feedForward_buffer->getSize()))
            this->allpass_tilde_01_feedForward_reader = 0;
    }
    
    number allpass_tilde_01_feedForward_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
            ), this->allpass_tilde_01_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? 1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
            ), this->allpass_tilde_01_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
            ), this->allpass_tilde_01_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
            ), this->allpass_tilde_01_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? 1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
            ), this->allpass_tilde_01_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
            ), this->allpass_tilde_01_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
            ), this->allpass_tilde_01_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
            ), this->allpass_tilde_01_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
            ));
        }
    
        number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->allpass_tilde_01_feedForward_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
        );
    }
    
    void allpass_tilde_01_feedForward_write(number v) {
        this->allpass_tilde_01_feedForward_writer = this->allpass_tilde_01_feedForward_reader;
        this->allpass_tilde_01_feedForward_buffer[(Index)this->allpass_tilde_01_feedForward_writer] = v;
    }
    
    number allpass_tilde_01_feedForward_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->allpass_tilde_01_feedForward__maxdelay : size);
        number val = this->allpass_tilde_01_feedForward_read(effectiveSize, 0);
        this->allpass_tilde_01_feedForward_write(v);
        this->allpass_tilde_01_feedForward_step();
        return val;
    }
    
    array<Index, 2> allpass_tilde_01_feedForward_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->allpass_tilde_01_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->allpass_tilde_01_feedForward_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void allpass_tilde_01_feedForward_init() {
        auto result = this->allpass_tilde_01_feedForward_calcSizeInSamples();
        this->allpass_tilde_01_feedForward__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_01_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
        this->allpass_tilde_01_feedForward_wrap = requestedSizeInSamples - 1;
    }
    
    void allpass_tilde_01_feedForward_clear() {
        this->allpass_tilde_01_feedForward_buffer->setZero();
    }
    
    void allpass_tilde_01_feedForward_reset() {
        auto result = this->allpass_tilde_01_feedForward_calcSizeInSamples();
        this->allpass_tilde_01_feedForward__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_01_feedForward_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->allpass_tilde_01_feedForward_buffer);
        this->allpass_tilde_01_feedForward_wrap = this->allpass_tilde_01_feedForward_buffer->getSize() - 1;
        this->allpass_tilde_01_feedForward_clear();
    
        if (this->allpass_tilde_01_feedForward_reader >= this->allpass_tilde_01_feedForward__maxdelay || this->allpass_tilde_01_feedForward_writer >= this->allpass_tilde_01_feedForward__maxdelay) {
            this->allpass_tilde_01_feedForward_reader = 0;
            this->allpass_tilde_01_feedForward_writer = 0;
        }
    }
    
    void allpass_tilde_01_feedForward_dspsetup() {
        this->allpass_tilde_01_feedForward_reset();
    }
    
    number allpass_tilde_01_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number allpass_tilde_01_feedForward_size() {
        return this->allpass_tilde_01_feedForward__maxdelay;
    }
    
    void allpass_tilde_01_feedBack_step() {
        this->allpass_tilde_01_feedBack_reader++;
    
        if (this->allpass_tilde_01_feedBack_reader >= (int)(this->allpass_tilde_01_feedBack_buffer->getSize()))
            this->allpass_tilde_01_feedBack_reader = 0;
    }
    
    number allpass_tilde_01_feedBack_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
            ), this->allpass_tilde_01_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? 1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
            ), this->allpass_tilde_01_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
            ), this->allpass_tilde_01_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
            ), this->allpass_tilde_01_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? 1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
            ), this->allpass_tilde_01_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
            ), this->allpass_tilde_01_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
            ), this->allpass_tilde_01_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
            ), this->allpass_tilde_01_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
            ));
        }
    
        number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->allpass_tilde_01_feedBack_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
        );
    }
    
    void allpass_tilde_01_feedBack_write(number v) {
        this->allpass_tilde_01_feedBack_writer = this->allpass_tilde_01_feedBack_reader;
        this->allpass_tilde_01_feedBack_buffer[(Index)this->allpass_tilde_01_feedBack_writer] = v;
    }
    
    number allpass_tilde_01_feedBack_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->allpass_tilde_01_feedBack__maxdelay : size);
        number val = this->allpass_tilde_01_feedBack_read(effectiveSize, 0);
        this->allpass_tilde_01_feedBack_write(v);
        this->allpass_tilde_01_feedBack_step();
        return val;
    }
    
    array<Index, 2> allpass_tilde_01_feedBack_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->allpass_tilde_01_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->allpass_tilde_01_feedBack_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void allpass_tilde_01_feedBack_init() {
        auto result = this->allpass_tilde_01_feedBack_calcSizeInSamples();
        this->allpass_tilde_01_feedBack__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_01_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
        this->allpass_tilde_01_feedBack_wrap = requestedSizeInSamples - 1;
    }
    
    void allpass_tilde_01_feedBack_clear() {
        this->allpass_tilde_01_feedBack_buffer->setZero();
    }
    
    void allpass_tilde_01_feedBack_reset() {
        auto result = this->allpass_tilde_01_feedBack_calcSizeInSamples();
        this->allpass_tilde_01_feedBack__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_01_feedBack_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->allpass_tilde_01_feedBack_buffer);
        this->allpass_tilde_01_feedBack_wrap = this->allpass_tilde_01_feedBack_buffer->getSize() - 1;
        this->allpass_tilde_01_feedBack_clear();
    
        if (this->allpass_tilde_01_feedBack_reader >= this->allpass_tilde_01_feedBack__maxdelay || this->allpass_tilde_01_feedBack_writer >= this->allpass_tilde_01_feedBack__maxdelay) {
            this->allpass_tilde_01_feedBack_reader = 0;
            this->allpass_tilde_01_feedBack_writer = 0;
        }
    }
    
    void allpass_tilde_01_feedBack_dspsetup() {
        this->allpass_tilde_01_feedBack_reset();
    }
    
    number allpass_tilde_01_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number allpass_tilde_01_feedBack_size() {
        return this->allpass_tilde_01_feedBack__maxdelay;
    }
    
    void allpass_tilde_01_init() {
        this->allpass_tilde_01_feedForward_init();
        this->allpass_tilde_01_feedBack_init();
    }
    
    void allpass_tilde_01_clear() {
        this->allpass_tilde_01_feedForward_clear();
        this->allpass_tilde_01_feedBack_clear();
    }
    
    void allpass_tilde_01_reset() {
        this->allpass_tilde_01_init();
        this->allpass_tilde_01_clear();
    }
    
    void allpass_tilde_01_dspsetup(bool force) {
        if ((bool)(this->allpass_tilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->allpass_tilde_01_reset();
        this->allpass_tilde_01_setupDone = true;
        this->allpass_tilde_01_feedForward_dspsetup();
        this->allpass_tilde_01_feedBack_dspsetup();
    }
    
    void onepole_tilde_01_reset() {
        this->onepole_tilde_01_lastY = 0;
        this->onepole_tilde_01_a0 = 0;
        this->onepole_tilde_01_b1 = 0;
    }
    
    void onepole_tilde_01_dspsetup(bool force) {
        if ((bool)(this->onepole_tilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->onepole_tilde_01_needsUpdate = true;
        this->onepole_tilde_01_reset();
        this->onepole_tilde_01_setupDone = true;
    }
    
    void comb_tilde_15_feedForward_step() {
        this->comb_tilde_15_feedForward_reader++;
    
        if (this->comb_tilde_15_feedForward_reader >= (int)(this->comb_tilde_15_feedForward_buffer->getSize()))
            this->comb_tilde_15_feedForward_reader = 0;
    }
    
    number comb_tilde_15_feedForward_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
            ), this->comb_tilde_15_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? 1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
            ), this->comb_tilde_15_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
            ), this->comb_tilde_15_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
            ), this->comb_tilde_15_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? 1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
            ), this->comb_tilde_15_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
            ), this->comb_tilde_15_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
            ), this->comb_tilde_15_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
            ), this->comb_tilde_15_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
            ));
        }
    
        number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->comb_tilde_15_feedForward_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
        );
    }
    
    void comb_tilde_15_feedForward_write(number v) {
        this->comb_tilde_15_feedForward_writer = this->comb_tilde_15_feedForward_reader;
        this->comb_tilde_15_feedForward_buffer[(Index)this->comb_tilde_15_feedForward_writer] = v;
    }
    
    number comb_tilde_15_feedForward_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->comb_tilde_15_feedForward__maxdelay : size);
        number val = this->comb_tilde_15_feedForward_read(effectiveSize, 0);
        this->comb_tilde_15_feedForward_write(v);
        this->comb_tilde_15_feedForward_step();
        return val;
    }
    
    array<Index, 2> comb_tilde_15_feedForward_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->comb_tilde_15_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->comb_tilde_15_feedForward_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void comb_tilde_15_feedForward_init() {
        auto result = this->comb_tilde_15_feedForward_calcSizeInSamples();
        this->comb_tilde_15_feedForward__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->comb_tilde_15_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
        this->comb_tilde_15_feedForward_wrap = requestedSizeInSamples - 1;
    }
    
    void comb_tilde_15_feedForward_clear() {
        this->comb_tilde_15_feedForward_buffer->setZero();
    }
    
    void comb_tilde_15_feedForward_reset() {
        auto result = this->comb_tilde_15_feedForward_calcSizeInSamples();
        this->comb_tilde_15_feedForward__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->comb_tilde_15_feedForward_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->comb_tilde_15_feedForward_buffer);
        this->comb_tilde_15_feedForward_wrap = this->comb_tilde_15_feedForward_buffer->getSize() - 1;
        this->comb_tilde_15_feedForward_clear();
    
        if (this->comb_tilde_15_feedForward_reader >= this->comb_tilde_15_feedForward__maxdelay || this->comb_tilde_15_feedForward_writer >= this->comb_tilde_15_feedForward__maxdelay) {
            this->comb_tilde_15_feedForward_reader = 0;
            this->comb_tilde_15_feedForward_writer = 0;
        }
    }
    
    void comb_tilde_15_feedForward_dspsetup() {
        this->comb_tilde_15_feedForward_reset();
    }
    
    number comb_tilde_15_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number comb_tilde_15_feedForward_size() {
        return this->comb_tilde_15_feedForward__maxdelay;
    }
    
    void comb_tilde_15_feedBack_step() {
        this->comb_tilde_15_feedBack_reader++;
    
        if (this->comb_tilde_15_feedBack_reader >= (int)(this->comb_tilde_15_feedBack_buffer->getSize()))
            this->comb_tilde_15_feedBack_reader = 0;
    }
    
    number comb_tilde_15_feedBack_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
            ), this->comb_tilde_15_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? 1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
            ), this->comb_tilde_15_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
            ), this->comb_tilde_15_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
            ), this->comb_tilde_15_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? 1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
            ), this->comb_tilde_15_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
            ), this->comb_tilde_15_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
            ), this->comb_tilde_15_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
            ), this->comb_tilde_15_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
            ));
        }
    
        number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->comb_tilde_15_feedBack_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
        );
    }
    
    void comb_tilde_15_feedBack_write(number v) {
        this->comb_tilde_15_feedBack_writer = this->comb_tilde_15_feedBack_reader;
        this->comb_tilde_15_feedBack_buffer[(Index)this->comb_tilde_15_feedBack_writer] = v;
    }
    
    number comb_tilde_15_feedBack_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->comb_tilde_15_feedBack__maxdelay : size);
        number val = this->comb_tilde_15_feedBack_read(effectiveSize, 0);
        this->comb_tilde_15_feedBack_write(v);
        this->comb_tilde_15_feedBack_step();
        return val;
    }
    
    array<Index, 2> comb_tilde_15_feedBack_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->comb_tilde_15_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->comb_tilde_15_feedBack_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void comb_tilde_15_feedBack_init() {
        auto result = this->comb_tilde_15_feedBack_calcSizeInSamples();
        this->comb_tilde_15_feedBack__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->comb_tilde_15_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
        this->comb_tilde_15_feedBack_wrap = requestedSizeInSamples - 1;
    }
    
    void comb_tilde_15_feedBack_clear() {
        this->comb_tilde_15_feedBack_buffer->setZero();
    }
    
    void comb_tilde_15_feedBack_reset() {
        auto result = this->comb_tilde_15_feedBack_calcSizeInSamples();
        this->comb_tilde_15_feedBack__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->comb_tilde_15_feedBack_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->comb_tilde_15_feedBack_buffer);
        this->comb_tilde_15_feedBack_wrap = this->comb_tilde_15_feedBack_buffer->getSize() - 1;
        this->comb_tilde_15_feedBack_clear();
    
        if (this->comb_tilde_15_feedBack_reader >= this->comb_tilde_15_feedBack__maxdelay || this->comb_tilde_15_feedBack_writer >= this->comb_tilde_15_feedBack__maxdelay) {
            this->comb_tilde_15_feedBack_reader = 0;
            this->comb_tilde_15_feedBack_writer = 0;
        }
    }
    
    void comb_tilde_15_feedBack_dspsetup() {
        this->comb_tilde_15_feedBack_reset();
    }
    
    number comb_tilde_15_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number comb_tilde_15_feedBack_size() {
        return this->comb_tilde_15_feedBack__maxdelay;
    }
    
    void comb_tilde_15_init() {
        this->comb_tilde_15_feedForward_init();
        this->comb_tilde_15_feedBack_init();
    }
    
    void comb_tilde_15_clear() {
        this->comb_tilde_15_feedForward_clear();
        this->comb_tilde_15_feedBack_clear();
    }
    
    void comb_tilde_15_reset() {
        this->comb_tilde_15_init();
        this->comb_tilde_15_clear();
    }
    
    void comb_tilde_15_dspsetup(bool force) {
        if ((bool)(this->comb_tilde_15_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->comb_tilde_15_reset();
        this->comb_tilde_15_setupDone = true;
        this->comb_tilde_15_feedForward_dspsetup();
        this->comb_tilde_15_feedBack_dspsetup();
    }
    
    void allpass_tilde_02_feedForward_step() {
        this->allpass_tilde_02_feedForward_reader++;
    
        if (this->allpass_tilde_02_feedForward_reader >= (int)(this->allpass_tilde_02_feedForward_buffer->getSize()))
            this->allpass_tilde_02_feedForward_reader = 0;
    }
    
    number allpass_tilde_02_feedForward_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
            ), this->allpass_tilde_02_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? 1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
            ), this->allpass_tilde_02_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
            ), this->allpass_tilde_02_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
            ), this->allpass_tilde_02_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? 1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
            ), this->allpass_tilde_02_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
            ), this->allpass_tilde_02_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
            ), this->allpass_tilde_02_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
            ), this->allpass_tilde_02_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
            ));
        }
    
        number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->allpass_tilde_02_feedForward_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
        );
    }
    
    void allpass_tilde_02_feedForward_write(number v) {
        this->allpass_tilde_02_feedForward_writer = this->allpass_tilde_02_feedForward_reader;
        this->allpass_tilde_02_feedForward_buffer[(Index)this->allpass_tilde_02_feedForward_writer] = v;
    }
    
    number allpass_tilde_02_feedForward_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->allpass_tilde_02_feedForward__maxdelay : size);
        number val = this->allpass_tilde_02_feedForward_read(effectiveSize, 0);
        this->allpass_tilde_02_feedForward_write(v);
        this->allpass_tilde_02_feedForward_step();
        return val;
    }
    
    array<Index, 2> allpass_tilde_02_feedForward_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->allpass_tilde_02_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->allpass_tilde_02_feedForward_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void allpass_tilde_02_feedForward_init() {
        auto result = this->allpass_tilde_02_feedForward_calcSizeInSamples();
        this->allpass_tilde_02_feedForward__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_02_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
        this->allpass_tilde_02_feedForward_wrap = requestedSizeInSamples - 1;
    }
    
    void allpass_tilde_02_feedForward_clear() {
        this->allpass_tilde_02_feedForward_buffer->setZero();
    }
    
    void allpass_tilde_02_feedForward_reset() {
        auto result = this->allpass_tilde_02_feedForward_calcSizeInSamples();
        this->allpass_tilde_02_feedForward__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_02_feedForward_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->allpass_tilde_02_feedForward_buffer);
        this->allpass_tilde_02_feedForward_wrap = this->allpass_tilde_02_feedForward_buffer->getSize() - 1;
        this->allpass_tilde_02_feedForward_clear();
    
        if (this->allpass_tilde_02_feedForward_reader >= this->allpass_tilde_02_feedForward__maxdelay || this->allpass_tilde_02_feedForward_writer >= this->allpass_tilde_02_feedForward__maxdelay) {
            this->allpass_tilde_02_feedForward_reader = 0;
            this->allpass_tilde_02_feedForward_writer = 0;
        }
    }
    
    void allpass_tilde_02_feedForward_dspsetup() {
        this->allpass_tilde_02_feedForward_reset();
    }
    
    number allpass_tilde_02_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number allpass_tilde_02_feedForward_size() {
        return this->allpass_tilde_02_feedForward__maxdelay;
    }
    
    void allpass_tilde_02_feedBack_step() {
        this->allpass_tilde_02_feedBack_reader++;
    
        if (this->allpass_tilde_02_feedBack_reader >= (int)(this->allpass_tilde_02_feedBack_buffer->getSize()))
            this->allpass_tilde_02_feedBack_reader = 0;
    }
    
    number allpass_tilde_02_feedBack_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
            ), this->allpass_tilde_02_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? 1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
            ), this->allpass_tilde_02_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
            ), this->allpass_tilde_02_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
            ), this->allpass_tilde_02_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? 1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
            ), this->allpass_tilde_02_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
            ), this->allpass_tilde_02_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
            ), this->allpass_tilde_02_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
            ), this->allpass_tilde_02_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
            ));
        }
    
        number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->allpass_tilde_02_feedBack_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
        );
    }
    
    void allpass_tilde_02_feedBack_write(number v) {
        this->allpass_tilde_02_feedBack_writer = this->allpass_tilde_02_feedBack_reader;
        this->allpass_tilde_02_feedBack_buffer[(Index)this->allpass_tilde_02_feedBack_writer] = v;
    }
    
    number allpass_tilde_02_feedBack_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->allpass_tilde_02_feedBack__maxdelay : size);
        number val = this->allpass_tilde_02_feedBack_read(effectiveSize, 0);
        this->allpass_tilde_02_feedBack_write(v);
        this->allpass_tilde_02_feedBack_step();
        return val;
    }
    
    array<Index, 2> allpass_tilde_02_feedBack_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->allpass_tilde_02_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->allpass_tilde_02_feedBack_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void allpass_tilde_02_feedBack_init() {
        auto result = this->allpass_tilde_02_feedBack_calcSizeInSamples();
        this->allpass_tilde_02_feedBack__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_02_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
        this->allpass_tilde_02_feedBack_wrap = requestedSizeInSamples - 1;
    }
    
    void allpass_tilde_02_feedBack_clear() {
        this->allpass_tilde_02_feedBack_buffer->setZero();
    }
    
    void allpass_tilde_02_feedBack_reset() {
        auto result = this->allpass_tilde_02_feedBack_calcSizeInSamples();
        this->allpass_tilde_02_feedBack__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_02_feedBack_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->allpass_tilde_02_feedBack_buffer);
        this->allpass_tilde_02_feedBack_wrap = this->allpass_tilde_02_feedBack_buffer->getSize() - 1;
        this->allpass_tilde_02_feedBack_clear();
    
        if (this->allpass_tilde_02_feedBack_reader >= this->allpass_tilde_02_feedBack__maxdelay || this->allpass_tilde_02_feedBack_writer >= this->allpass_tilde_02_feedBack__maxdelay) {
            this->allpass_tilde_02_feedBack_reader = 0;
            this->allpass_tilde_02_feedBack_writer = 0;
        }
    }
    
    void allpass_tilde_02_feedBack_dspsetup() {
        this->allpass_tilde_02_feedBack_reset();
    }
    
    number allpass_tilde_02_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number allpass_tilde_02_feedBack_size() {
        return this->allpass_tilde_02_feedBack__maxdelay;
    }
    
    void allpass_tilde_02_init() {
        this->allpass_tilde_02_feedForward_init();
        this->allpass_tilde_02_feedBack_init();
    }
    
    void allpass_tilde_02_clear() {
        this->allpass_tilde_02_feedForward_clear();
        this->allpass_tilde_02_feedBack_clear();
    }
    
    void allpass_tilde_02_reset() {
        this->allpass_tilde_02_init();
        this->allpass_tilde_02_clear();
    }
    
    void allpass_tilde_02_dspsetup(bool force) {
        if ((bool)(this->allpass_tilde_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->allpass_tilde_02_reset();
        this->allpass_tilde_02_setupDone = true;
        this->allpass_tilde_02_feedForward_dspsetup();
        this->allpass_tilde_02_feedBack_dspsetup();
    }
    
    void allpass_tilde_03_feedForward_step() {
        this->allpass_tilde_03_feedForward_reader++;
    
        if (this->allpass_tilde_03_feedForward_reader >= (int)(this->allpass_tilde_03_feedForward_buffer->getSize()))
            this->allpass_tilde_03_feedForward_reader = 0;
    }
    
    number allpass_tilde_03_feedForward_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
            ), this->allpass_tilde_03_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? 1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
            ), this->allpass_tilde_03_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
            ), this->allpass_tilde_03_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
            ), this->allpass_tilde_03_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? 1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
            ), this->allpass_tilde_03_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
            ), this->allpass_tilde_03_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
            ), this->allpass_tilde_03_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
            ), this->allpass_tilde_03_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
            ));
        }
    
        number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->allpass_tilde_03_feedForward_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
        );
    }
    
    void allpass_tilde_03_feedForward_write(number v) {
        this->allpass_tilde_03_feedForward_writer = this->allpass_tilde_03_feedForward_reader;
        this->allpass_tilde_03_feedForward_buffer[(Index)this->allpass_tilde_03_feedForward_writer] = v;
    }
    
    number allpass_tilde_03_feedForward_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->allpass_tilde_03_feedForward__maxdelay : size);
        number val = this->allpass_tilde_03_feedForward_read(effectiveSize, 0);
        this->allpass_tilde_03_feedForward_write(v);
        this->allpass_tilde_03_feedForward_step();
        return val;
    }
    
    array<Index, 2> allpass_tilde_03_feedForward_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->allpass_tilde_03_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->allpass_tilde_03_feedForward_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void allpass_tilde_03_feedForward_init() {
        auto result = this->allpass_tilde_03_feedForward_calcSizeInSamples();
        this->allpass_tilde_03_feedForward__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_03_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
        this->allpass_tilde_03_feedForward_wrap = requestedSizeInSamples - 1;
    }
    
    void allpass_tilde_03_feedForward_clear() {
        this->allpass_tilde_03_feedForward_buffer->setZero();
    }
    
    void allpass_tilde_03_feedForward_reset() {
        auto result = this->allpass_tilde_03_feedForward_calcSizeInSamples();
        this->allpass_tilde_03_feedForward__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_03_feedForward_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->allpass_tilde_03_feedForward_buffer);
        this->allpass_tilde_03_feedForward_wrap = this->allpass_tilde_03_feedForward_buffer->getSize() - 1;
        this->allpass_tilde_03_feedForward_clear();
    
        if (this->allpass_tilde_03_feedForward_reader >= this->allpass_tilde_03_feedForward__maxdelay || this->allpass_tilde_03_feedForward_writer >= this->allpass_tilde_03_feedForward__maxdelay) {
            this->allpass_tilde_03_feedForward_reader = 0;
            this->allpass_tilde_03_feedForward_writer = 0;
        }
    }
    
    void allpass_tilde_03_feedForward_dspsetup() {
        this->allpass_tilde_03_feedForward_reset();
    }
    
    number allpass_tilde_03_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number allpass_tilde_03_feedForward_size() {
        return this->allpass_tilde_03_feedForward__maxdelay;
    }
    
    void allpass_tilde_03_feedBack_step() {
        this->allpass_tilde_03_feedBack_reader++;
    
        if (this->allpass_tilde_03_feedBack_reader >= (int)(this->allpass_tilde_03_feedBack_buffer->getSize()))
            this->allpass_tilde_03_feedBack_reader = 0;
    }
    
    number allpass_tilde_03_feedBack_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
            ), this->allpass_tilde_03_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? 1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
            ), this->allpass_tilde_03_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
            ), this->allpass_tilde_03_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
            ), this->allpass_tilde_03_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? 1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
            ), this->allpass_tilde_03_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
            ), this->allpass_tilde_03_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
            ), this->allpass_tilde_03_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
            ), this->allpass_tilde_03_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
            ));
        }
    
        number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->allpass_tilde_03_feedBack_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
        );
    }
    
    void allpass_tilde_03_feedBack_write(number v) {
        this->allpass_tilde_03_feedBack_writer = this->allpass_tilde_03_feedBack_reader;
        this->allpass_tilde_03_feedBack_buffer[(Index)this->allpass_tilde_03_feedBack_writer] = v;
    }
    
    number allpass_tilde_03_feedBack_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->allpass_tilde_03_feedBack__maxdelay : size);
        number val = this->allpass_tilde_03_feedBack_read(effectiveSize, 0);
        this->allpass_tilde_03_feedBack_write(v);
        this->allpass_tilde_03_feedBack_step();
        return val;
    }
    
    array<Index, 2> allpass_tilde_03_feedBack_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->allpass_tilde_03_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->allpass_tilde_03_feedBack_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void allpass_tilde_03_feedBack_init() {
        auto result = this->allpass_tilde_03_feedBack_calcSizeInSamples();
        this->allpass_tilde_03_feedBack__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_03_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
        this->allpass_tilde_03_feedBack_wrap = requestedSizeInSamples - 1;
    }
    
    void allpass_tilde_03_feedBack_clear() {
        this->allpass_tilde_03_feedBack_buffer->setZero();
    }
    
    void allpass_tilde_03_feedBack_reset() {
        auto result = this->allpass_tilde_03_feedBack_calcSizeInSamples();
        this->allpass_tilde_03_feedBack__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_03_feedBack_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->allpass_tilde_03_feedBack_buffer);
        this->allpass_tilde_03_feedBack_wrap = this->allpass_tilde_03_feedBack_buffer->getSize() - 1;
        this->allpass_tilde_03_feedBack_clear();
    
        if (this->allpass_tilde_03_feedBack_reader >= this->allpass_tilde_03_feedBack__maxdelay || this->allpass_tilde_03_feedBack_writer >= this->allpass_tilde_03_feedBack__maxdelay) {
            this->allpass_tilde_03_feedBack_reader = 0;
            this->allpass_tilde_03_feedBack_writer = 0;
        }
    }
    
    void allpass_tilde_03_feedBack_dspsetup() {
        this->allpass_tilde_03_feedBack_reset();
    }
    
    number allpass_tilde_03_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number allpass_tilde_03_feedBack_size() {
        return this->allpass_tilde_03_feedBack__maxdelay;
    }
    
    void allpass_tilde_03_init() {
        this->allpass_tilde_03_feedForward_init();
        this->allpass_tilde_03_feedBack_init();
    }
    
    void allpass_tilde_03_clear() {
        this->allpass_tilde_03_feedForward_clear();
        this->allpass_tilde_03_feedBack_clear();
    }
    
    void allpass_tilde_03_reset() {
        this->allpass_tilde_03_init();
        this->allpass_tilde_03_clear();
    }
    
    void allpass_tilde_03_dspsetup(bool force) {
        if ((bool)(this->allpass_tilde_03_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->allpass_tilde_03_reset();
        this->allpass_tilde_03_setupDone = true;
        this->allpass_tilde_03_feedForward_dspsetup();
        this->allpass_tilde_03_feedBack_dspsetup();
    }
    
    void allpass_tilde_04_feedForward_step() {
        this->allpass_tilde_04_feedForward_reader++;
    
        if (this->allpass_tilde_04_feedForward_reader >= (int)(this->allpass_tilde_04_feedForward_buffer->getSize()))
            this->allpass_tilde_04_feedForward_reader = 0;
    }
    
    number allpass_tilde_04_feedForward_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
            ), this->allpass_tilde_04_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? 1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
            ), this->allpass_tilde_04_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
            ), this->allpass_tilde_04_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
            ), this->allpass_tilde_04_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? 1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
            ), this->allpass_tilde_04_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
            ), this->allpass_tilde_04_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
            ), this->allpass_tilde_04_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
            ), this->allpass_tilde_04_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
            ));
        }
    
        number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->allpass_tilde_04_feedForward_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
        );
    }
    
    void allpass_tilde_04_feedForward_write(number v) {
        this->allpass_tilde_04_feedForward_writer = this->allpass_tilde_04_feedForward_reader;
        this->allpass_tilde_04_feedForward_buffer[(Index)this->allpass_tilde_04_feedForward_writer] = v;
    }
    
    number allpass_tilde_04_feedForward_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->allpass_tilde_04_feedForward__maxdelay : size);
        number val = this->allpass_tilde_04_feedForward_read(effectiveSize, 0);
        this->allpass_tilde_04_feedForward_write(v);
        this->allpass_tilde_04_feedForward_step();
        return val;
    }
    
    array<Index, 2> allpass_tilde_04_feedForward_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->allpass_tilde_04_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->allpass_tilde_04_feedForward_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void allpass_tilde_04_feedForward_init() {
        auto result = this->allpass_tilde_04_feedForward_calcSizeInSamples();
        this->allpass_tilde_04_feedForward__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_04_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
        this->allpass_tilde_04_feedForward_wrap = requestedSizeInSamples - 1;
    }
    
    void allpass_tilde_04_feedForward_clear() {
        this->allpass_tilde_04_feedForward_buffer->setZero();
    }
    
    void allpass_tilde_04_feedForward_reset() {
        auto result = this->allpass_tilde_04_feedForward_calcSizeInSamples();
        this->allpass_tilde_04_feedForward__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_04_feedForward_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->allpass_tilde_04_feedForward_buffer);
        this->allpass_tilde_04_feedForward_wrap = this->allpass_tilde_04_feedForward_buffer->getSize() - 1;
        this->allpass_tilde_04_feedForward_clear();
    
        if (this->allpass_tilde_04_feedForward_reader >= this->allpass_tilde_04_feedForward__maxdelay || this->allpass_tilde_04_feedForward_writer >= this->allpass_tilde_04_feedForward__maxdelay) {
            this->allpass_tilde_04_feedForward_reader = 0;
            this->allpass_tilde_04_feedForward_writer = 0;
        }
    }
    
    void allpass_tilde_04_feedForward_dspsetup() {
        this->allpass_tilde_04_feedForward_reset();
    }
    
    number allpass_tilde_04_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number allpass_tilde_04_feedForward_size() {
        return this->allpass_tilde_04_feedForward__maxdelay;
    }
    
    void allpass_tilde_04_feedBack_step() {
        this->allpass_tilde_04_feedBack_reader++;
    
        if (this->allpass_tilde_04_feedBack_reader >= (int)(this->allpass_tilde_04_feedBack_buffer->getSize()))
            this->allpass_tilde_04_feedBack_reader = 0;
    }
    
    number allpass_tilde_04_feedBack_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
            ), this->allpass_tilde_04_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? 1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
            ), this->allpass_tilde_04_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
            ), this->allpass_tilde_04_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
            ), this->allpass_tilde_04_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? 1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
            ), this->allpass_tilde_04_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
            ), this->allpass_tilde_04_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
            ), this->allpass_tilde_04_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
            ), this->allpass_tilde_04_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
            ));
        }
    
        number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->allpass_tilde_04_feedBack_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
        );
    }
    
    void allpass_tilde_04_feedBack_write(number v) {
        this->allpass_tilde_04_feedBack_writer = this->allpass_tilde_04_feedBack_reader;
        this->allpass_tilde_04_feedBack_buffer[(Index)this->allpass_tilde_04_feedBack_writer] = v;
    }
    
    number allpass_tilde_04_feedBack_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->allpass_tilde_04_feedBack__maxdelay : size);
        number val = this->allpass_tilde_04_feedBack_read(effectiveSize, 0);
        this->allpass_tilde_04_feedBack_write(v);
        this->allpass_tilde_04_feedBack_step();
        return val;
    }
    
    array<Index, 2> allpass_tilde_04_feedBack_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->allpass_tilde_04_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->allpass_tilde_04_feedBack_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void allpass_tilde_04_feedBack_init() {
        auto result = this->allpass_tilde_04_feedBack_calcSizeInSamples();
        this->allpass_tilde_04_feedBack__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_04_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
        this->allpass_tilde_04_feedBack_wrap = requestedSizeInSamples - 1;
    }
    
    void allpass_tilde_04_feedBack_clear() {
        this->allpass_tilde_04_feedBack_buffer->setZero();
    }
    
    void allpass_tilde_04_feedBack_reset() {
        auto result = this->allpass_tilde_04_feedBack_calcSizeInSamples();
        this->allpass_tilde_04_feedBack__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_04_feedBack_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->allpass_tilde_04_feedBack_buffer);
        this->allpass_tilde_04_feedBack_wrap = this->allpass_tilde_04_feedBack_buffer->getSize() - 1;
        this->allpass_tilde_04_feedBack_clear();
    
        if (this->allpass_tilde_04_feedBack_reader >= this->allpass_tilde_04_feedBack__maxdelay || this->allpass_tilde_04_feedBack_writer >= this->allpass_tilde_04_feedBack__maxdelay) {
            this->allpass_tilde_04_feedBack_reader = 0;
            this->allpass_tilde_04_feedBack_writer = 0;
        }
    }
    
    void allpass_tilde_04_feedBack_dspsetup() {
        this->allpass_tilde_04_feedBack_reset();
    }
    
    number allpass_tilde_04_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number allpass_tilde_04_feedBack_size() {
        return this->allpass_tilde_04_feedBack__maxdelay;
    }
    
    void allpass_tilde_04_init() {
        this->allpass_tilde_04_feedForward_init();
        this->allpass_tilde_04_feedBack_init();
    }
    
    void allpass_tilde_04_clear() {
        this->allpass_tilde_04_feedForward_clear();
        this->allpass_tilde_04_feedBack_clear();
    }
    
    void allpass_tilde_04_reset() {
        this->allpass_tilde_04_init();
        this->allpass_tilde_04_clear();
    }
    
    void allpass_tilde_04_dspsetup(bool force) {
        if ((bool)(this->allpass_tilde_04_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->allpass_tilde_04_reset();
        this->allpass_tilde_04_setupDone = true;
        this->allpass_tilde_04_feedForward_dspsetup();
        this->allpass_tilde_04_feedBack_dspsetup();
    }
    
    void allpass_tilde_05_feedForward_step() {
        this->allpass_tilde_05_feedForward_reader++;
    
        if (this->allpass_tilde_05_feedForward_reader >= (int)(this->allpass_tilde_05_feedForward_buffer->getSize()))
            this->allpass_tilde_05_feedForward_reader = 0;
    }
    
    number allpass_tilde_05_feedForward_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
            ), this->allpass_tilde_05_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? 1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
            ), this->allpass_tilde_05_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
            ), this->allpass_tilde_05_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
            ), this->allpass_tilde_05_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? 1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
            ), this->allpass_tilde_05_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
            ), this->allpass_tilde_05_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
            ), this->allpass_tilde_05_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
            ), this->allpass_tilde_05_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
            ));
        }
    
        number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->allpass_tilde_05_feedForward_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
        );
    }
    
    void allpass_tilde_05_feedForward_write(number v) {
        this->allpass_tilde_05_feedForward_writer = this->allpass_tilde_05_feedForward_reader;
        this->allpass_tilde_05_feedForward_buffer[(Index)this->allpass_tilde_05_feedForward_writer] = v;
    }
    
    number allpass_tilde_05_feedForward_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->allpass_tilde_05_feedForward__maxdelay : size);
        number val = this->allpass_tilde_05_feedForward_read(effectiveSize, 0);
        this->allpass_tilde_05_feedForward_write(v);
        this->allpass_tilde_05_feedForward_step();
        return val;
    }
    
    array<Index, 2> allpass_tilde_05_feedForward_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->allpass_tilde_05_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->allpass_tilde_05_feedForward_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void allpass_tilde_05_feedForward_init() {
        auto result = this->allpass_tilde_05_feedForward_calcSizeInSamples();
        this->allpass_tilde_05_feedForward__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_05_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
        this->allpass_tilde_05_feedForward_wrap = requestedSizeInSamples - 1;
    }
    
    void allpass_tilde_05_feedForward_clear() {
        this->allpass_tilde_05_feedForward_buffer->setZero();
    }
    
    void allpass_tilde_05_feedForward_reset() {
        auto result = this->allpass_tilde_05_feedForward_calcSizeInSamples();
        this->allpass_tilde_05_feedForward__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_05_feedForward_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->allpass_tilde_05_feedForward_buffer);
        this->allpass_tilde_05_feedForward_wrap = this->allpass_tilde_05_feedForward_buffer->getSize() - 1;
        this->allpass_tilde_05_feedForward_clear();
    
        if (this->allpass_tilde_05_feedForward_reader >= this->allpass_tilde_05_feedForward__maxdelay || this->allpass_tilde_05_feedForward_writer >= this->allpass_tilde_05_feedForward__maxdelay) {
            this->allpass_tilde_05_feedForward_reader = 0;
            this->allpass_tilde_05_feedForward_writer = 0;
        }
    }
    
    void allpass_tilde_05_feedForward_dspsetup() {
        this->allpass_tilde_05_feedForward_reset();
    }
    
    number allpass_tilde_05_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number allpass_tilde_05_feedForward_size() {
        return this->allpass_tilde_05_feedForward__maxdelay;
    }
    
    void allpass_tilde_05_feedBack_step() {
        this->allpass_tilde_05_feedBack_reader++;
    
        if (this->allpass_tilde_05_feedBack_reader >= (int)(this->allpass_tilde_05_feedBack_buffer->getSize()))
            this->allpass_tilde_05_feedBack_reader = 0;
    }
    
    number allpass_tilde_05_feedBack_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
            ), this->allpass_tilde_05_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? 1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
            ), this->allpass_tilde_05_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
            ), this->allpass_tilde_05_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
            ), this->allpass_tilde_05_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? 1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
            ), this->allpass_tilde_05_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
            ), this->allpass_tilde_05_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
            ), this->allpass_tilde_05_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
            ), this->allpass_tilde_05_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
            ));
        }
    
        number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->allpass_tilde_05_feedBack_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
        );
    }
    
    void allpass_tilde_05_feedBack_write(number v) {
        this->allpass_tilde_05_feedBack_writer = this->allpass_tilde_05_feedBack_reader;
        this->allpass_tilde_05_feedBack_buffer[(Index)this->allpass_tilde_05_feedBack_writer] = v;
    }
    
    number allpass_tilde_05_feedBack_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->allpass_tilde_05_feedBack__maxdelay : size);
        number val = this->allpass_tilde_05_feedBack_read(effectiveSize, 0);
        this->allpass_tilde_05_feedBack_write(v);
        this->allpass_tilde_05_feedBack_step();
        return val;
    }
    
    array<Index, 2> allpass_tilde_05_feedBack_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->allpass_tilde_05_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->allpass_tilde_05_feedBack_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void allpass_tilde_05_feedBack_init() {
        auto result = this->allpass_tilde_05_feedBack_calcSizeInSamples();
        this->allpass_tilde_05_feedBack__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_05_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
        this->allpass_tilde_05_feedBack_wrap = requestedSizeInSamples - 1;
    }
    
    void allpass_tilde_05_feedBack_clear() {
        this->allpass_tilde_05_feedBack_buffer->setZero();
    }
    
    void allpass_tilde_05_feedBack_reset() {
        auto result = this->allpass_tilde_05_feedBack_calcSizeInSamples();
        this->allpass_tilde_05_feedBack__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_05_feedBack_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->allpass_tilde_05_feedBack_buffer);
        this->allpass_tilde_05_feedBack_wrap = this->allpass_tilde_05_feedBack_buffer->getSize() - 1;
        this->allpass_tilde_05_feedBack_clear();
    
        if (this->allpass_tilde_05_feedBack_reader >= this->allpass_tilde_05_feedBack__maxdelay || this->allpass_tilde_05_feedBack_writer >= this->allpass_tilde_05_feedBack__maxdelay) {
            this->allpass_tilde_05_feedBack_reader = 0;
            this->allpass_tilde_05_feedBack_writer = 0;
        }
    }
    
    void allpass_tilde_05_feedBack_dspsetup() {
        this->allpass_tilde_05_feedBack_reset();
    }
    
    number allpass_tilde_05_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number allpass_tilde_05_feedBack_size() {
        return this->allpass_tilde_05_feedBack__maxdelay;
    }
    
    void allpass_tilde_05_init() {
        this->allpass_tilde_05_feedForward_init();
        this->allpass_tilde_05_feedBack_init();
    }
    
    void allpass_tilde_05_clear() {
        this->allpass_tilde_05_feedForward_clear();
        this->allpass_tilde_05_feedBack_clear();
    }
    
    void allpass_tilde_05_reset() {
        this->allpass_tilde_05_init();
        this->allpass_tilde_05_clear();
    }
    
    void allpass_tilde_05_dspsetup(bool force) {
        if ((bool)(this->allpass_tilde_05_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->allpass_tilde_05_reset();
        this->allpass_tilde_05_setupDone = true;
        this->allpass_tilde_05_feedForward_dspsetup();
        this->allpass_tilde_05_feedBack_dspsetup();
    }
    
    void allpass_tilde_06_feedForward_step() {
        this->allpass_tilde_06_feedForward_reader++;
    
        if (this->allpass_tilde_06_feedForward_reader >= (int)(this->allpass_tilde_06_feedForward_buffer->getSize()))
            this->allpass_tilde_06_feedForward_reader = 0;
    }
    
    number allpass_tilde_06_feedForward_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
            ), this->allpass_tilde_06_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? 1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
            ), this->allpass_tilde_06_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
            ), this->allpass_tilde_06_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
            ), this->allpass_tilde_06_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? 1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
            ), this->allpass_tilde_06_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
            ), this->allpass_tilde_06_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
            ), this->allpass_tilde_06_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
            ), this->allpass_tilde_06_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
            ));
        }
    
        number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->allpass_tilde_06_feedForward_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
        );
    }
    
    void allpass_tilde_06_feedForward_write(number v) {
        this->allpass_tilde_06_feedForward_writer = this->allpass_tilde_06_feedForward_reader;
        this->allpass_tilde_06_feedForward_buffer[(Index)this->allpass_tilde_06_feedForward_writer] = v;
    }
    
    number allpass_tilde_06_feedForward_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->allpass_tilde_06_feedForward__maxdelay : size);
        number val = this->allpass_tilde_06_feedForward_read(effectiveSize, 0);
        this->allpass_tilde_06_feedForward_write(v);
        this->allpass_tilde_06_feedForward_step();
        return val;
    }
    
    array<Index, 2> allpass_tilde_06_feedForward_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->allpass_tilde_06_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->allpass_tilde_06_feedForward_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void allpass_tilde_06_feedForward_init() {
        auto result = this->allpass_tilde_06_feedForward_calcSizeInSamples();
        this->allpass_tilde_06_feedForward__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_06_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
        this->allpass_tilde_06_feedForward_wrap = requestedSizeInSamples - 1;
    }
    
    void allpass_tilde_06_feedForward_clear() {
        this->allpass_tilde_06_feedForward_buffer->setZero();
    }
    
    void allpass_tilde_06_feedForward_reset() {
        auto result = this->allpass_tilde_06_feedForward_calcSizeInSamples();
        this->allpass_tilde_06_feedForward__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_06_feedForward_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->allpass_tilde_06_feedForward_buffer);
        this->allpass_tilde_06_feedForward_wrap = this->allpass_tilde_06_feedForward_buffer->getSize() - 1;
        this->allpass_tilde_06_feedForward_clear();
    
        if (this->allpass_tilde_06_feedForward_reader >= this->allpass_tilde_06_feedForward__maxdelay || this->allpass_tilde_06_feedForward_writer >= this->allpass_tilde_06_feedForward__maxdelay) {
            this->allpass_tilde_06_feedForward_reader = 0;
            this->allpass_tilde_06_feedForward_writer = 0;
        }
    }
    
    void allpass_tilde_06_feedForward_dspsetup() {
        this->allpass_tilde_06_feedForward_reset();
    }
    
    number allpass_tilde_06_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number allpass_tilde_06_feedForward_size() {
        return this->allpass_tilde_06_feedForward__maxdelay;
    }
    
    void allpass_tilde_06_feedBack_step() {
        this->allpass_tilde_06_feedBack_reader++;
    
        if (this->allpass_tilde_06_feedBack_reader >= (int)(this->allpass_tilde_06_feedBack_buffer->getSize()))
            this->allpass_tilde_06_feedBack_reader = 0;
    }
    
    number allpass_tilde_06_feedBack_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
            ), this->allpass_tilde_06_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? 1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
            ), this->allpass_tilde_06_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
            ), this->allpass_tilde_06_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
            ), this->allpass_tilde_06_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? 1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
            ), this->allpass_tilde_06_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
            ), this->allpass_tilde_06_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
            ), this->allpass_tilde_06_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
            ), this->allpass_tilde_06_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
            ));
        }
    
        number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->allpass_tilde_06_feedBack_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
        );
    }
    
    void allpass_tilde_06_feedBack_write(number v) {
        this->allpass_tilde_06_feedBack_writer = this->allpass_tilde_06_feedBack_reader;
        this->allpass_tilde_06_feedBack_buffer[(Index)this->allpass_tilde_06_feedBack_writer] = v;
    }
    
    number allpass_tilde_06_feedBack_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->allpass_tilde_06_feedBack__maxdelay : size);
        number val = this->allpass_tilde_06_feedBack_read(effectiveSize, 0);
        this->allpass_tilde_06_feedBack_write(v);
        this->allpass_tilde_06_feedBack_step();
        return val;
    }
    
    array<Index, 2> allpass_tilde_06_feedBack_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->allpass_tilde_06_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->allpass_tilde_06_feedBack_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void allpass_tilde_06_feedBack_init() {
        auto result = this->allpass_tilde_06_feedBack_calcSizeInSamples();
        this->allpass_tilde_06_feedBack__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_06_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
        this->allpass_tilde_06_feedBack_wrap = requestedSizeInSamples - 1;
    }
    
    void allpass_tilde_06_feedBack_clear() {
        this->allpass_tilde_06_feedBack_buffer->setZero();
    }
    
    void allpass_tilde_06_feedBack_reset() {
        auto result = this->allpass_tilde_06_feedBack_calcSizeInSamples();
        this->allpass_tilde_06_feedBack__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_06_feedBack_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->allpass_tilde_06_feedBack_buffer);
        this->allpass_tilde_06_feedBack_wrap = this->allpass_tilde_06_feedBack_buffer->getSize() - 1;
        this->allpass_tilde_06_feedBack_clear();
    
        if (this->allpass_tilde_06_feedBack_reader >= this->allpass_tilde_06_feedBack__maxdelay || this->allpass_tilde_06_feedBack_writer >= this->allpass_tilde_06_feedBack__maxdelay) {
            this->allpass_tilde_06_feedBack_reader = 0;
            this->allpass_tilde_06_feedBack_writer = 0;
        }
    }
    
    void allpass_tilde_06_feedBack_dspsetup() {
        this->allpass_tilde_06_feedBack_reset();
    }
    
    number allpass_tilde_06_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number allpass_tilde_06_feedBack_size() {
        return this->allpass_tilde_06_feedBack__maxdelay;
    }
    
    void allpass_tilde_06_init() {
        this->allpass_tilde_06_feedForward_init();
        this->allpass_tilde_06_feedBack_init();
    }
    
    void allpass_tilde_06_clear() {
        this->allpass_tilde_06_feedForward_clear();
        this->allpass_tilde_06_feedBack_clear();
    }
    
    void allpass_tilde_06_reset() {
        this->allpass_tilde_06_init();
        this->allpass_tilde_06_clear();
    }
    
    void allpass_tilde_06_dspsetup(bool force) {
        if ((bool)(this->allpass_tilde_06_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->allpass_tilde_06_reset();
        this->allpass_tilde_06_setupDone = true;
        this->allpass_tilde_06_feedForward_dspsetup();
        this->allpass_tilde_06_feedBack_dspsetup();
    }
    
    void onepole_tilde_02_reset() {
        this->onepole_tilde_02_lastY = 0;
        this->onepole_tilde_02_a0 = 0;
        this->onepole_tilde_02_b1 = 0;
    }
    
    void onepole_tilde_02_dspsetup(bool force) {
        if ((bool)(this->onepole_tilde_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->onepole_tilde_02_needsUpdate = true;
        this->onepole_tilde_02_reset();
        this->onepole_tilde_02_setupDone = true;
    }
    
    void ip_01_init() {
        this->ip_01_lastValue = this->ip_01_value;
    }
    
    void ip_01_fillSigBuf() {
        if ((bool)(this->ip_01_sigbuf)) {
            SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);
    
            if (k >= (SampleIndex)(this->vs))
                k = (SampleIndex)(this->vs) - 1;
    
            for (SampleIndex i = (SampleIndex)(this->ip_01_lastIndex); i < k; i++) {
                if (this->ip_01_resetCount > 0) {
                    this->ip_01_sigbuf[(Index)i] = 1;
                    this->ip_01_resetCount--;
                } else {
                    this->ip_01_sigbuf[(Index)i] = this->ip_01_lastValue;
                }
            }
    
            this->ip_01_lastIndex = k;
        }
    }
    
    void ip_01_dspsetup(bool force) {
        if ((bool)(this->ip_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->ip_01_lastIndex = 0;
        this->ip_01_setupDone = true;
    }
    
    void lores_01_reset() {
        this->lores_01_y_1 = 0;
        this->lores_01_y_2 = 0;
        this->lores_01_last_resonance = 0;
        this->lores_01_last_frequency = 0;
        this->lores_01_last_res_calc = 0;
        this->lores_01_last_freq_calc = 0;
    }
    
    void lores_01_dspsetup(bool force) {
        if ((bool)(this->lores_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->lores_01_reset();
        this->lores_01_setupDone = true;
    }
    
    void noise_tilde_01_init() {
        this->noise_tilde_01_reset();
    }
    
    void noise_tilde_01_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->noise_tilde_01_state
        );
    }
    
    void numberobj_01_init() {
        this->numberobj_01_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("reverb/number_obj-15"), 1, this->_currentTime);
    }
    
    void numberobj_01_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_01_value;
    }
    
    void numberobj_01_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_01_value_set(preset["value"]);
    }
    
    void numberobj_02_init() {
        this->numberobj_02_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("reverb/number_obj-14"), 1, this->_currentTime);
    }
    
    void numberobj_02_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_02_value;
    }
    
    void numberobj_02_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_02_value_set(preset["value"]);
    }
    
    void numberobj_03_init() {
        this->numberobj_03_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("reverb/number_obj-16"), 1, this->_currentTime);
    }
    
    void numberobj_03_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_03_value;
    }
    
    void numberobj_03_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_03_value_set(preset["value"]);
    }
    
    void delaytilde_02_del_step() {
        this->delaytilde_02_del_reader++;
    
        if (this->delaytilde_02_del_reader >= (int)(this->delaytilde_02_del_buffer->getSize()))
            this->delaytilde_02_del_reader = 0;
    }
    
    number delaytilde_02_del_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_02_del_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_02_del_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
            ), this->delaytilde_02_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
            ));
        }
    
        number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->delaytilde_02_del_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
        );
    }
    
    void delaytilde_02_del_write(number v) {
        this->delaytilde_02_del_writer = this->delaytilde_02_del_reader;
        this->delaytilde_02_del_buffer[(Index)this->delaytilde_02_del_writer] = v;
    }
    
    number delaytilde_02_del_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->delaytilde_02_del__maxdelay : size);
        number val = this->delaytilde_02_del_read(effectiveSize, 0);
        this->delaytilde_02_del_write(v);
        this->delaytilde_02_del_step();
        return val;
    }
    
    array<Index, 2> delaytilde_02_del_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->delaytilde_02_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->delaytilde_02_del_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void delaytilde_02_del_init() {
        auto result = this->delaytilde_02_del_calcSizeInSamples();
        this->delaytilde_02_del__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->delaytilde_02_del_buffer->requestSize(requestedSizeInSamples, 1);
        this->delaytilde_02_del_wrap = requestedSizeInSamples - 1;
    }
    
    void delaytilde_02_del_clear() {
        this->delaytilde_02_del_buffer->setZero();
    }
    
    void delaytilde_02_del_reset() {
        auto result = this->delaytilde_02_del_calcSizeInSamples();
        this->delaytilde_02_del__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->delaytilde_02_del_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->delaytilde_02_del_buffer);
        this->delaytilde_02_del_wrap = this->delaytilde_02_del_buffer->getSize() - 1;
        this->delaytilde_02_del_clear();
    
        if (this->delaytilde_02_del_reader >= this->delaytilde_02_del__maxdelay || this->delaytilde_02_del_writer >= this->delaytilde_02_del__maxdelay) {
            this->delaytilde_02_del_reader = 0;
            this->delaytilde_02_del_writer = 0;
        }
    }
    
    void delaytilde_02_del_dspsetup() {
        this->delaytilde_02_del_reset();
    }
    
    number delaytilde_02_del_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        return samplerate;
    }
    
    number delaytilde_02_del_size() {
        return this->delaytilde_02_del__maxdelay;
    }
    
    void delaytilde_02_dspsetup(bool force) {
        if ((bool)(this->delaytilde_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->delaytilde_02_rampInSamples = (long)(this->mstosamps(50));
        this->delaytilde_02_lastDelay = -1;
        this->delaytilde_02_setupDone = true;
        this->delaytilde_02_del_dspsetup();
    }
    
    void allpass_tilde_07_feedForward_step() {
        this->allpass_tilde_07_feedForward_reader++;
    
        if (this->allpass_tilde_07_feedForward_reader >= (int)(this->allpass_tilde_07_feedForward_buffer->getSize()))
            this->allpass_tilde_07_feedForward_reader = 0;
    }
    
    number allpass_tilde_07_feedForward_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
            ), this->allpass_tilde_07_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? 1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
            ), this->allpass_tilde_07_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
            ), this->allpass_tilde_07_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
            ), this->allpass_tilde_07_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? 1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
            ), this->allpass_tilde_07_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
            ), this->allpass_tilde_07_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
            ), this->allpass_tilde_07_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
            ), this->allpass_tilde_07_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
            ));
        }
    
        number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->allpass_tilde_07_feedForward_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
        );
    }
    
    void allpass_tilde_07_feedForward_write(number v) {
        this->allpass_tilde_07_feedForward_writer = this->allpass_tilde_07_feedForward_reader;
        this->allpass_tilde_07_feedForward_buffer[(Index)this->allpass_tilde_07_feedForward_writer] = v;
    }
    
    number allpass_tilde_07_feedForward_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->allpass_tilde_07_feedForward__maxdelay : size);
        number val = this->allpass_tilde_07_feedForward_read(effectiveSize, 0);
        this->allpass_tilde_07_feedForward_write(v);
        this->allpass_tilde_07_feedForward_step();
        return val;
    }
    
    array<Index, 2> allpass_tilde_07_feedForward_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->allpass_tilde_07_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->allpass_tilde_07_feedForward_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void allpass_tilde_07_feedForward_init() {
        auto result = this->allpass_tilde_07_feedForward_calcSizeInSamples();
        this->allpass_tilde_07_feedForward__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_07_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
        this->allpass_tilde_07_feedForward_wrap = requestedSizeInSamples - 1;
    }
    
    void allpass_tilde_07_feedForward_clear() {
        this->allpass_tilde_07_feedForward_buffer->setZero();
    }
    
    void allpass_tilde_07_feedForward_reset() {
        auto result = this->allpass_tilde_07_feedForward_calcSizeInSamples();
        this->allpass_tilde_07_feedForward__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_07_feedForward_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->allpass_tilde_07_feedForward_buffer);
        this->allpass_tilde_07_feedForward_wrap = this->allpass_tilde_07_feedForward_buffer->getSize() - 1;
        this->allpass_tilde_07_feedForward_clear();
    
        if (this->allpass_tilde_07_feedForward_reader >= this->allpass_tilde_07_feedForward__maxdelay || this->allpass_tilde_07_feedForward_writer >= this->allpass_tilde_07_feedForward__maxdelay) {
            this->allpass_tilde_07_feedForward_reader = 0;
            this->allpass_tilde_07_feedForward_writer = 0;
        }
    }
    
    void allpass_tilde_07_feedForward_dspsetup() {
        this->allpass_tilde_07_feedForward_reset();
    }
    
    number allpass_tilde_07_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number allpass_tilde_07_feedForward_size() {
        return this->allpass_tilde_07_feedForward__maxdelay;
    }
    
    void allpass_tilde_07_feedBack_step() {
        this->allpass_tilde_07_feedBack_reader++;
    
        if (this->allpass_tilde_07_feedBack_reader >= (int)(this->allpass_tilde_07_feedBack_buffer->getSize()))
            this->allpass_tilde_07_feedBack_reader = 0;
    }
    
    number allpass_tilde_07_feedBack_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
            ), this->allpass_tilde_07_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? 1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
            ), this->allpass_tilde_07_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
            ), this->allpass_tilde_07_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
            ), this->allpass_tilde_07_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? 1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
            ), this->allpass_tilde_07_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
            ), this->allpass_tilde_07_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
            ), this->allpass_tilde_07_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
            ), this->allpass_tilde_07_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
            ));
        }
    
        number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->allpass_tilde_07_feedBack_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
        );
    }
    
    void allpass_tilde_07_feedBack_write(number v) {
        this->allpass_tilde_07_feedBack_writer = this->allpass_tilde_07_feedBack_reader;
        this->allpass_tilde_07_feedBack_buffer[(Index)this->allpass_tilde_07_feedBack_writer] = v;
    }
    
    number allpass_tilde_07_feedBack_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->allpass_tilde_07_feedBack__maxdelay : size);
        number val = this->allpass_tilde_07_feedBack_read(effectiveSize, 0);
        this->allpass_tilde_07_feedBack_write(v);
        this->allpass_tilde_07_feedBack_step();
        return val;
    }
    
    array<Index, 2> allpass_tilde_07_feedBack_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->allpass_tilde_07_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->allpass_tilde_07_feedBack_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void allpass_tilde_07_feedBack_init() {
        auto result = this->allpass_tilde_07_feedBack_calcSizeInSamples();
        this->allpass_tilde_07_feedBack__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_07_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
        this->allpass_tilde_07_feedBack_wrap = requestedSizeInSamples - 1;
    }
    
    void allpass_tilde_07_feedBack_clear() {
        this->allpass_tilde_07_feedBack_buffer->setZero();
    }
    
    void allpass_tilde_07_feedBack_reset() {
        auto result = this->allpass_tilde_07_feedBack_calcSizeInSamples();
        this->allpass_tilde_07_feedBack__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_07_feedBack_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->allpass_tilde_07_feedBack_buffer);
        this->allpass_tilde_07_feedBack_wrap = this->allpass_tilde_07_feedBack_buffer->getSize() - 1;
        this->allpass_tilde_07_feedBack_clear();
    
        if (this->allpass_tilde_07_feedBack_reader >= this->allpass_tilde_07_feedBack__maxdelay || this->allpass_tilde_07_feedBack_writer >= this->allpass_tilde_07_feedBack__maxdelay) {
            this->allpass_tilde_07_feedBack_reader = 0;
            this->allpass_tilde_07_feedBack_writer = 0;
        }
    }
    
    void allpass_tilde_07_feedBack_dspsetup() {
        this->allpass_tilde_07_feedBack_reset();
    }
    
    number allpass_tilde_07_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number allpass_tilde_07_feedBack_size() {
        return this->allpass_tilde_07_feedBack__maxdelay;
    }
    
    void allpass_tilde_07_init() {
        this->allpass_tilde_07_feedForward_init();
        this->allpass_tilde_07_feedBack_init();
    }
    
    void allpass_tilde_07_clear() {
        this->allpass_tilde_07_feedForward_clear();
        this->allpass_tilde_07_feedBack_clear();
    }
    
    void allpass_tilde_07_reset() {
        this->allpass_tilde_07_init();
        this->allpass_tilde_07_clear();
    }
    
    void allpass_tilde_07_dspsetup(bool force) {
        if ((bool)(this->allpass_tilde_07_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->allpass_tilde_07_reset();
        this->allpass_tilde_07_setupDone = true;
        this->allpass_tilde_07_feedForward_dspsetup();
        this->allpass_tilde_07_feedBack_dspsetup();
    }
    
    void onepole_tilde_03_reset() {
        this->onepole_tilde_03_lastY = 0;
        this->onepole_tilde_03_a0 = 0;
        this->onepole_tilde_03_b1 = 0;
    }
    
    void onepole_tilde_03_dspsetup(bool force) {
        if ((bool)(this->onepole_tilde_03_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->onepole_tilde_03_needsUpdate = true;
        this->onepole_tilde_03_reset();
        this->onepole_tilde_03_setupDone = true;
    }
    
    void comb_tilde_16_feedForward_step() {
        this->comb_tilde_16_feedForward_reader++;
    
        if (this->comb_tilde_16_feedForward_reader >= (int)(this->comb_tilde_16_feedForward_buffer->getSize()))
            this->comb_tilde_16_feedForward_reader = 0;
    }
    
    number comb_tilde_16_feedForward_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
            ), this->comb_tilde_16_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? 1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
            ), this->comb_tilde_16_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
            ), this->comb_tilde_16_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
            ), this->comb_tilde_16_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? 1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
            ), this->comb_tilde_16_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
            ), this->comb_tilde_16_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
            ), this->comb_tilde_16_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
            ), this->comb_tilde_16_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
            ));
        }
    
        number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->comb_tilde_16_feedForward_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
        );
    }
    
    void comb_tilde_16_feedForward_write(number v) {
        this->comb_tilde_16_feedForward_writer = this->comb_tilde_16_feedForward_reader;
        this->comb_tilde_16_feedForward_buffer[(Index)this->comb_tilde_16_feedForward_writer] = v;
    }
    
    number comb_tilde_16_feedForward_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->comb_tilde_16_feedForward__maxdelay : size);
        number val = this->comb_tilde_16_feedForward_read(effectiveSize, 0);
        this->comb_tilde_16_feedForward_write(v);
        this->comb_tilde_16_feedForward_step();
        return val;
    }
    
    array<Index, 2> comb_tilde_16_feedForward_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->comb_tilde_16_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->comb_tilde_16_feedForward_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void comb_tilde_16_feedForward_init() {
        auto result = this->comb_tilde_16_feedForward_calcSizeInSamples();
        this->comb_tilde_16_feedForward__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->comb_tilde_16_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
        this->comb_tilde_16_feedForward_wrap = requestedSizeInSamples - 1;
    }
    
    void comb_tilde_16_feedForward_clear() {
        this->comb_tilde_16_feedForward_buffer->setZero();
    }
    
    void comb_tilde_16_feedForward_reset() {
        auto result = this->comb_tilde_16_feedForward_calcSizeInSamples();
        this->comb_tilde_16_feedForward__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->comb_tilde_16_feedForward_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->comb_tilde_16_feedForward_buffer);
        this->comb_tilde_16_feedForward_wrap = this->comb_tilde_16_feedForward_buffer->getSize() - 1;
        this->comb_tilde_16_feedForward_clear();
    
        if (this->comb_tilde_16_feedForward_reader >= this->comb_tilde_16_feedForward__maxdelay || this->comb_tilde_16_feedForward_writer >= this->comb_tilde_16_feedForward__maxdelay) {
            this->comb_tilde_16_feedForward_reader = 0;
            this->comb_tilde_16_feedForward_writer = 0;
        }
    }
    
    void comb_tilde_16_feedForward_dspsetup() {
        this->comb_tilde_16_feedForward_reset();
    }
    
    number comb_tilde_16_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number comb_tilde_16_feedForward_size() {
        return this->comb_tilde_16_feedForward__maxdelay;
    }
    
    void comb_tilde_16_feedBack_step() {
        this->comb_tilde_16_feedBack_reader++;
    
        if (this->comb_tilde_16_feedBack_reader >= (int)(this->comb_tilde_16_feedBack_buffer->getSize()))
            this->comb_tilde_16_feedBack_reader = 0;
    }
    
    number comb_tilde_16_feedBack_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
            ), this->comb_tilde_16_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? 1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
            ), this->comb_tilde_16_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
            ), this->comb_tilde_16_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
            ), this->comb_tilde_16_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? 1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
            ), this->comb_tilde_16_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
            ), this->comb_tilde_16_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
            ), this->comb_tilde_16_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
            ), this->comb_tilde_16_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
            ));
        }
    
        number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->comb_tilde_16_feedBack_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
        );
    }
    
    void comb_tilde_16_feedBack_write(number v) {
        this->comb_tilde_16_feedBack_writer = this->comb_tilde_16_feedBack_reader;
        this->comb_tilde_16_feedBack_buffer[(Index)this->comb_tilde_16_feedBack_writer] = v;
    }
    
    number comb_tilde_16_feedBack_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->comb_tilde_16_feedBack__maxdelay : size);
        number val = this->comb_tilde_16_feedBack_read(effectiveSize, 0);
        this->comb_tilde_16_feedBack_write(v);
        this->comb_tilde_16_feedBack_step();
        return val;
    }
    
    array<Index, 2> comb_tilde_16_feedBack_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->comb_tilde_16_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->comb_tilde_16_feedBack_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void comb_tilde_16_feedBack_init() {
        auto result = this->comb_tilde_16_feedBack_calcSizeInSamples();
        this->comb_tilde_16_feedBack__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->comb_tilde_16_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
        this->comb_tilde_16_feedBack_wrap = requestedSizeInSamples - 1;
    }
    
    void comb_tilde_16_feedBack_clear() {
        this->comb_tilde_16_feedBack_buffer->setZero();
    }
    
    void comb_tilde_16_feedBack_reset() {
        auto result = this->comb_tilde_16_feedBack_calcSizeInSamples();
        this->comb_tilde_16_feedBack__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->comb_tilde_16_feedBack_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->comb_tilde_16_feedBack_buffer);
        this->comb_tilde_16_feedBack_wrap = this->comb_tilde_16_feedBack_buffer->getSize() - 1;
        this->comb_tilde_16_feedBack_clear();
    
        if (this->comb_tilde_16_feedBack_reader >= this->comb_tilde_16_feedBack__maxdelay || this->comb_tilde_16_feedBack_writer >= this->comb_tilde_16_feedBack__maxdelay) {
            this->comb_tilde_16_feedBack_reader = 0;
            this->comb_tilde_16_feedBack_writer = 0;
        }
    }
    
    void comb_tilde_16_feedBack_dspsetup() {
        this->comb_tilde_16_feedBack_reset();
    }
    
    number comb_tilde_16_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number comb_tilde_16_feedBack_size() {
        return this->comb_tilde_16_feedBack__maxdelay;
    }
    
    void comb_tilde_16_init() {
        this->comb_tilde_16_feedForward_init();
        this->comb_tilde_16_feedBack_init();
    }
    
    void comb_tilde_16_clear() {
        this->comb_tilde_16_feedForward_clear();
        this->comb_tilde_16_feedBack_clear();
    }
    
    void comb_tilde_16_reset() {
        this->comb_tilde_16_init();
        this->comb_tilde_16_clear();
    }
    
    void comb_tilde_16_dspsetup(bool force) {
        if ((bool)(this->comb_tilde_16_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->comb_tilde_16_reset();
        this->comb_tilde_16_setupDone = true;
        this->comb_tilde_16_feedForward_dspsetup();
        this->comb_tilde_16_feedBack_dspsetup();
    }
    
    void allpass_tilde_08_feedForward_step() {
        this->allpass_tilde_08_feedForward_reader++;
    
        if (this->allpass_tilde_08_feedForward_reader >= (int)(this->allpass_tilde_08_feedForward_buffer->getSize()))
            this->allpass_tilde_08_feedForward_reader = 0;
    }
    
    number allpass_tilde_08_feedForward_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
            ), this->allpass_tilde_08_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? 1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
            ), this->allpass_tilde_08_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
            ), this->allpass_tilde_08_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
            ), this->allpass_tilde_08_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? 1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
            ), this->allpass_tilde_08_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
            ), this->allpass_tilde_08_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
            ), this->allpass_tilde_08_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
            ), this->allpass_tilde_08_feedForward_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
            ));
        }
    
        number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->allpass_tilde_08_feedForward_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
        );
    }
    
    void allpass_tilde_08_feedForward_write(number v) {
        this->allpass_tilde_08_feedForward_writer = this->allpass_tilde_08_feedForward_reader;
        this->allpass_tilde_08_feedForward_buffer[(Index)this->allpass_tilde_08_feedForward_writer] = v;
    }
    
    number allpass_tilde_08_feedForward_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->allpass_tilde_08_feedForward__maxdelay : size);
        number val = this->allpass_tilde_08_feedForward_read(effectiveSize, 0);
        this->allpass_tilde_08_feedForward_write(v);
        this->allpass_tilde_08_feedForward_step();
        return val;
    }
    
    array<Index, 2> allpass_tilde_08_feedForward_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->allpass_tilde_08_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->allpass_tilde_08_feedForward_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void allpass_tilde_08_feedForward_init() {
        auto result = this->allpass_tilde_08_feedForward_calcSizeInSamples();
        this->allpass_tilde_08_feedForward__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_08_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
        this->allpass_tilde_08_feedForward_wrap = requestedSizeInSamples - 1;
    }
    
    void allpass_tilde_08_feedForward_clear() {
        this->allpass_tilde_08_feedForward_buffer->setZero();
    }
    
    void allpass_tilde_08_feedForward_reset() {
        auto result = this->allpass_tilde_08_feedForward_calcSizeInSamples();
        this->allpass_tilde_08_feedForward__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_08_feedForward_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->allpass_tilde_08_feedForward_buffer);
        this->allpass_tilde_08_feedForward_wrap = this->allpass_tilde_08_feedForward_buffer->getSize() - 1;
        this->allpass_tilde_08_feedForward_clear();
    
        if (this->allpass_tilde_08_feedForward_reader >= this->allpass_tilde_08_feedForward__maxdelay || this->allpass_tilde_08_feedForward_writer >= this->allpass_tilde_08_feedForward__maxdelay) {
            this->allpass_tilde_08_feedForward_reader = 0;
            this->allpass_tilde_08_feedForward_writer = 0;
        }
    }
    
    void allpass_tilde_08_feedForward_dspsetup() {
        this->allpass_tilde_08_feedForward_reset();
    }
    
    number allpass_tilde_08_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number allpass_tilde_08_feedForward_size() {
        return this->allpass_tilde_08_feedForward__maxdelay;
    }
    
    void allpass_tilde_08_feedBack_step() {
        this->allpass_tilde_08_feedBack_reader++;
    
        if (this->allpass_tilde_08_feedBack_reader >= (int)(this->allpass_tilde_08_feedBack_buffer->getSize()))
            this->allpass_tilde_08_feedBack_reader = 0;
    }
    
    number allpass_tilde_08_feedBack_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
            ), this->allpass_tilde_08_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? 1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
            ), this->allpass_tilde_08_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
            ), this->allpass_tilde_08_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
            ), this->allpass_tilde_08_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? 1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
            ), this->allpass_tilde_08_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
            ), this->allpass_tilde_08_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
            ), this->allpass_tilde_08_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
            ), this->allpass_tilde_08_feedBack_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
            ));
        }
    
        number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->allpass_tilde_08_feedBack_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
        );
    }
    
    void allpass_tilde_08_feedBack_write(number v) {
        this->allpass_tilde_08_feedBack_writer = this->allpass_tilde_08_feedBack_reader;
        this->allpass_tilde_08_feedBack_buffer[(Index)this->allpass_tilde_08_feedBack_writer] = v;
    }
    
    number allpass_tilde_08_feedBack_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->allpass_tilde_08_feedBack__maxdelay : size);
        number val = this->allpass_tilde_08_feedBack_read(effectiveSize, 0);
        this->allpass_tilde_08_feedBack_write(v);
        this->allpass_tilde_08_feedBack_step();
        return val;
    }
    
    array<Index, 2> allpass_tilde_08_feedBack_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->allpass_tilde_08_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->allpass_tilde_08_feedBack_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void allpass_tilde_08_feedBack_init() {
        auto result = this->allpass_tilde_08_feedBack_calcSizeInSamples();
        this->allpass_tilde_08_feedBack__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_08_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
        this->allpass_tilde_08_feedBack_wrap = requestedSizeInSamples - 1;
    }
    
    void allpass_tilde_08_feedBack_clear() {
        this->allpass_tilde_08_feedBack_buffer->setZero();
    }
    
    void allpass_tilde_08_feedBack_reset() {
        auto result = this->allpass_tilde_08_feedBack_calcSizeInSamples();
        this->allpass_tilde_08_feedBack__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->allpass_tilde_08_feedBack_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->allpass_tilde_08_feedBack_buffer);
        this->allpass_tilde_08_feedBack_wrap = this->allpass_tilde_08_feedBack_buffer->getSize() - 1;
        this->allpass_tilde_08_feedBack_clear();
    
        if (this->allpass_tilde_08_feedBack_reader >= this->allpass_tilde_08_feedBack__maxdelay || this->allpass_tilde_08_feedBack_writer >= this->allpass_tilde_08_feedBack__maxdelay) {
            this->allpass_tilde_08_feedBack_reader = 0;
            this->allpass_tilde_08_feedBack_writer = 0;
        }
    }
    
    void allpass_tilde_08_feedBack_dspsetup() {
        this->allpass_tilde_08_feedBack_reset();
    }
    
    number allpass_tilde_08_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 44100;
    }
    
    number allpass_tilde_08_feedBack_size() {
        return this->allpass_tilde_08_feedBack__maxdelay;
    }
    
    void allpass_tilde_08_init() {
        this->allpass_tilde_08_feedForward_init();
        this->allpass_tilde_08_feedBack_init();
    }
    
    void allpass_tilde_08_clear() {
        this->allpass_tilde_08_feedForward_clear();
        this->allpass_tilde_08_feedBack_clear();
    }
    
    void allpass_tilde_08_reset() {
        this->allpass_tilde_08_init();
        this->allpass_tilde_08_clear();
    }
    
    void allpass_tilde_08_dspsetup(bool force) {
        if ((bool)(this->allpass_tilde_08_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->allpass_tilde_08_reset();
        this->allpass_tilde_08_setupDone = true;
        this->allpass_tilde_08_feedForward_dspsetup();
        this->allpass_tilde_08_feedBack_dspsetup();
    }
    
    void ip_02_init() {
        this->ip_02_lastValue = this->ip_02_value;
    }
    
    void ip_02_fillSigBuf() {
        if ((bool)(this->ip_02_sigbuf)) {
            SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);
    
            if (k >= (SampleIndex)(this->vs))
                k = (SampleIndex)(this->vs) - 1;
    
            for (SampleIndex i = (SampleIndex)(this->ip_02_lastIndex); i < k; i++) {
                if (this->ip_02_resetCount > 0) {
                    this->ip_02_sigbuf[(Index)i] = 1;
                    this->ip_02_resetCount--;
                } else {
                    this->ip_02_sigbuf[(Index)i] = this->ip_02_lastValue;
                }
            }
    
            this->ip_02_lastIndex = k;
        }
    }
    
    void ip_02_dspsetup(bool force) {
        if ((bool)(this->ip_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->ip_02_lastIndex = 0;
        this->ip_02_setupDone = true;
    }
    
    void lores_02_reset() {
        this->lores_02_y_1 = 0;
        this->lores_02_y_2 = 0;
        this->lores_02_last_resonance = 0;
        this->lores_02_last_frequency = 0;
        this->lores_02_last_res_calc = 0;
        this->lores_02_last_freq_calc = 0;
    }
    
    void lores_02_dspsetup(bool force) {
        if ((bool)(this->lores_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->lores_02_reset();
        this->lores_02_setupDone = true;
    }
    
    void noise_tilde_02_init() {
        this->noise_tilde_02_reset();
    }
    
    void noise_tilde_02_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->noise_tilde_02_state
        );
    }
    
    void samplerate_01_onSampleRateChanged(number samplerate) {
        if (this->samplerate_01_samplerate != samplerate) {
            this->samplerate_01_samplerate_set(samplerate);
        }
    }
    
    void samplerate_01_dspsetup(bool force) {
        if ((bool)(this->samplerate_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->samplerate_01_onSampleRateChanged(this->samplerate());
        this->samplerate_01_setupDone = true;
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        p_01_target = 0;
        delaytilde_01_delay = 0;
        dspexpr_05_in1 = 0;
        dspexpr_05_in2 = 0.5;
        allpass_tilde_01_x = 0;
        allpass_tilde_01_delayTime = 200;
        allpass_tilde_01_gain = 60.48;
        onepole_tilde_01_x = 0;
        onepole_tilde_01_freqInHz = 1800;
        comb_tilde_15_x = 0;
        comb_tilde_15_delayTime = 1000;
        comb_tilde_15_gain = 149.6;
        comb_tilde_15_ffGain = 0;
        comb_tilde_15_fbGain = 1;
        allpass_tilde_02_x = 0;
        allpass_tilde_02_delayTime = 50;
        allpass_tilde_02_gain = 22.58;
        allpass_tilde_03_x = 0;
        allpass_tilde_03_delayTime = 20;
        allpass_tilde_03_gain = 9.3;
        allpass_tilde_04_x = 0;
        allpass_tilde_04_delayTime = 20;
        allpass_tilde_04_gain = 12.73;
        allpass_tilde_05_x = 0;
        allpass_tilde_05_delayTime = 10;
        allpass_tilde_05_gain = 3.58;
        allpass_tilde_06_x = 0;
        allpass_tilde_06_delayTime = 10;
        allpass_tilde_06_gain = 4.76;
        onepole_tilde_02_x = 0;
        onepole_tilde_02_freqInHz = 1800;
        ip_01_value = 0;
        ip_01_impulse = 0;
        expr_31_in1 = 0;
        expr_31_in2 = 149.6;
        expr_31_out1 = 0;
        expr_32_in1 = 0;
        expr_32_in2 = 60.48;
        expr_32_out1 = 0;
        expr_33_in1 = 0;
        expr_33_in2 = 22.58;
        expr_33_out1 = 0;
        dspexpr_06_in1 = 0;
        dspexpr_06_in2 = 20;
        lores_01_cutoff = 0;
        lores_01_resonance = 0.995;
        lores_01_resonance_setter(lores_01_resonance);
        expr_34_in1 = 0;
        expr_34_in2 = 0;
        expr_34_out1 = 0;
        expr_35_in1 = 0;
        expr_35_in2 = 125;
        expr_35_out1 = 0;
        numberobj_01_value = 0;
        numberobj_01_value_setter(numberobj_01_value);
        numberobj_02_value = 0;
        numberobj_02_value_setter(numberobj_02_value);
        numberobj_03_value = 0;
        numberobj_03_value_setter(numberobj_03_value);
        delaytilde_02_delay = 0;
        dspexpr_07_in1 = 0;
        dspexpr_07_in2 = 0.5;
        allpass_tilde_07_x = 0;
        allpass_tilde_07_delayTime = 200;
        allpass_tilde_07_gain = 89.24;
        onepole_tilde_03_x = 0;
        onepole_tilde_03_freqInHz = 1800;
        comb_tilde_16_x = 0;
        comb_tilde_16_delayTime = 1000;
        comb_tilde_16_gain = 141.7;
        comb_tilde_16_ffGain = 0;
        comb_tilde_16_fbGain = 1;
        allpass_tilde_08_x = 0;
        allpass_tilde_08_delayTime = 50;
        allpass_tilde_08_gain = 30.51;
        ip_02_value = 0;
        ip_02_impulse = 0;
        expr_36_in1 = 0;
        expr_36_in2 = 141.7;
        expr_36_out1 = 0;
        expr_37_in1 = 0;
        expr_37_in2 = 89.24;
        expr_37_out1 = 0;
        expr_38_in1 = 0;
        expr_38_in2 = 30.51;
        expr_38_out1 = 0;
        dspexpr_08_in1 = 0;
        dspexpr_08_in2 = 20;
        lores_02_cutoff = 0;
        lores_02_resonance = 0.995;
        lores_02_resonance_setter(lores_02_resonance);
        expr_39_in1 = 0;
        expr_39_in2 = 0;
        expr_39_out1 = 0;
        expr_40_in1 = 0;
        expr_40_in2 = 106.28;
        expr_40_out1 = 0;
        p_02_target = 0;
        expr_41_in1 = 0;
        expr_41_in2 = 1;
        expr_41_out1 = 0;
        expr_42_in1 = 0;
        expr_42_in2 = 1000;
        expr_42_out1 = 0;
        samplerate_01_samplerate = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        signals[4] = nullptr;
        signals[5] = nullptr;
        signals[6] = nullptr;
        signals[7] = nullptr;
        signals[8] = nullptr;
        signals[9] = nullptr;
        signals[10] = nullptr;
        signals[11] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        feedbacktilde_01_feedbackbuffer = nullptr;
        delaytilde_01_lastDelay = -1;
        delaytilde_01_crossfadeDelay = 0;
        delaytilde_01_ramp = 0;
        delaytilde_01_rampInSamples = 0;
        delaytilde_01_del__maxdelay = 0;
        delaytilde_01_del_sizemode = 0;
        delaytilde_01_del_wrap = 0;
        delaytilde_01_del_reader = 0;
        delaytilde_01_del_writer = 0;
        delaytilde_01_setupDone = false;
        allpass_tilde_01_feedForward__maxdelay = 0;
        allpass_tilde_01_feedForward_sizemode = 0;
        allpass_tilde_01_feedForward_wrap = 0;
        allpass_tilde_01_feedForward_reader = 0;
        allpass_tilde_01_feedForward_writer = 0;
        allpass_tilde_01_feedBack__maxdelay = 0;
        allpass_tilde_01_feedBack_sizemode = 0;
        allpass_tilde_01_feedBack_wrap = 0;
        allpass_tilde_01_feedBack_reader = 0;
        allpass_tilde_01_feedBack_writer = 0;
        allpass_tilde_01_setupDone = false;
        onepole_tilde_01_freq = 0;
        onepole_tilde_01_needsUpdate = false;
        onepole_tilde_01_lastY = 0;
        onepole_tilde_01_a0 = 0;
        onepole_tilde_01_b1 = 0;
        onepole_tilde_01_setupDone = false;
        comb_tilde_15_feedForward__maxdelay = 0;
        comb_tilde_15_feedForward_sizemode = 0;
        comb_tilde_15_feedForward_wrap = 0;
        comb_tilde_15_feedForward_reader = 0;
        comb_tilde_15_feedForward_writer = 0;
        comb_tilde_15_feedBack__maxdelay = 0;
        comb_tilde_15_feedBack_sizemode = 0;
        comb_tilde_15_feedBack_wrap = 0;
        comb_tilde_15_feedBack_reader = 0;
        comb_tilde_15_feedBack_writer = 0;
        comb_tilde_15_setupDone = false;
        allpass_tilde_02_feedForward__maxdelay = 0;
        allpass_tilde_02_feedForward_sizemode = 0;
        allpass_tilde_02_feedForward_wrap = 0;
        allpass_tilde_02_feedForward_reader = 0;
        allpass_tilde_02_feedForward_writer = 0;
        allpass_tilde_02_feedBack__maxdelay = 0;
        allpass_tilde_02_feedBack_sizemode = 0;
        allpass_tilde_02_feedBack_wrap = 0;
        allpass_tilde_02_feedBack_reader = 0;
        allpass_tilde_02_feedBack_writer = 0;
        allpass_tilde_02_setupDone = false;
        allpass_tilde_03_feedForward__maxdelay = 0;
        allpass_tilde_03_feedForward_sizemode = 0;
        allpass_tilde_03_feedForward_wrap = 0;
        allpass_tilde_03_feedForward_reader = 0;
        allpass_tilde_03_feedForward_writer = 0;
        allpass_tilde_03_feedBack__maxdelay = 0;
        allpass_tilde_03_feedBack_sizemode = 0;
        allpass_tilde_03_feedBack_wrap = 0;
        allpass_tilde_03_feedBack_reader = 0;
        allpass_tilde_03_feedBack_writer = 0;
        allpass_tilde_03_setupDone = false;
        allpass_tilde_04_feedForward__maxdelay = 0;
        allpass_tilde_04_feedForward_sizemode = 0;
        allpass_tilde_04_feedForward_wrap = 0;
        allpass_tilde_04_feedForward_reader = 0;
        allpass_tilde_04_feedForward_writer = 0;
        allpass_tilde_04_feedBack__maxdelay = 0;
        allpass_tilde_04_feedBack_sizemode = 0;
        allpass_tilde_04_feedBack_wrap = 0;
        allpass_tilde_04_feedBack_reader = 0;
        allpass_tilde_04_feedBack_writer = 0;
        allpass_tilde_04_setupDone = false;
        allpass_tilde_05_feedForward__maxdelay = 0;
        allpass_tilde_05_feedForward_sizemode = 0;
        allpass_tilde_05_feedForward_wrap = 0;
        allpass_tilde_05_feedForward_reader = 0;
        allpass_tilde_05_feedForward_writer = 0;
        allpass_tilde_05_feedBack__maxdelay = 0;
        allpass_tilde_05_feedBack_sizemode = 0;
        allpass_tilde_05_feedBack_wrap = 0;
        allpass_tilde_05_feedBack_reader = 0;
        allpass_tilde_05_feedBack_writer = 0;
        allpass_tilde_05_setupDone = false;
        allpass_tilde_06_feedForward__maxdelay = 0;
        allpass_tilde_06_feedForward_sizemode = 0;
        allpass_tilde_06_feedForward_wrap = 0;
        allpass_tilde_06_feedForward_reader = 0;
        allpass_tilde_06_feedForward_writer = 0;
        allpass_tilde_06_feedBack__maxdelay = 0;
        allpass_tilde_06_feedBack_sizemode = 0;
        allpass_tilde_06_feedBack_wrap = 0;
        allpass_tilde_06_feedBack_reader = 0;
        allpass_tilde_06_feedBack_writer = 0;
        allpass_tilde_06_setupDone = false;
        onepole_tilde_02_freq = 0;
        onepole_tilde_02_needsUpdate = false;
        onepole_tilde_02_lastY = 0;
        onepole_tilde_02_a0 = 0;
        onepole_tilde_02_b1 = 0;
        onepole_tilde_02_setupDone = false;
        ip_01_lastIndex = 0;
        ip_01_lastValue = 0;
        ip_01_resetCount = 0;
        ip_01_sigbuf = nullptr;
        ip_01_setupDone = false;
        lores_01_setupDone = false;
        numberobj_01_currentFormat = 6;
        numberobj_01_lastValue = 0;
        numberobj_02_currentFormat = 6;
        numberobj_02_lastValue = 0;
        numberobj_03_currentFormat = 6;
        numberobj_03_lastValue = 0;
        feedbacktilde_02_feedbackbuffer = nullptr;
        delaytilde_02_lastDelay = -1;
        delaytilde_02_crossfadeDelay = 0;
        delaytilde_02_ramp = 0;
        delaytilde_02_rampInSamples = 0;
        delaytilde_02_del__maxdelay = 0;
        delaytilde_02_del_sizemode = 0;
        delaytilde_02_del_wrap = 0;
        delaytilde_02_del_reader = 0;
        delaytilde_02_del_writer = 0;
        delaytilde_02_setupDone = false;
        allpass_tilde_07_feedForward__maxdelay = 0;
        allpass_tilde_07_feedForward_sizemode = 0;
        allpass_tilde_07_feedForward_wrap = 0;
        allpass_tilde_07_feedForward_reader = 0;
        allpass_tilde_07_feedForward_writer = 0;
        allpass_tilde_07_feedBack__maxdelay = 0;
        allpass_tilde_07_feedBack_sizemode = 0;
        allpass_tilde_07_feedBack_wrap = 0;
        allpass_tilde_07_feedBack_reader = 0;
        allpass_tilde_07_feedBack_writer = 0;
        allpass_tilde_07_setupDone = false;
        onepole_tilde_03_freq = 0;
        onepole_tilde_03_needsUpdate = false;
        onepole_tilde_03_lastY = 0;
        onepole_tilde_03_a0 = 0;
        onepole_tilde_03_b1 = 0;
        onepole_tilde_03_setupDone = false;
        comb_tilde_16_feedForward__maxdelay = 0;
        comb_tilde_16_feedForward_sizemode = 0;
        comb_tilde_16_feedForward_wrap = 0;
        comb_tilde_16_feedForward_reader = 0;
        comb_tilde_16_feedForward_writer = 0;
        comb_tilde_16_feedBack__maxdelay = 0;
        comb_tilde_16_feedBack_sizemode = 0;
        comb_tilde_16_feedBack_wrap = 0;
        comb_tilde_16_feedBack_reader = 0;
        comb_tilde_16_feedBack_writer = 0;
        comb_tilde_16_setupDone = false;
        allpass_tilde_08_feedForward__maxdelay = 0;
        allpass_tilde_08_feedForward_sizemode = 0;
        allpass_tilde_08_feedForward_wrap = 0;
        allpass_tilde_08_feedForward_reader = 0;
        allpass_tilde_08_feedForward_writer = 0;
        allpass_tilde_08_feedBack__maxdelay = 0;
        allpass_tilde_08_feedBack_sizemode = 0;
        allpass_tilde_08_feedBack_wrap = 0;
        allpass_tilde_08_feedBack_reader = 0;
        allpass_tilde_08_feedBack_writer = 0;
        allpass_tilde_08_setupDone = false;
        ip_02_lastIndex = 0;
        ip_02_lastValue = 0;
        ip_02_resetCount = 0;
        ip_02_sigbuf = nullptr;
        ip_02_setupDone = false;
        lores_02_setupDone = false;
        samplerate_01_setupDone = false;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number p_01_target;
        number delaytilde_01_delay;
        number dspexpr_05_in1;
        number dspexpr_05_in2;
        number allpass_tilde_01_x;
        number allpass_tilde_01_delayTime;
        number allpass_tilde_01_gain;
        number onepole_tilde_01_x;
        number onepole_tilde_01_freqInHz;
        number comb_tilde_15_x;
        number comb_tilde_15_delayTime;
        number comb_tilde_15_gain;
        number comb_tilde_15_ffGain;
        number comb_tilde_15_fbGain;
        number allpass_tilde_02_x;
        number allpass_tilde_02_delayTime;
        number allpass_tilde_02_gain;
        number allpass_tilde_03_x;
        number allpass_tilde_03_delayTime;
        number allpass_tilde_03_gain;
        number allpass_tilde_04_x;
        number allpass_tilde_04_delayTime;
        number allpass_tilde_04_gain;
        number allpass_tilde_05_x;
        number allpass_tilde_05_delayTime;
        number allpass_tilde_05_gain;
        number allpass_tilde_06_x;
        number allpass_tilde_06_delayTime;
        number allpass_tilde_06_gain;
        number onepole_tilde_02_x;
        number onepole_tilde_02_freqInHz;
        number ip_01_value;
        number ip_01_impulse;
        number expr_31_in1;
        number expr_31_in2;
        number expr_31_out1;
        number expr_32_in1;
        number expr_32_in2;
        number expr_32_out1;
        number expr_33_in1;
        number expr_33_in2;
        number expr_33_out1;
        number dspexpr_06_in1;
        number dspexpr_06_in2;
        number lores_01_cutoff;
        number lores_01_resonance;
        number expr_34_in1;
        number expr_34_in2;
        number expr_34_out1;
        number expr_35_in1;
        number expr_35_in2;
        number expr_35_out1;
        number numberobj_01_value;
        number numberobj_02_value;
        number numberobj_03_value;
        number delaytilde_02_delay;
        number dspexpr_07_in1;
        number dspexpr_07_in2;
        number allpass_tilde_07_x;
        number allpass_tilde_07_delayTime;
        number allpass_tilde_07_gain;
        number onepole_tilde_03_x;
        number onepole_tilde_03_freqInHz;
        number comb_tilde_16_x;
        number comb_tilde_16_delayTime;
        number comb_tilde_16_gain;
        number comb_tilde_16_ffGain;
        number comb_tilde_16_fbGain;
        number allpass_tilde_08_x;
        number allpass_tilde_08_delayTime;
        number allpass_tilde_08_gain;
        number ip_02_value;
        number ip_02_impulse;
        number expr_36_in1;
        number expr_36_in2;
        number expr_36_out1;
        number expr_37_in1;
        number expr_37_in2;
        number expr_37_out1;
        number expr_38_in1;
        number expr_38_in2;
        number expr_38_out1;
        number dspexpr_08_in1;
        number dspexpr_08_in2;
        number lores_02_cutoff;
        number lores_02_resonance;
        number expr_39_in1;
        number expr_39_in2;
        number expr_39_out1;
        number expr_40_in1;
        number expr_40_in2;
        number expr_40_out1;
        number p_02_target;
        number expr_41_in1;
        number expr_41_in2;
        number expr_41_out1;
        number expr_42_in1;
        number expr_42_in2;
        number expr_42_out1;
        number samplerate_01_samplerate;
        MillisecondTime _currentTime;
        SampleIndex audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[12];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        signal feedbacktilde_01_feedbackbuffer;
        number delaytilde_01_lastDelay;
        number delaytilde_01_crossfadeDelay;
        number delaytilde_01_ramp;
        long delaytilde_01_rampInSamples;
        Float64BufferRef delaytilde_01_del_buffer;
        Index delaytilde_01_del__maxdelay;
        Int delaytilde_01_del_sizemode;
        Index delaytilde_01_del_wrap;
        Int delaytilde_01_del_reader;
        Int delaytilde_01_del_writer;
        bool delaytilde_01_setupDone;
        Float64BufferRef allpass_tilde_01_feedForward_buffer;
        Index allpass_tilde_01_feedForward__maxdelay;
        Int allpass_tilde_01_feedForward_sizemode;
        Index allpass_tilde_01_feedForward_wrap;
        Int allpass_tilde_01_feedForward_reader;
        Int allpass_tilde_01_feedForward_writer;
        Float64BufferRef allpass_tilde_01_feedBack_buffer;
        Index allpass_tilde_01_feedBack__maxdelay;
        Int allpass_tilde_01_feedBack_sizemode;
        Index allpass_tilde_01_feedBack_wrap;
        Int allpass_tilde_01_feedBack_reader;
        Int allpass_tilde_01_feedBack_writer;
        bool allpass_tilde_01_setupDone;
        number onepole_tilde_01_freq;
        bool onepole_tilde_01_needsUpdate;
        number onepole_tilde_01_lastY;
        number onepole_tilde_01_a0;
        number onepole_tilde_01_b1;
        bool onepole_tilde_01_setupDone;
        Float64BufferRef comb_tilde_15_feedForward_buffer;
        Index comb_tilde_15_feedForward__maxdelay;
        Int comb_tilde_15_feedForward_sizemode;
        Index comb_tilde_15_feedForward_wrap;
        Int comb_tilde_15_feedForward_reader;
        Int comb_tilde_15_feedForward_writer;
        Float64BufferRef comb_tilde_15_feedBack_buffer;
        Index comb_tilde_15_feedBack__maxdelay;
        Int comb_tilde_15_feedBack_sizemode;
        Index comb_tilde_15_feedBack_wrap;
        Int comb_tilde_15_feedBack_reader;
        Int comb_tilde_15_feedBack_writer;
        bool comb_tilde_15_setupDone;
        Float64BufferRef allpass_tilde_02_feedForward_buffer;
        Index allpass_tilde_02_feedForward__maxdelay;
        Int allpass_tilde_02_feedForward_sizemode;
        Index allpass_tilde_02_feedForward_wrap;
        Int allpass_tilde_02_feedForward_reader;
        Int allpass_tilde_02_feedForward_writer;
        Float64BufferRef allpass_tilde_02_feedBack_buffer;
        Index allpass_tilde_02_feedBack__maxdelay;
        Int allpass_tilde_02_feedBack_sizemode;
        Index allpass_tilde_02_feedBack_wrap;
        Int allpass_tilde_02_feedBack_reader;
        Int allpass_tilde_02_feedBack_writer;
        bool allpass_tilde_02_setupDone;
        Float64BufferRef allpass_tilde_03_feedForward_buffer;
        Index allpass_tilde_03_feedForward__maxdelay;
        Int allpass_tilde_03_feedForward_sizemode;
        Index allpass_tilde_03_feedForward_wrap;
        Int allpass_tilde_03_feedForward_reader;
        Int allpass_tilde_03_feedForward_writer;
        Float64BufferRef allpass_tilde_03_feedBack_buffer;
        Index allpass_tilde_03_feedBack__maxdelay;
        Int allpass_tilde_03_feedBack_sizemode;
        Index allpass_tilde_03_feedBack_wrap;
        Int allpass_tilde_03_feedBack_reader;
        Int allpass_tilde_03_feedBack_writer;
        bool allpass_tilde_03_setupDone;
        Float64BufferRef allpass_tilde_04_feedForward_buffer;
        Index allpass_tilde_04_feedForward__maxdelay;
        Int allpass_tilde_04_feedForward_sizemode;
        Index allpass_tilde_04_feedForward_wrap;
        Int allpass_tilde_04_feedForward_reader;
        Int allpass_tilde_04_feedForward_writer;
        Float64BufferRef allpass_tilde_04_feedBack_buffer;
        Index allpass_tilde_04_feedBack__maxdelay;
        Int allpass_tilde_04_feedBack_sizemode;
        Index allpass_tilde_04_feedBack_wrap;
        Int allpass_tilde_04_feedBack_reader;
        Int allpass_tilde_04_feedBack_writer;
        bool allpass_tilde_04_setupDone;
        Float64BufferRef allpass_tilde_05_feedForward_buffer;
        Index allpass_tilde_05_feedForward__maxdelay;
        Int allpass_tilde_05_feedForward_sizemode;
        Index allpass_tilde_05_feedForward_wrap;
        Int allpass_tilde_05_feedForward_reader;
        Int allpass_tilde_05_feedForward_writer;
        Float64BufferRef allpass_tilde_05_feedBack_buffer;
        Index allpass_tilde_05_feedBack__maxdelay;
        Int allpass_tilde_05_feedBack_sizemode;
        Index allpass_tilde_05_feedBack_wrap;
        Int allpass_tilde_05_feedBack_reader;
        Int allpass_tilde_05_feedBack_writer;
        bool allpass_tilde_05_setupDone;
        Float64BufferRef allpass_tilde_06_feedForward_buffer;
        Index allpass_tilde_06_feedForward__maxdelay;
        Int allpass_tilde_06_feedForward_sizemode;
        Index allpass_tilde_06_feedForward_wrap;
        Int allpass_tilde_06_feedForward_reader;
        Int allpass_tilde_06_feedForward_writer;
        Float64BufferRef allpass_tilde_06_feedBack_buffer;
        Index allpass_tilde_06_feedBack__maxdelay;
        Int allpass_tilde_06_feedBack_sizemode;
        Index allpass_tilde_06_feedBack_wrap;
        Int allpass_tilde_06_feedBack_reader;
        Int allpass_tilde_06_feedBack_writer;
        bool allpass_tilde_06_setupDone;
        number onepole_tilde_02_freq;
        bool onepole_tilde_02_needsUpdate;
        number onepole_tilde_02_lastY;
        number onepole_tilde_02_a0;
        number onepole_tilde_02_b1;
        bool onepole_tilde_02_setupDone;
        SampleIndex ip_01_lastIndex;
        number ip_01_lastValue;
        SampleIndex ip_01_resetCount;
        signal ip_01_sigbuf;
        bool ip_01_setupDone;
        number lores_01_b_0;
        number lores_01_a_1;
        number lores_01_a_2;
        number lores_01_x_0;
        number lores_01_y_1;
        number lores_01_y_2;
        number lores_01_last_resonance;
        number lores_01_last_frequency;
        number lores_01_last_res_calc;
        number lores_01_last_freq_calc;
        bool lores_01_setupDone;
        UInt noise_tilde_01_state[4] = { };
        Int numberobj_01_currentFormat;
        number numberobj_01_lastValue;
        Int numberobj_02_currentFormat;
        number numberobj_02_lastValue;
        Int numberobj_03_currentFormat;
        number numberobj_03_lastValue;
        signal feedbacktilde_02_feedbackbuffer;
        number delaytilde_02_lastDelay;
        number delaytilde_02_crossfadeDelay;
        number delaytilde_02_ramp;
        long delaytilde_02_rampInSamples;
        Float64BufferRef delaytilde_02_del_buffer;
        Index delaytilde_02_del__maxdelay;
        Int delaytilde_02_del_sizemode;
        Index delaytilde_02_del_wrap;
        Int delaytilde_02_del_reader;
        Int delaytilde_02_del_writer;
        bool delaytilde_02_setupDone;
        Float64BufferRef allpass_tilde_07_feedForward_buffer;
        Index allpass_tilde_07_feedForward__maxdelay;
        Int allpass_tilde_07_feedForward_sizemode;
        Index allpass_tilde_07_feedForward_wrap;
        Int allpass_tilde_07_feedForward_reader;
        Int allpass_tilde_07_feedForward_writer;
        Float64BufferRef allpass_tilde_07_feedBack_buffer;
        Index allpass_tilde_07_feedBack__maxdelay;
        Int allpass_tilde_07_feedBack_sizemode;
        Index allpass_tilde_07_feedBack_wrap;
        Int allpass_tilde_07_feedBack_reader;
        Int allpass_tilde_07_feedBack_writer;
        bool allpass_tilde_07_setupDone;
        number onepole_tilde_03_freq;
        bool onepole_tilde_03_needsUpdate;
        number onepole_tilde_03_lastY;
        number onepole_tilde_03_a0;
        number onepole_tilde_03_b1;
        bool onepole_tilde_03_setupDone;
        Float64BufferRef comb_tilde_16_feedForward_buffer;
        Index comb_tilde_16_feedForward__maxdelay;
        Int comb_tilde_16_feedForward_sizemode;
        Index comb_tilde_16_feedForward_wrap;
        Int comb_tilde_16_feedForward_reader;
        Int comb_tilde_16_feedForward_writer;
        Float64BufferRef comb_tilde_16_feedBack_buffer;
        Index comb_tilde_16_feedBack__maxdelay;
        Int comb_tilde_16_feedBack_sizemode;
        Index comb_tilde_16_feedBack_wrap;
        Int comb_tilde_16_feedBack_reader;
        Int comb_tilde_16_feedBack_writer;
        bool comb_tilde_16_setupDone;
        Float64BufferRef allpass_tilde_08_feedForward_buffer;
        Index allpass_tilde_08_feedForward__maxdelay;
        Int allpass_tilde_08_feedForward_sizemode;
        Index allpass_tilde_08_feedForward_wrap;
        Int allpass_tilde_08_feedForward_reader;
        Int allpass_tilde_08_feedForward_writer;
        Float64BufferRef allpass_tilde_08_feedBack_buffer;
        Index allpass_tilde_08_feedBack__maxdelay;
        Int allpass_tilde_08_feedBack_sizemode;
        Index allpass_tilde_08_feedBack_wrap;
        Int allpass_tilde_08_feedBack_reader;
        Int allpass_tilde_08_feedBack_writer;
        bool allpass_tilde_08_setupDone;
        SampleIndex ip_02_lastIndex;
        number ip_02_lastValue;
        SampleIndex ip_02_resetCount;
        signal ip_02_sigbuf;
        bool ip_02_setupDone;
        number lores_02_b_0;
        number lores_02_a_1;
        number lores_02_a_2;
        number lores_02_x_0;
        number lores_02_y_1;
        number lores_02_y_2;
        number lores_02_last_resonance;
        number lores_02_last_frequency;
        number lores_02_last_res_calc;
        number lores_02_last_freq_calc;
        bool lores_02_setupDone;
        UInt noise_tilde_02_state[4] = { };
        bool samplerate_01_setupDone;
        number stackprotect_count;
        DataRef delaytilde_01_del_bufferobj;
        DataRef allpass_tilde_01_feedForward_bufferobj;
        DataRef allpass_tilde_01_feedBack_bufferobj;
        DataRef comb_tilde_15_feedForward_bufferobj;
        DataRef comb_tilde_15_feedBack_bufferobj;
        DataRef allpass_tilde_02_feedForward_bufferobj;
        DataRef allpass_tilde_02_feedBack_bufferobj;
        DataRef allpass_tilde_03_feedForward_bufferobj;
        DataRef allpass_tilde_03_feedBack_bufferobj;
        DataRef allpass_tilde_04_feedForward_bufferobj;
        DataRef allpass_tilde_04_feedBack_bufferobj;
        DataRef allpass_tilde_05_feedForward_bufferobj;
        DataRef allpass_tilde_05_feedBack_bufferobj;
        DataRef allpass_tilde_06_feedForward_bufferobj;
        DataRef allpass_tilde_06_feedBack_bufferobj;
        DataRef delaytilde_02_del_bufferobj;
        DataRef allpass_tilde_07_feedForward_bufferobj;
        DataRef allpass_tilde_07_feedBack_bufferobj;
        DataRef comb_tilde_16_feedForward_bufferobj;
        DataRef comb_tilde_16_feedBack_bufferobj;
        DataRef allpass_tilde_08_feedForward_bufferobj;
        DataRef allpass_tilde_08_feedBack_bufferobj;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_25* p_01;
        RNBOSubpatcher_26* p_02;
    
};

rnbomatic()
{
}

~rnbomatic()
{
    delete this->p_03;
    delete this->p_04;
    for (int i = 0; i < 5; i++) {
        delete p_05[i];
    }
    delete this->p_06;
}

rnbomatic* getTopLevelPatcher() {
    return this;
}

void cancelClockEvents()
{
    getEngine()->flushClockEvents(this, 29237386, false);
    getEngine()->flushClockEvents(this, 1935387534, false);
    getEngine()->flushClockEvents(this, 892732297, false);
    getEngine()->flushClockEvents(this, -1494586265, false);
    getEngine()->flushClockEvents(this, -1468824490, false);
}

template <typename T> void listquicksort(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    if (l < h) {
        Int p = (Int)(this->listpartition(arr, sortindices, l, h, ascending));
        this->listquicksort(arr, sortindices, l, p - 1, ascending);
        this->listquicksort(arr, sortindices, p + 1, h, ascending);
    }
}

template <typename T> Int listpartition(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    number x = arr[(Index)h];
    Int i = (Int)(l - 1);

    for (Int j = (Int)(l); j <= h - 1; j++) {
        bool asc = (bool)((bool)(ascending) && arr[(Index)j] <= x);
        bool desc = (bool)((bool)(!(bool)(ascending)) && arr[(Index)j] >= x);

        if ((bool)(asc) || (bool)(desc)) {
            i++;
            this->listswapelements(arr, i, j);
            this->listswapelements(sortindices, i, j);
        }
    }

    i++;
    this->listswapelements(arr, i, h);
    this->listswapelements(sortindices, i, h);
    return i;
}

template <typename T> void listswapelements(T& arr, Int a, Int b) {
    auto tmp = arr[(Index)a];
    arr[(Index)a] = arr[(Index)b];
    arr[(Index)b] = tmp;
}

number maximum(number x, number y) {
    return (x < y ? y : x);
}

number samplerate() {
    return this->sr;
}

Index voice() {
    return this->_voiceIndex;
}

number random(number low, number high) {
    number range = high - low;
    return rand01() * range + low;
}

MillisecondTime currenttime() {
    return this->_currentTime;
}

inline number safediv(number num, number denom) {
    return (denom == 0.0 ? 0.0 : num / denom);
}

number safepow(number base, number exponent) {
    return fixnan(rnbo_pow(base, exponent));
}

number mstosamps(MillisecondTime ms) {
    return ms * this->sr * 0.001;
}

Index vectorsize() {
    return this->vs;
}

number tempo() {
    return this->getTopLevelPatcher()->globaltransport_getTempo(this->currenttime());
}

number mstobeats(number ms) {
    return ms * this->tempo() * 0.008 / (number)480;
}

MillisecondTime sampstoms(number samps) {
    return samps * 1000 / this->sr;
}

Index getNumMidiInputPorts() const {
    return 0;
}

void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}

Index getNumMidiOutputPorts() const {
    return 0;
}

void process(
    const SampleValue * const* inputs,
    Index numInputs,
    SampleValue * const* outputs,
    Index numOutputs,
    Index n
) {
    RNBO_UNUSED(numInputs);
    RNBO_UNUSED(inputs);
    this->vs = n;
    this->updateTime(this->getEngine()->getCurrentTime());
    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
    SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
    this->p_03_perform(this->signals[0], n);
    this->p_04_perform(n);
    this->p_05_perform(this->signals[1], n);
    this->scopetilde_01_perform(this->signals[1], this->zeroBuffer, n);
    this->numbertilde_01_perform(this->signals[1], this->dummyBuffer, n);

    this->adsr_01_perform(
        this->adsr_01_attack,
        this->adsr_01_decay,
        this->adsr_01_sustain,
        this->adsr_01_release,
        this->zeroBuffer,
        this->signals[2],
        n
    );

    this->dspexpr_17_perform(this->signals[2], this->dspexpr_17_in2, this->signals[3], n);
    this->dspexpr_16_perform(this->signals[3], this->signals[4], n);

    this->scale_tilde_03_perform(
        this->signals[4],
        this->scale_tilde_03_lowin,
        this->scale_tilde_03_hiin,
        this->scale_tilde_03_lowout,
        this->scale_tilde_03_highout,
        this->scale_tilde_03_pow,
        this->signals[3],
        n
    );

    this->dspexpr_10_perform(this->signals[1], this->signals[2], this->signals[4], n);

    this->scale_tilde_02_perform(
        this->signals[2],
        this->scale_tilde_02_lowin,
        this->scale_tilde_02_hiin,
        this->scale_tilde_02_lowout,
        this->scale_tilde_02_highout,
        this->scale_tilde_02_pow,
        this->signals[1],
        n
    );

    this->svf_tilde_03_perform(
        this->signals[4],
        this->signals[1],
        this->signals[3],
        this->signals[5],
        this->dummyBuffer,
        this->dummyBuffer,
        this->dummyBuffer,
        n
    );

    this->svf_tilde_02_perform(
        this->signals[4],
        this->signals[1],
        this->signals[3],
        this->signals[6],
        this->dummyBuffer,
        this->dummyBuffer,
        this->dummyBuffer,
        n
    );

    this->signaladder_01_perform(this->signals[5], this->signals[6], this->signals[1], n);
    this->dspexpr_13_perform(this->signals[1], this->dspexpr_13_in2, this->signals[3], n);
    this->p_06_perform(this->signals[3], this->signals[4], this->signals[7], n);
    this->dspexpr_14_perform(this->signals[4], this->dummyBuffer, n);
    this->dspexpr_15_perform(this->signals[7], this->dummyBuffer, n);
    this->dspexpr_09_perform(this->signals[0], this->signals[2], this->signals[7], n);

    this->scale_tilde_01_perform(
        this->signals[2],
        this->scale_tilde_01_lowin,
        this->scale_tilde_01_hiin,
        this->scale_tilde_01_lowout,
        this->scale_tilde_01_highout,
        this->scale_tilde_01_pow,
        this->signals[0],
        n
    );

    this->svf_tilde_01_perform(
        this->signals[7],
        this->signals[0],
        this->svf_tilde_01_q,
        this->signals[2],
        this->dummyBuffer,
        this->dummyBuffer,
        this->dummyBuffer,
        n
    );

    this->signaladder_02_perform(this->signals[5], this->signals[2], this->signals[5], n);
    this->dspexpr_12_perform(this->signals[5], this->dspexpr_12_in2, this->signals[0], n);
    this->signaladder_03_perform(this->signals[6], this->signals[2], this->signals[2], n);
    this->dspexpr_11_perform(this->signals[2], this->dspexpr_11_in2, this->signals[7], n);
    this->limi_01_perform(this->signals[7], this->signals[0], out1, out2, n);
    this->stackprotect_perform(n);
    this->globaltransport_advance();
    this->audioProcessSampleCount += this->vs;
}

void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
        Index i;

        for (i = 0; i < 8; i++) {
            this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
        }

        this->adsr_01_triggerBuf = resizeSignal(this->adsr_01_triggerBuf, this->maxvs, maxBlockSize);
        this->adsr_01_triggerValueBuf = resizeSignal(this->adsr_01_triggerValueBuf, this->maxvs, maxBlockSize);
        this->globaltransport_tempo = resizeSignal(this->globaltransport_tempo, this->maxvs, maxBlockSize);
        this->globaltransport_state = resizeSignal(this->globaltransport_state, this->maxvs, maxBlockSize);
        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
        this->didAllocateSignals = true;
    }

    const bool sampleRateChanged = sampleRate != this->sr;
    const bool maxvsChanged = maxBlockSize != this->maxvs;
    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;

    if (sampleRateChanged || maxvsChanged) {
        this->vs = maxBlockSize;
        this->maxvs = maxBlockSize;
        this->sr = sampleRate;
        this->invsr = 1 / sampleRate;
    }

    this->scopetilde_01_dspsetup(forceDSPSetup);
    this->numbertilde_01_dspsetup(forceDSPSetup);
    this->adsr_01_dspsetup(forceDSPSetup);
    this->svf_tilde_03_dspsetup(forceDSPSetup);
    this->svf_tilde_02_dspsetup(forceDSPSetup);
    this->svf_tilde_01_dspsetup(forceDSPSetup);
    this->limi_01_dspsetup(forceDSPSetup);
    this->globaltransport_dspsetup(forceDSPSetup);
    this->p_03->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_04->prepareToProcess(sampleRate, maxBlockSize, force);

    for (Index i = 0; i < 5; i++) {
        this->p_05[i]->prepareToProcess(sampleRate, maxBlockSize, force);
    }

    this->p_06->prepareToProcess(sampleRate, maxBlockSize, force);

    if (sampleRateChanged)
        this->onSampleRateChanged(sampleRate);
}

void setProbingTarget(MessageTag id) {
    switch (id) {
    default:
        {
        this->setProbingIndex(-1);
        break;
        }
    }
}

void setProbingIndex(ProbingIndex ) {}

Index getProbingChannels(MessageTag outletId) const {
    RNBO_UNUSED(outletId);
    return 0;
}

DataRef* getDataRef(DataRefIndex index)  {
    switch (index) {
    case 0:
        {
        return addressOf(this->RNBODefaultMtofLookupTable256);
        break;
        }
    default:
        {
        return nullptr;
        }
    }
}

DataRefIndex getNumDataRefs() const {
    return 1;
}

void fillRNBODefaultMtofLookupTable256(DataRef& ref) {
    Float64BufferRef buffer;
    buffer = new Float64Buffer(ref);
    number bufsize = buffer->getSize();

    for (Index i = 0; i < bufsize; i++) {
        number midivalue = -256. + (number)512. / (bufsize - 1) * i;
        buffer[i] = rnbo_exp(.057762265 * (midivalue - 69.0));
    }
}

void fillDataRef(DataRefIndex index, DataRef& ref) {
    switch (index) {
    case 0:
        {
        this->fillRNBODefaultMtofLookupTable256(ref);
        break;
        }
    }
}

void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
    this->p_03->processDataViewUpdate(index, time);
    this->p_04->processDataViewUpdate(index, time);

    for (Index i = 0; i < 5; i++) {
        this->p_05[i]->processDataViewUpdate(index, time);
    }

    this->p_06->processDataViewUpdate(index, time);
}

void initialize() {
    this->RNBODefaultMtofLookupTable256 = initDataRef("RNBODefaultMtofLookupTable256", true, nullptr, "buffer~");
    this->assign_defaults();
    this->setState();
    this->RNBODefaultMtofLookupTable256->setIndex(0);
    this->initializeObjects();
    this->allocateDataRefs();
    this->startup();
}

Index getIsMuted()  {
    return this->isMuted;
}

void setIsMuted(Index v)  {
    this->isMuted = v;
}

Index getPatcherSerial() const {
    return 0;
}

void getState(PatcherStateInterface& ) {}

void setState() {
    this->p_03 = new RNBOSubpatcher_27();
    this->p_03->setEngineAndPatcher(this->getEngine(), this);
    this->p_03->initialize();
    this->p_03->setParameterOffset(this->getParameterOffset(this->p_03));
    this->p_04 = new RNBOSubpatcher_28();
    this->p_04->setEngineAndPatcher(this->getEngine(), this);
    this->p_04->initialize();
    this->p_04->setParameterOffset(this->getParameterOffset(this->p_04));

    for (Index i = 0; i < 5; i++) {
        this->p_05[(Index)i] = new RNBOSubpatcher_29();
        this->p_05[(Index)i]->setEngineAndPatcher(this->getEngine(), this);
        this->p_05[(Index)i]->initialize();
        this->p_05[(Index)i]->setParameterOffset(this->getParameterOffset(this->p_05[0]));
        this->p_05[(Index)i]->setVoiceIndex(i + 1);
    }

    this->p_06 = new RNBOSubpatcher_30();
    this->p_06->setEngineAndPatcher(this->getEngine(), this);
    this->p_06->initialize();
    this->p_06->setParameterOffset(this->getParameterOffset(this->p_06));
}

void getPreset(PatcherStateInterface& preset) {
    preset["__presetid"] = "rnbo";
    this->param_01_getPresetValue(getSubState(preset, "bassvol"));
    this->param_02_getPresetValue(getSubState(preset, "chord1spawnrate"));
    this->param_03_getPresetValue(getSubState(preset, "chord1oct"));
    this->param_04_getPresetValue(getSubState(preset, "chord1voicevol"));
    this->param_05_getPresetValue(getSubState(preset, "chord1att"));
    this->param_06_getPresetValue(getSubState(preset, "chord1dec"));
    this->param_07_getPresetValue(getSubState(preset, "verbsize"));
    this->param_08_getPresetValue(getSubState(preset, "verbdecaytime"));
    this->param_09_getPresetValue(getSubState(preset, "verbhfdamp"));
    this->param_10_getPresetValue(getSubState(preset, "chord1sus"));
    this->param_11_getPresetValue(getSubState(preset, "verbdiffusion"));
    this->param_12_getPresetValue(getSubState(preset, "chord1rel"));
    this->p_03->getPreset(getSubState(getSubState(preset, "__sps"), "bass"));
    this->p_04->getPreset(getSubState(getSubState(preset, "__sps"), "chord1markov"));

    for (Index i = 0; i < 5; i++)
        this->p_05[i]->getPreset(getSubStateAt(getSubState(preset, "__sps"), "chord1", i));

    this->p_06->getPreset(getSubState(getSubState(preset, "__sps"), "reverb"));
}

void setPreset(MillisecondTime time, PatcherStateInterface& preset) {
    this->updateTime(time);
    this->param_01_setPresetValue(getSubState(preset, "bassvol"));
    this->param_02_setPresetValue(getSubState(preset, "chord1spawnrate"));
    this->param_03_setPresetValue(getSubState(preset, "chord1oct"));
    this->param_04_setPresetValue(getSubState(preset, "chord1voicevol"));
    this->param_05_setPresetValue(getSubState(preset, "chord1att"));
    this->param_06_setPresetValue(getSubState(preset, "chord1dec"));
    this->param_07_setPresetValue(getSubState(preset, "verbsize"));
    this->param_08_setPresetValue(getSubState(preset, "verbdecaytime"));
    this->param_09_setPresetValue(getSubState(preset, "verbhfdamp"));
    this->param_10_setPresetValue(getSubState(preset, "chord1sus"));
    this->param_11_setPresetValue(getSubState(preset, "verbdiffusion"));
    this->param_12_setPresetValue(getSubState(preset, "chord1rel"));
}

void processTempoEvent(MillisecondTime time, Tempo tempo) {
    this->updateTime(time);

    if (this->globaltransport_setTempo(this->_currentTime, tempo, false)) {
        this->p_03->processTempoEvent(time, tempo);
        this->p_04->processTempoEvent(time, tempo);

        for (Index i = 0; i < 5; i++) {
            this->p_05[i]->processTempoEvent(time, tempo);
        }

        this->p_06->processTempoEvent(time, tempo);
        this->tempo_01_onTempoChanged(tempo);
    }
}

void processTransportEvent(MillisecondTime time, TransportState state) {
    this->updateTime(time);

    if (this->globaltransport_setState(this->_currentTime, state, false)) {
        this->p_03->processTransportEvent(time, state);
        this->p_04->processTransportEvent(time, state);

        for (Index i = 0; i < 5; i++) {
            this->p_05[i]->processTransportEvent(time, state);
        }

        this->p_06->processTransportEvent(time, state);
        this->metro_01_onTransportChanged(state);
    }
}

void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
    this->updateTime(time);

    if (this->globaltransport_setBeatTime(this->_currentTime, beattime, false)) {
        this->p_03->processBeatTimeEvent(time, beattime);
        this->p_04->processBeatTimeEvent(time, beattime);

        for (Index i = 0; i < 5; i++) {
            this->p_05[i]->processBeatTimeEvent(time, beattime);
        }

        this->p_06->processBeatTimeEvent(time, beattime);
        this->metro_01_onBeatTimeChanged(beattime);
    }
}

void onSampleRateChanged(double ) {}

void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
    this->updateTime(time);

    if (this->globaltransport_setTimeSignature(this->_currentTime, numerator, denominator, false)) {
        this->p_03->processTimeSignatureEvent(time, numerator, denominator);
        this->p_04->processTimeSignatureEvent(time, numerator, denominator);

        for (Index i = 0; i < 5; i++) {
            this->p_05[i]->processTimeSignatureEvent(time, numerator, denominator);
        }

        this->p_06->processTimeSignatureEvent(time, numerator, denominator);
    }
}

void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
    this->updateTime(time);

    switch (index) {
    case 0:
        {
        this->param_01_value_set(v);
        break;
        }
    case 1:
        {
        this->param_02_value_set(v);
        break;
        }
    case 2:
        {
        this->param_03_value_set(v);
        break;
        }
    case 3:
        {
        this->param_04_value_set(v);
        break;
        }
    case 4:
        {
        this->param_05_value_set(v);
        break;
        }
    case 5:
        {
        this->param_06_value_set(v);
        break;
        }
    case 6:
        {
        this->param_07_value_set(v);
        break;
        }
    case 7:
        {
        this->param_08_value_set(v);
        break;
        }
    case 8:
        {
        this->param_09_value_set(v);
        break;
        }
    case 9:
        {
        this->param_10_value_set(v);
        break;
        }
    case 10:
        {
        this->param_11_value_set(v);
        break;
        }
    case 11:
        {
        this->param_12_value_set(v);
        break;
        }
    default:
        {
        index -= 12;

        if (index < this->p_03->getNumParameters())
            this->p_03->setParameterValue(index, v, time);

        index -= this->p_03->getNumParameters();

        if (index < this->p_04->getNumParameters())
            this->p_04->setParameterValue(index, v, time);

        index -= this->p_04->getNumParameters();

        if (index < this->p_05[0]->getNumParameters())
            this->p_05[0]->setPolyParameterValue((PatcherInterface**)this->p_05, index, v, time);

        index -= this->p_05[0]->getNumParameters();

        if (index < this->p_06->getNumParameters())
            this->p_06->setParameterValue(index, v, time);

        break;
        }
    }
}

void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValue(index, value, time);
}

void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValueNormalized(index, value, time);
}

ParameterValue getParameterValue(ParameterIndex index)  {
    switch (index) {
    case 0:
        {
        return this->param_01_value;
        }
    case 1:
        {
        return this->param_02_value;
        }
    case 2:
        {
        return this->param_03_value;
        }
    case 3:
        {
        return this->param_04_value;
        }
    case 4:
        {
        return this->param_05_value;
        }
    case 5:
        {
        return this->param_06_value;
        }
    case 6:
        {
        return this->param_07_value;
        }
    case 7:
        {
        return this->param_08_value;
        }
    case 8:
        {
        return this->param_09_value;
        }
    case 9:
        {
        return this->param_10_value;
        }
    case 10:
        {
        return this->param_11_value;
        }
    case 11:
        {
        return this->param_12_value;
        }
    default:
        {
        index -= 12;

        if (index < this->p_03->getNumParameters())
            return this->p_03->getParameterValue(index);

        index -= this->p_03->getNumParameters();

        if (index < this->p_04->getNumParameters())
            return this->p_04->getParameterValue(index);

        index -= this->p_04->getNumParameters();

        if (index < this->p_05[0]->getNumParameters())
            return this->p_05[0]->getPolyParameterValue((PatcherInterface**)this->p_05, index);

        index -= this->p_05[0]->getNumParameters();

        if (index < this->p_06->getNumParameters())
            return this->p_06->getParameterValue(index);

        return 0;
        }
    }
}

ParameterIndex getNumSignalInParameters() const {
    return 0;
}

ParameterIndex getNumSignalOutParameters() const {
    return 0;
}

ParameterIndex getNumParameters() const {
    return 12 + this->p_03->getNumParameters() + this->p_04->getNumParameters() + this->p_05[0]->getNumParameters() + this->p_06->getNumParameters();
}

ConstCharPointer getParameterName(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "bassvol";
        }
    case 1:
        {
        return "chord1spawnrate";
        }
    case 2:
        {
        return "chord1oct";
        }
    case 3:
        {
        return "chord1voicevol";
        }
    case 4:
        {
        return "chord1att";
        }
    case 5:
        {
        return "chord1dec";
        }
    case 6:
        {
        return "verbsize";
        }
    case 7:
        {
        return "verbdecaytime";
        }
    case 8:
        {
        return "verbhfdamp";
        }
    case 9:
        {
        return "chord1sus";
        }
    case 10:
        {
        return "verbdiffusion";
        }
    case 11:
        {
        return "chord1rel";
        }
    default:
        {
        index -= 12;

        if (index < this->p_03->getNumParameters())
            return this->p_03->getParameterName(index);

        index -= this->p_03->getNumParameters();

        if (index < this->p_04->getNumParameters())
            return this->p_04->getParameterName(index);

        index -= this->p_04->getNumParameters();

        if (index < this->p_05[0]->getNumParameters()) {
            {
                return this->p_05[0]->getParameterName(index);
            }
        }

        index -= this->p_05[0]->getNumParameters();

        if (index < this->p_06->getNumParameters())
            return this->p_06->getParameterName(index);

        return "bogus";
        }
    }
}

ConstCharPointer getParameterId(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "bassvol";
        }
    case 1:
        {
        return "chord1spawnrate";
        }
    case 2:
        {
        return "chord1oct";
        }
    case 3:
        {
        return "chord1voicevol";
        }
    case 4:
        {
        return "chord1att";
        }
    case 5:
        {
        return "chord1dec";
        }
    case 6:
        {
        return "verbsize";
        }
    case 7:
        {
        return "verbdecaytime";
        }
    case 8:
        {
        return "verbhfdamp";
        }
    case 9:
        {
        return "chord1sus";
        }
    case 10:
        {
        return "verbdiffusion";
        }
    case 11:
        {
        return "chord1rel";
        }
    default:
        {
        index -= 12;

        if (index < this->p_03->getNumParameters())
            return this->p_03->getParameterId(index);

        index -= this->p_03->getNumParameters();

        if (index < this->p_04->getNumParameters())
            return this->p_04->getParameterId(index);

        index -= this->p_04->getNumParameters();

        if (index < this->p_05[0]->getNumParameters()) {
            {
                return this->p_05[0]->getParameterId(index);
            }
        }

        index -= this->p_05[0]->getNumParameters();

        if (index < this->p_06->getNumParameters())
            return this->p_06->getParameterId(index);

        return "bogus";
        }
    }
}

void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
    {
        switch (index) {
        case 0:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 110;
            info->min = 0;
            info->max = 120;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 1:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 31;
            info->min = 7;
            info->max = 63;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 2:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 4;
            info->min = 0;
            info->max = 6;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 3:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 100;
            info->min = 0;
            info->max = 120;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 4:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 12000;
            info->min = 0;
            info->max = 12000;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 5:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 24000;
            info->min = 0;
            info->max = 30000;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 6:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 1;
            info->min = 0.01;
            info->max = 1.6;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 7:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0.7;
            info->min = 0.05;
            info->max = 0.9;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 8:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 8000;
            info->min = 20;
            info->max = 12000;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 9:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 10:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0.7;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 11:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 3000;
            info->min = 30;
            info->max = 10000;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        default:
            {
            index -= 12;

            if (index < this->p_03->getNumParameters())
                this->p_03->getParameterInfo(index, info);

            index -= this->p_03->getNumParameters();

            if (index < this->p_04->getNumParameters())
                this->p_04->getParameterInfo(index, info);

            index -= this->p_04->getNumParameters();

            if (index < this->p_05[0]->getNumParameters()) {
                for (Index i = 0; i < 5; i++) {
                    this->p_05[i]->getParameterInfo(index, info);
                }
            }

            index -= this->p_05[0]->getNumParameters();

            if (index < this->p_06->getNumParameters())
                this->p_06->getParameterInfo(index, info);

            break;
            }
        }
    }
}

void sendParameter(ParameterIndex index, bool ignoreValue) {
    this->getEngine()->notifyParameterValueChanged(index, (ignoreValue ? 0 : this->getParameterValue(index)), ignoreValue);
}

ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
    if (subpatcher == this->p_03)
        return 12;

    if (subpatcher == this->p_04)
        return 12 + this->p_03->getNumParameters();

    if (subpatcher == this->p_05[0])
        return 12 + this->p_03->getNumParameters() + this->p_04->getNumParameters();

    if (subpatcher == this->p_06)
        return 12 + this->p_03->getNumParameters() + this->p_04->getNumParameters() + this->p_05[0]->getNumParameters();

    return 0;
}

ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
    if (steps == 1) {
        if (normalizedValue > 0) {
            normalizedValue = 1.;
        }
    } else {
        ParameterValue oneStep = (number)1. / (steps - 1);
        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
        normalizedValue = numberOfSteps * oneStep;
    }

    return normalizedValue;
}

ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 9:
    case 10:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            ParameterValue normalizedValue = (value - 0) / (1 - 0);
            return normalizedValue;
        }
        }
    case 2:
        {
        {
            value = (value < 0 ? 0 : (value > 6 ? 6 : value));
            ParameterValue normalizedValue = (value - 0) / (6 - 0);
            return normalizedValue;
        }
        }
    case 0:
    case 3:
        {
        {
            value = (value < 0 ? 0 : (value > 120 ? 120 : value));
            ParameterValue normalizedValue = (value - 0) / (120 - 0);
            return normalizedValue;
        }
        }
    case 4:
        {
        {
            value = (value < 0 ? 0 : (value > 12000 ? 12000 : value));
            ParameterValue normalizedValue = (value - 0) / (12000 - 0);
            return normalizedValue;
        }
        }
    case 5:
        {
        {
            value = (value < 0 ? 0 : (value > 30000 ? 30000 : value));
            ParameterValue normalizedValue = (value - 0) / (30000 - 0);
            return normalizedValue;
        }
        }
    case 1:
        {
        {
            value = (value < 7 ? 7 : (value > 63 ? 63 : value));
            ParameterValue normalizedValue = (value - 7) / (63 - 7);
            return normalizedValue;
        }
        }
    case 8:
        {
        {
            value = (value < 20 ? 20 : (value > 12000 ? 12000 : value));
            ParameterValue normalizedValue = (value - 20) / (12000 - 20);
            return normalizedValue;
        }
        }
    case 11:
        {
        {
            value = (value < 30 ? 30 : (value > 10000 ? 10000 : value));
            ParameterValue normalizedValue = (value - 30) / (10000 - 30);
            return normalizedValue;
        }
        }
    case 6:
        {
        {
            value = (value < 0.01 ? 0.01 : (value > 1.6 ? 1.6 : value));
            ParameterValue normalizedValue = (value - 0.01) / (1.6 - 0.01);
            return normalizedValue;
        }
        }
    case 7:
        {
        {
            value = (value < 0.05 ? 0.05 : (value > 0.9 ? 0.9 : value));
            ParameterValue normalizedValue = (value - 0.05) / (0.9 - 0.05);
            return normalizedValue;
        }
        }
    default:
        {
        index -= 12;

        if (index < this->p_03->getNumParameters())
            return this->p_03->convertToNormalizedParameterValue(index, value);

        index -= this->p_03->getNumParameters();

        if (index < this->p_04->getNumParameters())
            return this->p_04->convertToNormalizedParameterValue(index, value);

        index -= this->p_04->getNumParameters();

        if (index < this->p_05[0]->getNumParameters()) {
            {
                return this->p_05[0]->convertToNormalizedParameterValue(index, value);
            }
        }

        index -= this->p_05[0]->getNumParameters();

        if (index < this->p_06->getNumParameters())
            return this->p_06->convertToNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    value = (value < 0 ? 0 : (value > 1 ? 1 : value));

    switch (index) {
    case 9:
    case 10:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 0 + value * (1 - 0);
            }
        }
        }
    case 2:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 0 + value * (6 - 0);
            }
        }
        }
    case 0:
    case 3:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 0 + value * (120 - 0);
            }
        }
        }
    case 4:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 0 + value * (12000 - 0);
            }
        }
        }
    case 5:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 0 + value * (30000 - 0);
            }
        }
        }
    case 1:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 7 + value * (63 - 7);
            }
        }
        }
    case 8:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 20 + value * (12000 - 20);
            }
        }
        }
    case 11:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 30 + value * (10000 - 30);
            }
        }
        }
    case 6:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 0.01 + value * (1.6 - 0.01);
            }
        }
        }
    case 7:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 0.05 + value * (0.9 - 0.05);
            }
        }
        }
    default:
        {
        index -= 12;

        if (index < this->p_03->getNumParameters())
            return this->p_03->convertFromNormalizedParameterValue(index, value);

        index -= this->p_03->getNumParameters();

        if (index < this->p_04->getNumParameters())
            return this->p_04->convertFromNormalizedParameterValue(index, value);

        index -= this->p_04->getNumParameters();

        if (index < this->p_05[0]->getNumParameters()) {
            {
                return this->p_05[0]->convertFromNormalizedParameterValue(index, value);
            }
        }

        index -= this->p_05[0]->getNumParameters();

        if (index < this->p_06->getNumParameters())
            return this->p_06->convertFromNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 0:
        {
        return this->param_01_value_constrain(value);
        }
    case 1:
        {
        return this->param_02_value_constrain(value);
        }
    case 2:
        {
        return this->param_03_value_constrain(value);
        }
    case 3:
        {
        return this->param_04_value_constrain(value);
        }
    case 4:
        {
        return this->param_05_value_constrain(value);
        }
    case 5:
        {
        return this->param_06_value_constrain(value);
        }
    case 6:
        {
        return this->param_07_value_constrain(value);
        }
    case 7:
        {
        return this->param_08_value_constrain(value);
        }
    case 8:
        {
        return this->param_09_value_constrain(value);
        }
    case 9:
        {
        return this->param_10_value_constrain(value);
        }
    case 10:
        {
        return this->param_11_value_constrain(value);
        }
    case 11:
        {
        return this->param_12_value_constrain(value);
        }
    default:
        {
        index -= 12;

        if (index < this->p_03->getNumParameters())
            return this->p_03->constrainParameterValue(index, value);

        index -= this->p_03->getNumParameters();

        if (index < this->p_04->getNumParameters())
            return this->p_04->constrainParameterValue(index, value);

        index -= this->p_04->getNumParameters();

        if (index < this->p_05[0]->getNumParameters()) {
            {
                return this->p_05[0]->constrainParameterValue(index, value);
            }
        }

        index -= this->p_05[0]->getNumParameters();

        if (index < this->p_06->getNumParameters())
            return this->p_06->constrainParameterValue(index, value);

        return value;
        }
    }
}

void scheduleParamInit(ParameterIndex index, Index order) {
    this->paramInitIndices->push(index);
    this->paramInitOrder->push(order);
}

void processParamInitEvents() {
    this->listquicksort(
        this->paramInitOrder,
        this->paramInitIndices,
        0,
        (int)(this->paramInitOrder->length - 1),
        true
    );

    for (Index i = 0; i < this->paramInitOrder->length; i++) {
        this->getEngine()->scheduleParameterChange(
            this->paramInitIndices[i],
            this->getParameterValue(this->paramInitIndices[i]),
            0
        );
    }
}

void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
    RNBO_UNUSED(hasValue);
    this->updateTime(time);

    switch (index) {
    case 29237386:
        {
        this->loadmess_01_startupbang_bang();
        break;
        }
    case 1935387534:
        {
        this->metro_01_tick_bang();
        break;
        }
    case 892732297:
        {
        this->loadmess_02_startupbang_bang();
        break;
        }
    case -1494586265:
        {
        this->numbertilde_01_value_set(value);
        break;
        }
    case -1468824490:
        {
        this->adsr_01_mute_bang();
        break;
        }
    }
}

void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}

void processOutletEvent(
    EngineLink* sender,
    OutletIndex index,
    ParameterValue value,
    MillisecondTime time
) {
    this->updateTime(time);
    this->processOutletAtCurrentTime(sender, index, value);
}

void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
    this->updateTime(time);

    switch (tag) {
    case TAG("listin"):
        {
        if (TAG("message_obj-87") == objectId)
            this->message_05_listin_number_set(payload);

        break;
        }
    case TAG("sig"):
        {
        if (TAG("number~_obj-23") == objectId)
            this->numbertilde_01_sig_number_set(payload);

        break;
        }
    case TAG("mode"):
        {
        if (TAG("number~_obj-23") == objectId)
            this->numbertilde_01_mode_set(payload);

        break;
        }
    }

    this->p_03->processNumMessage(tag, objectId, time, payload);
    this->p_04->processNumMessage(tag, objectId, time, payload);

    for (Index i = 0; i < 5; i++) {
        this->p_05[i]->processNumMessage(tag, objectId, time, payload);
    }

    this->p_06->processNumMessage(tag, objectId, time, payload);
}

void processListMessage(
    MessageTag tag,
    MessageTag objectId,
    MillisecondTime time,
    const list& payload
) {
    this->updateTime(time);

    switch (tag) {
    case TAG("listin"):
        {
        if (TAG("message_obj-87") == objectId)
            this->message_05_listin_list_set(payload);

        break;
        }
    case TAG("sig"):
        {
        if (TAG("number~_obj-23") == objectId)
            this->numbertilde_01_sig_list_set(payload);

        break;
        }
    }

    this->p_03->processListMessage(tag, objectId, time, payload);
    this->p_04->processListMessage(tag, objectId, time, payload);

    for (Index i = 0; i < 5; i++) {
        this->p_05[i]->processListMessage(tag, objectId, time, payload);
    }

    this->p_06->processListMessage(tag, objectId, time, payload);
}

void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
    this->updateTime(time);

    switch (tag) {
    case TAG("listin"):
        {
        if (TAG("message_obj-87") == objectId)
            this->message_05_listin_bang_bang();

        break;
        }
    case TAG("startupbang"):
        {
        if (TAG("loadmess_obj-21") == objectId)
            this->loadmess_01_startupbang_bang();

        if (TAG("loadmess_obj-93") == objectId)
            this->loadmess_02_startupbang_bang();

        break;
        }
    }

    this->p_03->processBangMessage(tag, objectId, time);
    this->p_04->processBangMessage(tag, objectId, time);

    for (Index i = 0; i < 5; i++) {
        this->p_05[i]->processBangMessage(tag, objectId, time);
    }

    this->p_06->processBangMessage(tag, objectId, time);
}

MessageTagInfo resolveTag(MessageTag tag) const {
    switch (tag) {
    case TAG("setup"):
        {
        return "setup";
        }
    case TAG("scope~_obj-36"):
        {
        return "scope~_obj-36";
        }
    case TAG("monitor"):
        {
        return "monitor";
        }
    case TAG("listout"):
        {
        return "listout";
        }
    case TAG("message_obj-87"):
        {
        return "message_obj-87";
        }
    case TAG("number~_obj-23"):
        {
        return "number~_obj-23";
        }
    case TAG("assign"):
        {
        return "assign";
        }
    case TAG("listin"):
        {
        return "listin";
        }
    case TAG("startupbang"):
        {
        return "startupbang";
        }
    case TAG("loadmess_obj-21"):
        {
        return "loadmess_obj-21";
        }
    case TAG("sig"):
        {
        return "sig";
        }
    case TAG("mode"):
        {
        return "mode";
        }
    case TAG("loadmess_obj-93"):
        {
        return "loadmess_obj-93";
        }
    }

    auto subpatchResult_0 = this->p_03->resolveTag(tag);

    if (subpatchResult_0)
        return subpatchResult_0;

    auto subpatchResult_1 = this->p_04->resolveTag(tag);

    if (subpatchResult_1)
        return subpatchResult_1;

    auto subpatchResult_2 = this->p_05[0]->resolveTag(tag);

    if (subpatchResult_2)
        return subpatchResult_2;

    auto subpatchResult_3 = this->p_06->resolveTag(tag);

    if (subpatchResult_3)
        return subpatchResult_3;

    return "";
}

MessageIndex getNumMessages() const {
    return 0;
}

const MessageInfo& getMessageInfo(MessageIndex index) const {
    switch (index) {

    }

    return NullMessageInfo;
}

protected:

void param_01_value_set(number v) {
    v = this->param_01_value_constrain(v);
    this->param_01_value = v;
    this->sendParameter(0, false);

    if (this->param_01_value != this->param_01_lastValue) {
        this->getEngine()->presetTouched();
        this->param_01_lastValue = this->param_01_value;
    }

    this->p_03_in2_number_set(v);
}

void param_02_value_set(number v) {
    v = this->param_02_value_constrain(v);
    this->param_02_value = v;
    this->sendParameter(1, false);

    if (this->param_02_value != this->param_02_lastValue) {
        this->getEngine()->presetTouched();
        this->param_02_lastValue = this->param_02_value;
    }

    this->counter_01_maximum_set(v);
}

void param_03_value_set(number v) {
    v = this->param_03_value_constrain(v);
    this->param_03_value = v;
    this->sendParameter(2, false);

    if (this->param_03_value != this->param_03_lastValue) {
        this->getEngine()->presetTouched();
        this->param_03_lastValue = this->param_03_value;
    }

    this->p_05_in2_number_set(v);
}

void param_04_value_set(number v) {
    v = this->param_04_value_constrain(v);
    this->param_04_value = v;
    this->sendParameter(3, false);

    if (this->param_04_value != this->param_04_lastValue) {
        this->getEngine()->presetTouched();
        this->param_04_lastValue = this->param_04_value;
    }

    this->p_05_in3_number_set(v);
}

void param_05_value_set(number v) {
    v = this->param_05_value_constrain(v);
    this->param_05_value = v;
    this->sendParameter(4, false);

    if (this->param_05_value != this->param_05_lastValue) {
        this->getEngine()->presetTouched();
        this->param_05_lastValue = this->param_05_value;
    }

    this->adsr_01_attack_set(v);
}

void param_06_value_set(number v) {
    v = this->param_06_value_constrain(v);
    this->param_06_value = v;
    this->sendParameter(5, false);

    if (this->param_06_value != this->param_06_lastValue) {
        this->getEngine()->presetTouched();
        this->param_06_lastValue = this->param_06_value;
    }

    this->adsr_01_decay_set(v);
}

void param_07_value_set(number v) {
    v = this->param_07_value_constrain(v);
    this->param_07_value = v;
    this->sendParameter(6, false);

    if (this->param_07_value != this->param_07_lastValue) {
        this->getEngine()->presetTouched();
        this->param_07_lastValue = this->param_07_value;
    }

    this->p_06_in2_number_set(v);
}

void param_08_value_set(number v) {
    v = this->param_08_value_constrain(v);
    this->param_08_value = v;
    this->sendParameter(7, false);

    if (this->param_08_value != this->param_08_lastValue) {
        this->getEngine()->presetTouched();
        this->param_08_lastValue = this->param_08_value;
    }

    this->p_06_in3_number_set(v);
}

void param_09_value_set(number v) {
    v = this->param_09_value_constrain(v);
    this->param_09_value = v;
    this->sendParameter(8, false);

    if (this->param_09_value != this->param_09_lastValue) {
        this->getEngine()->presetTouched();
        this->param_09_lastValue = this->param_09_value;
    }

    this->p_06_in4_number_set(v);
}

void param_10_value_set(number v) {
    v = this->param_10_value_constrain(v);
    this->param_10_value = v;
    this->sendParameter(9, false);

    if (this->param_10_value != this->param_10_lastValue) {
        this->getEngine()->presetTouched();
        this->param_10_lastValue = this->param_10_value;
    }

    this->adsr_01_sustain_set(v);
}

void param_11_value_set(number v) {
    v = this->param_11_value_constrain(v);
    this->param_11_value = v;
    this->sendParameter(10, false);

    if (this->param_11_value != this->param_11_lastValue) {
        this->getEngine()->presetTouched();
        this->param_11_lastValue = this->param_11_value;
    }

    this->p_06_in5_number_set(v);
}

void param_12_value_set(number v) {
    v = this->param_12_value_constrain(v);
    this->param_12_value = v;
    this->sendParameter(11, false);

    if (this->param_12_value != this->param_12_lastValue) {
        this->getEngine()->presetTouched();
        this->param_12_lastValue = this->param_12_value;
    }

    this->adsr_01_release_set(v);
}

void message_05_listin_list_set(const list& v) {
    this->message_05_set_set(v);
}

void message_05_listin_number_set(number v) {
    this->message_05_set_set(v);
}

void message_05_listin_bang_bang() {
    this->message_05_trigger_bang();
}

void loadmess_01_startupbang_bang() {
    this->loadmess_01_message_bang();
}

void metro_01_tick_bang() {
    this->metro_01_tickout_bang();
    this->getEngine()->flushClockEvents(this, 1935387534, false);;

    if ((bool)(this->metro_01_on)) {
        this->metro_01_last = this->currenttime();

        {
            this->metro_01_next = this->metro_01_last + this->metro_01_interval;
            this->getEngine()->scheduleClockEvent(this, 1935387534, this->metro_01_interval + this->_currentTime);;
        }
    }
}

void numbertilde_01_sig_number_set(number v) {
    this->numbertilde_01_outValue = v;
}

void numbertilde_01_sig_list_set(const list& v) {
    this->numbertilde_01_outValue = v[0];
}

void numbertilde_01_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_01_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_01_currentMode = 1;
    }
}

void loadmess_02_startupbang_bang() {
    this->loadmess_02_message_bang();
}

void numbertilde_01_value_set(number ) {}

void adsr_01_mute_bang() {}

number msToSamps(MillisecondTime ms, number sampleRate) {
    return ms * sampleRate * 0.001;
}

MillisecondTime sampsToMs(SampleIndex samps) {
    return samps * (this->invsr * 1000);
}

Index getMaxBlockSize() const {
    return this->maxvs;
}

number getSampleRate() const {
    return this->sr;
}

bool hasFixedVectorSize() const {
    return false;
}

Index getNumInputChannels() const {
    return 0;
}

Index getNumOutputChannels() const {
    return 2;
}

void allocateDataRefs() {
    this->p_03->allocateDataRefs();
    this->p_04->allocateDataRefs();

    for (Index i = 0; i < 5; i++) {
        this->p_05[i]->allocateDataRefs();
    }

    this->p_06->allocateDataRefs();

    if (this->RNBODefaultMtofLookupTable256->hasRequestedSize()) {
        if (this->RNBODefaultMtofLookupTable256->wantsFill())
            this->fillRNBODefaultMtofLookupTable256(this->RNBODefaultMtofLookupTable256);

        this->getEngine()->sendDataRefUpdated(0);
    }
}

void initializeObjects() {
    this->message_05_init();
    this->random_08_nz_init();
    this->numbertilde_01_init();
    this->p_03->initializeObjects();
    this->p_04->initializeObjects();

    for (Index i = 0; i < 5; i++) {
        this->p_05[i]->initializeObjects();
    }

    this->p_06->initializeObjects();
}

void sendOutlet(OutletIndex index, ParameterValue value) {
    this->getEngine()->sendOutlet(this, index, value);
}

void startup() {
    this->updateTime(this->getEngine()->getCurrentTime());
    this->p_03->startup();
    this->p_04->startup();

    for (Index i = 0; i < 5; i++) {
        this->p_05[i]->startup();
    }

    this->p_06->startup();
    this->getEngine()->scheduleClockEvent(this, 29237386, 0 + this->_currentTime);;

    if ((bool)(this->metro_01_on))
        this->metro_01_on_set(1);

    this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;

    {
        this->scheduleParamInit(0, 0);
    }

    {
        this->scheduleParamInit(1, 0);
    }

    {
        this->scheduleParamInit(2, 0);
    }

    {
        this->scheduleParamInit(3, 0);
    }

    {
        this->scheduleParamInit(4, 0);
    }

    {
        this->scheduleParamInit(5, 0);
    }

    {
        this->scheduleParamInit(6, 0);
    }

    {
        this->scheduleParamInit(7, 0);
    }

    {
        this->scheduleParamInit(8, 0);
    }

    {
        this->scheduleParamInit(9, 0);
    }

    {
        this->scheduleParamInit(10, 0);
    }

    {
        this->scheduleParamInit(11, 0);
    }

    this->processParamInitEvents();
}

static number param_01_value_constrain(number v) {
    v = (v > 120 ? 120 : (v < 0 ? 0 : v));
    return v;
}

void p_03_in2_number_set(number v) {
    this->p_03->updateTime(this->_currentTime);
    this->p_03->eventinlet_02_out1_number_set(v);
}

static number param_02_value_constrain(number v) {
    v = (v > 63 ? 63 : (v < 7 ? 7 : v));
    return v;
}

void counter_01_maximum_set(number v) {
    this->counter_01_maximum = v;

    if (this->counter_01_count > this->counter_01_maximum)
        this->counter_01_count = this->counter_01_minimum;
}

static number param_03_value_constrain(number v) {
    v = (v > 6 ? 6 : (v < 0 ? 0 : v));
    return v;
}

void p_05_in2_number_set(number v) {
    for (Index i = 0; i < 5; i++) {
        if (i + 1 == this->p_05_target || 0 == this->p_05_target) {
            this->p_05[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 5; i++) {
        if (i + 1 == this->p_05_target || 0 == this->p_05_target) {
            this->p_05[i]->eventinlet_05_out1_number_set(v);
        }
    }
}

static number param_04_value_constrain(number v) {
    v = (v > 120 ? 120 : (v < 0 ? 0 : v));
    return v;
}

void p_05_in3_number_set(number v) {
    for (Index i = 0; i < 5; i++) {
        if (i + 1 == this->p_05_target || 0 == this->p_05_target) {
            this->p_05[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 5; i++) {
        if (i + 1 == this->p_05_target || 0 == this->p_05_target) {
            this->p_05[i]->eventinlet_06_out1_number_set(v);
        }
    }
}

static number param_05_value_constrain(number v) {
    v = (v > 12000 ? 12000 : (v < 0 ? 0 : v));
    return v;
}

void adsr_01_attack_set(number v) {
    this->adsr_01_attack = v;
}

static number param_06_value_constrain(number v) {
    v = (v > 30000 ? 30000 : (v < 0 ? 0 : v));
    return v;
}

void adsr_01_decay_set(number v) {
    this->adsr_01_decay = v;
}

static number param_07_value_constrain(number v) {
    v = (v > 1.6 ? 1.6 : (v < 0.01 ? 0.01 : v));
    return v;
}

void p_06_in2_number_set(number v) {
    this->p_06->updateTime(this->_currentTime);
    this->p_06->eventinlet_09_out1_number_set(v);
}

static number param_08_value_constrain(number v) {
    v = (v > 0.9 ? 0.9 : (v < 0.05 ? 0.05 : v));
    return v;
}

void p_06_in3_number_set(number v) {
    this->p_06->updateTime(this->_currentTime);
    this->p_06->eventinlet_10_out1_number_set(v);
}

static number param_09_value_constrain(number v) {
    v = (v > 12000 ? 12000 : (v < 20 ? 20 : v));
    return v;
}

void p_06_in4_number_set(number v) {
    this->p_06->updateTime(this->_currentTime);
    this->p_06->eventinlet_11_out1_number_set(v);
}

static number param_10_value_constrain(number v) {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

void adsr_01_sustain_set(number v) {
    this->adsr_01_sustain = v;
}

static number param_11_value_constrain(number v) {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

void p_06_in5_number_set(number v) {
    this->p_06->updateTime(this->_currentTime);
    this->p_06->eventinlet_12_out1_number_set(v);
}

static number param_12_value_constrain(number v) {
    v = (v > 10000 ? 10000 : (v < 30 ? 30 : v));
    return v;
}

void adsr_01_release_set(number v) {
    this->adsr_01_release = v;
}

void message_05_set_set(const list& v) {
    this->message_05_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-87"), v, this->_currentTime);
}

void metro_01_on_set(number v) {
    this->metro_01_on = v;
    this->getEngine()->flushClockEvents(this, 1935387534, false);;

    if ((bool)(v)) {
        {
            this->getEngine()->scheduleClockEvent(this, 1935387534, 0 + this->_currentTime);;
        }
    }
}

void metro_01_interval_set(number v) {
    this->metro_01_interval_setter(v);
    v = this->metro_01_interval;
}

void message_05_out_set(const list& v) {
    {
        if (v->length > 1)
            this->metro_01_interval_set(v[1]);

        number converted = (v->length > 0 ? v[0] : 0);
        this->metro_01_on_set(converted);
    }
}

void message_05_trigger_bang() {
    this->message_05_out_set(this->message_05_set);
}

void loadmess_01_message_bang() {
    list v = this->loadmess_01_message;

    {
        if (v->length > 1)
            this->metro_01_interval_set(v[1]);

        number converted = (v->length > 0 ? v[0] : 0);
        this->metro_01_on_set(converted);
    }
}

void route_10_nomatch_bang_bang() {}

void p_05_in1_number_set(number v) {
    for (Index i = 0; i < 5; i++) {
        if (i + 1 == this->p_05_target || 0 == this->p_05_target) {
            this->p_05[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 5; i++) {
        if (i + 1 == this->p_05_target || 0 == this->p_05_target) {
            this->p_05[i]->eventinlet_04_out1_number_set(v);
        }
    }
}

void print_03_input_number_set(number v) {
    {
        console->log("bass", v);
    }
}

void p_03_in1_number_set(number v) {
    this->p_03->updateTime(this->_currentTime);
    this->p_03->eventinlet_01_out1_number_set(v);
}

void p_04_out1_number_set(number v) {
    this->p_05_in1_number_set(v);
    this->print_03_input_number_set(v);
    this->p_03_in1_number_set(v);
}

void p_04_in1_bang_bang() {
    this->p_04->updateTime(this->_currentTime);
    this->p_04->eventinlet_03_out1_bang_bang();
}

void trigger_07_out2_bang() {
    this->p_04_in1_bang_bang();
}

void adsr_01_trigger_number_set(number v) {
    this->adsr_01_trigger_number = v;

    if (v != 0)
        this->adsr_01_triggerBuf[(Index)this->sampleOffsetIntoNextAudioBuffer] = 1;

    for (number i = this->sampleOffsetIntoNextAudioBuffer; i < this->vectorsize(); i++) {
        this->adsr_01_triggerValueBuf[(Index)i] = v;
    }
}

void trigger_07_out1_set(number v) {
    this->adsr_01_trigger_number_set(v);
}

void trigger_07_input_bang_bang() {
    this->trigger_07_out2_bang();
    this->trigger_07_out1_set(1);
}

void trigger_06_out1_bang() {
    this->trigger_07_input_bang_bang();
}

void trigger_06_input_number_set(number v) {
    RNBO_UNUSED(v);
    this->trigger_06_out1_bang();
}

void expr_43_out1_set(number v) {
    this->expr_43_out1 = v;
    this->trigger_06_input_number_set(this->expr_43_out1);
}

void expr_43_in1_set(number in1) {
    this->expr_43_in1 = in1;
    this->expr_43_out1_set(this->expr_43_in1 >= this->expr_43_in2);//#map:>=_obj-26:1
}

void expr_44_out1_set(number v) {
    this->expr_44_out1 = v;
    this->expr_43_in1_set(this->expr_44_out1);
}

void expr_44_in1_set(number in1) {
    this->expr_44_in1 = in1;
    this->expr_44_out1_set(this->expr_44_in1 + this->expr_44_in2);//#map:+_obj-24:1
}

void random_08_result_set(number v) {
    this->expr_44_in1_set(v);
}

void random_08_trigger_bang() {
    {
        this->random_08_result_set(this->random(0, this->random_08_limit));
    }
}

void route_10_match1_bang_bang() {
    this->random_08_trigger_bang();
}

void route_10_match1_number_set(number v) {
    RNBO_UNUSED(v);
    this->random_08_trigger_bang();
}

void route_10_match1_list_set(const list& v) {
    RNBO_UNUSED(v);
    this->random_08_trigger_bang();
}

void route_10_nomatch_number_set(number ) {}

void route_10_nomatch_list_set(const list& ) {}

void route_10_input_list_set(const list& v) {
    if ((bool)(!(bool)(v->length)))
        this->route_10_nomatch_bang_bang();
    else {
        number check = v[0];
        list input = jsCreateListCopy(v);
        input->shift();
        bool nomatch = true;

        if (check == this->route_10_selector1) {
            if (input->length == 0)
                this->route_10_match1_bang_bang();
            else if (input->length == 1)
                this->route_10_match1_number_set(input[0]);
            else
                this->route_10_match1_list_set(input);

            nomatch = false;
        }

        if ((bool)(nomatch)) {
            if (v->length == 1) {
                this->route_10_nomatch_number_set(v[0]);
            } else {
                this->route_10_nomatch_list_set(v);
            }
        }
    }
}

void route_10_input_number_set(number v) {
    this->route_10_input_list_set({v});
}

void counter_01_output_set(number v) {
    this->counter_01_output = v;
    this->route_10_input_number_set(v);
}

void counter_01_overflow_bang_bang() {}

static number counter_01_overflow_number_constrain(number v) {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void counter_01_overflow_number_set(number v) {
    v = this->counter_01_overflow_number_constrain(v);
    this->counter_01_overflow_number = v;
}

void counter_01_carry_set(number v) {
    this->counter_01_carry = v;
}

void counter_01_underflow_bang_bang() {}

static number counter_01_underflow_number_constrain(number v) {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void counter_01_underflow_number_set(number v) {
    v = this->counter_01_underflow_number_constrain(v);
    this->counter_01_underflow_number = v;
}

void counter_01_input_bang() {
    this->counter_01_output_set(this->counter_01_count);
    this->counter_01_inc();

    if (this->counter_01_count > this->counter_01_maximum) {
        if (this->counter_01_direction == 2) {
            this->counter_01_phase = !(bool)(this->counter_01_phase);
            this->counter_01_count = this->counter_01_maximum;
            this->counter_01_inc();
        } else
            this->counter_01_count = this->counter_01_minimum;

        if ((bool)(!(bool)(this->counter_01_overflow_number))) {
            if (this->counter_01_carryflag == 1)
                this->counter_01_overflow_bang_bang();
            else
                this->counter_01_overflow_number_set(1);
        }

        this->counter_01_carry_set(this->counter_01_carry + 1);
    } else if ((bool)(this->counter_01_overflow_number) && this->counter_01_carryflag == 0)
        this->counter_01_overflow_number_set(0);

    if (this->counter_01_count < this->counter_01_minimum) {
        if (this->counter_01_direction == 2) {
            this->counter_01_phase = !(bool)(this->counter_01_phase);
            this->counter_01_count = this->counter_01_minimum;
            this->counter_01_inc();
        } else
            this->counter_01_count = this->counter_01_maximum;

        if ((bool)(!(bool)(this->counter_01_underflow_number))) {
            if (this->counter_01_carryflag == 1)
                this->counter_01_underflow_bang_bang();
            else
                this->counter_01_underflow_number_set(1);
        }

        this->counter_01_carry_set(this->counter_01_carry + 1);
    } else if ((bool)(this->counter_01_underflow_number) && this->counter_01_carryflag == 0)
        this->counter_01_underflow_number_set(0);
}

void metro_01_tickout_bang() {
    this->counter_01_input_bang();
}

void tempo_01_input_number_set(number v) {
    this->tempo_01_input_number = v;

    if (v >= 0) {
        this->getTopLevelPatcher()->globaltransport_setTempo(this->currenttime(), v, true);
    }
}

void loadmess_02_message_bang() {
    list v = this->loadmess_02_message;

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->tempo_01_input_number_set(converted);
    }
}

void tempo_01_tempo_set(number ) {}

void p_03_perform(SampleValue * out1, Index n) {
    // subpatcher: bass
    SampleArray<1> outs = {out1};

    this->p_03->process(nullptr, 0, outs, 1, n);
}

void p_04_perform(Index n) {
    // subpatcher: chord1markov
    this->p_04->process(nullptr, 0, nullptr, 0, n);
}

void p_05_perform(SampleValue * out1, Index n) {
    // subpatcher: chord1
    SampleArray<1> outs = {out1};

    for (number chan = 0; chan < 1; chan++)
        zeroSignal(outs[(Index)chan], n);

    for (Index i = 0; i < 5; i++)
        this->p_05[(Index)i]->process(nullptr, 0, outs, 1, n);
}

void scopetilde_01_perform(const SampleValue * x, const SampleValue * y, Index n) {
    auto __scopetilde_01_ysign = this->scopetilde_01_ysign;
    auto __scopetilde_01_ymonitorvalue = this->scopetilde_01_ymonitorvalue;
    auto __scopetilde_01_xsign = this->scopetilde_01_xsign;
    auto __scopetilde_01_xmonitorvalue = this->scopetilde_01_xmonitorvalue;
    auto __scopetilde_01_mode = this->scopetilde_01_mode;

    for (Index i = 0; i < n; i++) {
        number xval = x[(Index)i];
        number yval = y[(Index)i];

        if (__scopetilde_01_mode == 1) {
            number xabsval = rnbo_abs(xval);

            if (xabsval > __scopetilde_01_xmonitorvalue) {
                __scopetilde_01_xmonitorvalue = xabsval;
                __scopetilde_01_xsign = (xval < 0 ? -1 : 1);
            }

            number yabsval = rnbo_abs(yval);

            if (yabsval > __scopetilde_01_ymonitorvalue) {
                __scopetilde_01_ymonitorvalue = yabsval;
                __scopetilde_01_ysign = (yval < 0 ? -1 : 1);
            }
        } else {
            __scopetilde_01_xmonitorvalue = xval;
            __scopetilde_01_xsign = 1;
            __scopetilde_01_ymonitorvalue = yval;
            __scopetilde_01_ysign = 1;
        }

        this->scopetilde_01_effectiveCount--;

        if (this->scopetilde_01_effectiveCount <= 0) {
            this->scopetilde_01_updateEffectiveCount();
            this->scopetilde_01_monitorbuffer->push(__scopetilde_01_xmonitorvalue * __scopetilde_01_xsign);

            if (__scopetilde_01_mode == 1)
                __scopetilde_01_xmonitorvalue = 0;

            if (this->scopetilde_01_monitorbuffer->length >= 128 * (1 + 0)) {
                this->getEngine()->sendListMessage(
                    TAG("monitor"),
                    TAG("scope~_obj-36"),
                    this->scopetilde_01_monitorbuffer,
                    this->_currentTime
                );;

                this->scopetilde_01_monitorbuffer->length = 0;
            }
        }
    }

    this->scopetilde_01_xmonitorvalue = __scopetilde_01_xmonitorvalue;
    this->scopetilde_01_xsign = __scopetilde_01_xsign;
    this->scopetilde_01_ymonitorvalue = __scopetilde_01_ymonitorvalue;
    this->scopetilde_01_ysign = __scopetilde_01_ysign;
}

void numbertilde_01_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_01_currentIntervalInSamples = this->numbertilde_01_currentIntervalInSamples;
    auto __numbertilde_01_lastValue = this->numbertilde_01_lastValue;
    auto __numbertilde_01_currentInterval = this->numbertilde_01_currentInterval;
    auto __numbertilde_01_rampInSamples = this->numbertilde_01_rampInSamples;
    auto __numbertilde_01_outValue = this->numbertilde_01_outValue;
    auto __numbertilde_01_currentMode = this->numbertilde_01_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_01_currentMode == 0) {
            output[(Index)i] = this->numbertilde_01_smooth_next(
                __numbertilde_01_outValue,
                __numbertilde_01_rampInSamples,
                __numbertilde_01_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_01_currentInterval -= n;

    if (monitorvalue != __numbertilde_01_lastValue && __numbertilde_01_currentInterval <= 0) {
        __numbertilde_01_currentInterval = __numbertilde_01_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -1494586265,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_01_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-23"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_01_currentInterval = __numbertilde_01_currentInterval;
    this->numbertilde_01_lastValue = __numbertilde_01_lastValue;
}

void adsr_01_perform(
    number attack,
    number decay,
    number sustain,
    number release,
    const SampleValue * trigger_signal,
    SampleValue * out,
    Index n
) {
    RNBO_UNUSED(trigger_signal);
    auto __adsr_01_trigger_number = this->adsr_01_trigger_number;
    auto __adsr_01_time = this->adsr_01_time;
    auto __adsr_01_amplitude = this->adsr_01_amplitude;
    auto __adsr_01_outval = this->adsr_01_outval;
    auto __adsr_01_startingpoint = this->adsr_01_startingpoint;
    auto __adsr_01_phase = this->adsr_01_phase;
    auto __adsr_01_legato = this->adsr_01_legato;
    auto __adsr_01_lastTriggerVal = this->adsr_01_lastTriggerVal;
    auto __adsr_01_mspersamp = this->adsr_01_mspersamp;
    bool bangMute = false;

    for (Index i = 0; i < n; i++) {
        number clampedattack = (attack > __adsr_01_mspersamp ? attack : __adsr_01_mspersamp);
        number clampeddecay = (decay > __adsr_01_mspersamp ? decay : __adsr_01_mspersamp);
        number clampedrelease = (release > __adsr_01_mspersamp ? release : __adsr_01_mspersamp);
        number currentTriggerVal = this->adsr_01_triggerValueBuf[(Index)i];

        if ((__adsr_01_lastTriggerVal == 0.0 && currentTriggerVal != 0.0) || this->adsr_01_triggerBuf[(Index)i] == 1) {
            if ((bool)(__adsr_01_legato)) {
                if (__adsr_01_phase != 0) {
                    __adsr_01_startingpoint = __adsr_01_outval;
                } else {
                    __adsr_01_startingpoint = 0;
                }
            } else {
                __adsr_01_startingpoint = 0;
            }

            __adsr_01_amplitude = currentTriggerVal;
            __adsr_01_phase = 1;
            __adsr_01_time = 0.0;
            bangMute = false;
        } else if (__adsr_01_lastTriggerVal != 0.0 && currentTriggerVal == 0.0) {
            if (__adsr_01_phase != 4 && __adsr_01_phase != 0) {
                __adsr_01_phase = 4;
                __adsr_01_amplitude = __adsr_01_outval;
                __adsr_01_time = 0.0;
            }
        }

        __adsr_01_time += __adsr_01_mspersamp;

        if (__adsr_01_phase == 0) {
            __adsr_01_outval = 0;
        } else if (__adsr_01_phase == 1) {
            if (__adsr_01_time > clampedattack) {
                __adsr_01_time -= clampedattack;
                __adsr_01_phase = 2;
                __adsr_01_outval = __adsr_01_amplitude;
            } else {
                __adsr_01_outval = (__adsr_01_amplitude - __adsr_01_startingpoint) * __adsr_01_time / clampedattack + __adsr_01_startingpoint;
            }
        } else if (__adsr_01_phase == 2) {
            if (__adsr_01_time > clampeddecay) {
                __adsr_01_time -= clampeddecay;
                __adsr_01_phase = 3;
                __adsr_01_outval = __adsr_01_amplitude * sustain;
            } else {
                __adsr_01_outval = __adsr_01_amplitude * sustain + (__adsr_01_amplitude - __adsr_01_amplitude * sustain) * (1. - __adsr_01_time / clampeddecay);
            }
        } else if (__adsr_01_phase == 3) {
            __adsr_01_outval = __adsr_01_amplitude * sustain;
        } else if (__adsr_01_phase == 4) {
            if (__adsr_01_time > clampedrelease) {
                __adsr_01_time = 0;
                __adsr_01_phase = 0;
                __adsr_01_outval = 0;
                __adsr_01_amplitude = 0;
                bangMute = true;
            } else {
                __adsr_01_outval = __adsr_01_amplitude * (1.0 - __adsr_01_time / clampedrelease);
            }
        }

        out[(Index)i] = __adsr_01_outval;
        this->adsr_01_triggerBuf[(Index)i] = 0;
        this->adsr_01_triggerValueBuf[(Index)i] = __adsr_01_trigger_number;
        __adsr_01_lastTriggerVal = currentTriggerVal;
    }

    if ((bool)(bangMute)) {
        this->getEngine()->scheduleClockEventWithValue(
            this,
            -1468824490,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            0
        );;
    }

    this->adsr_01_lastTriggerVal = __adsr_01_lastTriggerVal;
    this->adsr_01_phase = __adsr_01_phase;
    this->adsr_01_startingpoint = __adsr_01_startingpoint;
    this->adsr_01_outval = __adsr_01_outval;
    this->adsr_01_amplitude = __adsr_01_amplitude;
    this->adsr_01_time = __adsr_01_time;
}

void dspexpr_17_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    RNBO_UNUSED(in2);
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] - 1;//#map:_###_obj_###_:1
    }
}

void dspexpr_16_perform(const Sample * in1, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = rnbo_abs(in1[(Index)i]);//#map:_###_obj_###_:1
    }
}

void scale_tilde_03_perform(
    const Sample * x,
    number lowin,
    number hiin,
    number lowout,
    number highout,
    number pow,
    SampleValue * out1,
    Index n
) {
    RNBO_UNUSED(pow);
    RNBO_UNUSED(highout);
    RNBO_UNUSED(lowout);
    RNBO_UNUSED(hiin);
    RNBO_UNUSED(lowin);
    auto inscale = this->safediv(1., 1 - 0);
    number outdiff = 0.63 - 0;
    Index i;

    for (i = 0; i < n; i++) {
        number value = (x[(Index)i] - 0) * inscale;
        value = value * outdiff + 0;
        out1[(Index)i] = value;
    }
}

void dspexpr_10_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void scale_tilde_02_perform(
    const Sample * x,
    number lowin,
    number hiin,
    number lowout,
    number highout,
    number pow,
    SampleValue * out1,
    Index n
) {
    RNBO_UNUSED(pow);
    RNBO_UNUSED(highout);
    RNBO_UNUSED(lowout);
    RNBO_UNUSED(hiin);
    RNBO_UNUSED(lowin);
    auto inscale = this->safediv(1., 1 - 0);
    number outdiff = 5000 - 120;
    Index i;

    for (i = 0; i < n; i++) {
        number value = (x[(Index)i] - 0) * inscale;
        value = value * outdiff + 120;
        out1[(Index)i] = value;
    }
}

void svf_tilde_03_perform(
    const Sample * x,
    const Sample * freq,
    const Sample * q,
    SampleValue * out1,
    SampleValue * out2,
    SampleValue * out3,
    SampleValue * out4,
    Index n
) {
    auto __svf_tilde_03_high = this->svf_tilde_03_high;
    auto __svf_tilde_03_notch = this->svf_tilde_03_notch;
    auto __svf_tilde_03_band = this->svf_tilde_03_band;
    auto __svf_tilde_03_low = this->svf_tilde_03_low;
    auto __svf_tilde_03__q = this->svf_tilde_03__q;
    auto __svf_tilde_03__freq = this->svf_tilde_03__freq;
    Index i;

    for (i = 0; i < n; i++) {
        if (this->svf_tilde_03_dFreq_next(freq[(Index)i]) != 0) {
            __svf_tilde_03__freq = (freq[(Index)i] > this->sr * 0.25 ? this->sr * 0.25 : (freq[(Index)i] < 0.0 ? 0.0 : freq[(Index)i]));
            __svf_tilde_03__freq = rnbo_sin(6.28318530717958647692 * __svf_tilde_03__freq / this->sr);
            __svf_tilde_03__freq = (__svf_tilde_03__freq > 0.99 ? 0.99 : (__svf_tilde_03__freq < 0.001 ? 0.001 : __svf_tilde_03__freq));
        }

        if (this->svf_tilde_03_dQ_next(q[(Index)i]) != 0) {
            __svf_tilde_03__q = (1. - q[(Index)i]) * 1.2;
            __svf_tilde_03__q = __svf_tilde_03__q * __svf_tilde_03__q;
            __svf_tilde_03__q = (__svf_tilde_03__q > 0.99 ? 0.99 : (__svf_tilde_03__q < 0.001 ? 0.001 : __svf_tilde_03__q));
        }

        __svf_tilde_03_low += __svf_tilde_03__freq * __svf_tilde_03_band;
        __svf_tilde_03_notch = x[(Index)i] - __svf_tilde_03__q * __svf_tilde_03_band;
        __svf_tilde_03_high = __svf_tilde_03_notch - __svf_tilde_03_low;
        __svf_tilde_03_band += __svf_tilde_03__freq * __svf_tilde_03_high - __svf_tilde_03_band * __svf_tilde_03_band * __svf_tilde_03_band * 0.0001;
        array<number, 4> tmp = {0, 0, 0, 0};
        tmp[0] = __svf_tilde_03_low;
        tmp[1] = __svf_tilde_03_high;
        tmp[2] = __svf_tilde_03_band;
        tmp[3] = __svf_tilde_03_notch;
        out1[(Index)i] = tmp[0];
        out2[(Index)i] = tmp[1];
        out3[(Index)i] = tmp[2];
        out4[(Index)i] = tmp[3];
    }

    this->svf_tilde_03__freq = __svf_tilde_03__freq;
    this->svf_tilde_03__q = __svf_tilde_03__q;
    this->svf_tilde_03_low = __svf_tilde_03_low;
    this->svf_tilde_03_band = __svf_tilde_03_band;
    this->svf_tilde_03_notch = __svf_tilde_03_notch;
    this->svf_tilde_03_high = __svf_tilde_03_high;
}

void svf_tilde_02_perform(
    const Sample * x,
    const Sample * freq,
    const Sample * q,
    SampleValue * out1,
    SampleValue * out2,
    SampleValue * out3,
    SampleValue * out4,
    Index n
) {
    auto __svf_tilde_02_high = this->svf_tilde_02_high;
    auto __svf_tilde_02_notch = this->svf_tilde_02_notch;
    auto __svf_tilde_02_band = this->svf_tilde_02_band;
    auto __svf_tilde_02_low = this->svf_tilde_02_low;
    auto __svf_tilde_02__q = this->svf_tilde_02__q;
    auto __svf_tilde_02__freq = this->svf_tilde_02__freq;
    Index i;

    for (i = 0; i < n; i++) {
        if (this->svf_tilde_02_dFreq_next(freq[(Index)i]) != 0) {
            __svf_tilde_02__freq = (freq[(Index)i] > this->sr * 0.25 ? this->sr * 0.25 : (freq[(Index)i] < 0.0 ? 0.0 : freq[(Index)i]));
            __svf_tilde_02__freq = rnbo_sin(6.28318530717958647692 * __svf_tilde_02__freq / this->sr);
            __svf_tilde_02__freq = (__svf_tilde_02__freq > 0.99 ? 0.99 : (__svf_tilde_02__freq < 0.001 ? 0.001 : __svf_tilde_02__freq));
        }

        if (this->svf_tilde_02_dQ_next(q[(Index)i]) != 0) {
            __svf_tilde_02__q = (1. - q[(Index)i]) * 1.2;
            __svf_tilde_02__q = __svf_tilde_02__q * __svf_tilde_02__q;
            __svf_tilde_02__q = (__svf_tilde_02__q > 0.99 ? 0.99 : (__svf_tilde_02__q < 0.001 ? 0.001 : __svf_tilde_02__q));
        }

        __svf_tilde_02_low += __svf_tilde_02__freq * __svf_tilde_02_band;
        __svf_tilde_02_notch = x[(Index)i] - __svf_tilde_02__q * __svf_tilde_02_band;
        __svf_tilde_02_high = __svf_tilde_02_notch - __svf_tilde_02_low;
        __svf_tilde_02_band += __svf_tilde_02__freq * __svf_tilde_02_high - __svf_tilde_02_band * __svf_tilde_02_band * __svf_tilde_02_band * 0.0001;
        array<number, 4> tmp = {0, 0, 0, 0};
        tmp[0] = __svf_tilde_02_low;
        tmp[1] = __svf_tilde_02_high;
        tmp[2] = __svf_tilde_02_band;
        tmp[3] = __svf_tilde_02_notch;
        out1[(Index)i] = tmp[0];
        out2[(Index)i] = tmp[1];
        out3[(Index)i] = tmp[2];
        out4[(Index)i] = tmp[3];
    }

    this->svf_tilde_02__freq = __svf_tilde_02__freq;
    this->svf_tilde_02__q = __svf_tilde_02__q;
    this->svf_tilde_02_low = __svf_tilde_02_low;
    this->svf_tilde_02_band = __svf_tilde_02_band;
    this->svf_tilde_02_notch = __svf_tilde_02_notch;
    this->svf_tilde_02_high = __svf_tilde_02_high;
}

void signaladder_01_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out,
    Index n
) {
    Index i;

    for (i = 0; i < n; i++) {
        out[(Index)i] = in1[(Index)i] + in2[(Index)i];
    }
}

void dspexpr_13_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    RNBO_UNUSED(in2);
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * 0.707;//#map:_###_obj_###_:1
    }
}

void p_06_perform(const SampleValue * in1, SampleValue * out1, SampleValue * out2, Index n) {
    // subpatcher: reverb
    ConstSampleArray<1> ins = {in1};

    SampleArray<2> outs = {out1, out2};
    this->p_06->process(ins, 1, outs, 2, n);
}

void dspexpr_14_perform(const Sample * in1, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = fixnan(in1[(Index)i]);//#map:_###_obj_###_:1
    }
}

void dspexpr_15_perform(const Sample * in1, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = fixnan(in1[(Index)i]);//#map:_###_obj_###_:1
    }
}

void dspexpr_09_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void scale_tilde_01_perform(
    const Sample * x,
    number lowin,
    number hiin,
    number lowout,
    number highout,
    number pow,
    SampleValue * out1,
    Index n
) {
    RNBO_UNUSED(pow);
    RNBO_UNUSED(highout);
    RNBO_UNUSED(lowout);
    RNBO_UNUSED(hiin);
    RNBO_UNUSED(lowin);
    auto inscale = this->safediv(1., 1 - 0);
    number outdiff = 1500 - 120;
    Index i;

    for (i = 0; i < n; i++) {
        number value = (x[(Index)i] - 0) * inscale;
        value = value * outdiff + 120;
        out1[(Index)i] = value;
    }
}

void svf_tilde_01_perform(
    const Sample * x,
    const Sample * freq,
    number q,
    SampleValue * out1,
    SampleValue * out2,
    SampleValue * out3,
    SampleValue * out4,
    Index n
) {
    RNBO_UNUSED(q);
    auto __svf_tilde_01_high = this->svf_tilde_01_high;
    auto __svf_tilde_01_notch = this->svf_tilde_01_notch;
    auto __svf_tilde_01_band = this->svf_tilde_01_band;
    auto __svf_tilde_01_low = this->svf_tilde_01_low;
    auto __svf_tilde_01__q = this->svf_tilde_01__q;
    auto __svf_tilde_01__freq = this->svf_tilde_01__freq;
    Index i;

    for (i = 0; i < n; i++) {
        if (this->svf_tilde_01_dFreq_next(freq[(Index)i]) != 0) {
            __svf_tilde_01__freq = (freq[(Index)i] > this->sr * 0.25 ? this->sr * 0.25 : (freq[(Index)i] < 0.0 ? 0.0 : freq[(Index)i]));
            __svf_tilde_01__freq = rnbo_sin(6.28318530717958647692 * __svf_tilde_01__freq / this->sr);
            __svf_tilde_01__freq = (__svf_tilde_01__freq > 0.99 ? 0.99 : (__svf_tilde_01__freq < 0.001 ? 0.001 : __svf_tilde_01__freq));
        }

        if (this->svf_tilde_01_dQ_next(0.2) != 0) {
            __svf_tilde_01__q = (1. - 0.2) * 1.2;
            __svf_tilde_01__q = __svf_tilde_01__q * __svf_tilde_01__q;
            __svf_tilde_01__q = (__svf_tilde_01__q > 0.99 ? 0.99 : (__svf_tilde_01__q < 0.001 ? 0.001 : __svf_tilde_01__q));
        }

        __svf_tilde_01_low += __svf_tilde_01__freq * __svf_tilde_01_band;
        __svf_tilde_01_notch = x[(Index)i] - __svf_tilde_01__q * __svf_tilde_01_band;
        __svf_tilde_01_high = __svf_tilde_01_notch - __svf_tilde_01_low;
        __svf_tilde_01_band += __svf_tilde_01__freq * __svf_tilde_01_high - __svf_tilde_01_band * __svf_tilde_01_band * __svf_tilde_01_band * 0.0001;
        array<number, 4> tmp = {0, 0, 0, 0};
        tmp[0] = __svf_tilde_01_low;
        tmp[1] = __svf_tilde_01_high;
        tmp[2] = __svf_tilde_01_band;
        tmp[3] = __svf_tilde_01_notch;
        out1[(Index)i] = tmp[0];
        out2[(Index)i] = tmp[1];
        out3[(Index)i] = tmp[2];
        out4[(Index)i] = tmp[3];
    }

    this->svf_tilde_01__freq = __svf_tilde_01__freq;
    this->svf_tilde_01__q = __svf_tilde_01__q;
    this->svf_tilde_01_low = __svf_tilde_01_low;
    this->svf_tilde_01_band = __svf_tilde_01_band;
    this->svf_tilde_01_notch = __svf_tilde_01_notch;
    this->svf_tilde_01_high = __svf_tilde_01_high;
}

void signaladder_02_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out,
    Index n
) {
    Index i;

    for (i = 0; i < n; i++) {
        out[(Index)i] = in1[(Index)i] + in2[(Index)i];
    }
}

void dspexpr_12_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    RNBO_UNUSED(in2);
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] + 0;//#map:_###_obj_###_:1
    }
}

void signaladder_03_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out,
    Index n
) {
    Index i;

    for (i = 0; i < n; i++) {
        out[(Index)i] = in1[(Index)i] + in2[(Index)i];
    }
}

void dspexpr_11_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    RNBO_UNUSED(in2);
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] + 0;//#map:_###_obj_###_:1
    }
}

void limi_01_perform(
    const SampleValue * input1,
    const SampleValue * input2,
    SampleValue * output1,
    SampleValue * output2,
    Index n
) {
    RNBO_UNUSED(output2);
    RNBO_UNUSED(output1);
    RNBO_UNUSED(input2);
    RNBO_UNUSED(input1);
    auto __limi_01_lookaheadInv = this->limi_01_lookaheadInv;
    auto __limi_01_threshold = this->limi_01_threshold;
    auto __limi_01_lookahead = this->limi_01_lookahead;
    auto __limi_01_recover = this->limi_01_recover;
    auto __limi_01_last = this->limi_01_last;
    auto __limi_01_postamp = this->limi_01_postamp;
    auto __limi_01_lookaheadIndex = this->limi_01_lookaheadIndex;
    auto __limi_01_preamp = this->limi_01_preamp;
    auto __limi_01_dcblock = this->limi_01_dcblock;
    auto __limi_01_bypass = this->limi_01_bypass;
    ConstSampleArray<2> input = {input1, input2};
    SampleArray<2> output = {output1, output2};

    if ((bool)(__limi_01_bypass)) {
        for (Index i = 0; i < n; i++) {
            for (Index j = 0; j < 2; j++) {
                output[(Index)j][(Index)i] = input[(Index)j][(Index)i];
            }
        }
    } else {
        number v;

        for (Index i = 0; i < n; i++) {
            number hotSample = 0;

            for (Index j = 0; j < 2; j++) {
                auto smps = input[(Index)j];
                v = ((bool)(__limi_01_dcblock) ? this->limi_01_dc_next(j, smps[(Index)i], 0.9997) : smps[(Index)i]);
                v *= __limi_01_preamp;
                this->limi_01_lookaheadBuffers[(Index)j][__limi_01_lookaheadIndex] = v * __limi_01_postamp;
                v = rnbo_fabs(v);

                if (v > hotSample)
                    hotSample = v;
            }

            {
                if (__limi_01_last > 0.01)
                    v = __limi_01_last + __limi_01_recover * __limi_01_last;
                else
                    v = __limi_01_last + __limi_01_recover;
            }

            if (v > 1)
                v = 1;

            this->limi_01_gainBuffer[__limi_01_lookaheadIndex] = v;
            int lookaheadPlayback = (int)(__limi_01_lookaheadIndex - (int)(__limi_01_lookahead));

            if (lookaheadPlayback < 0)
                lookaheadPlayback += (int)(__limi_01_lookahead);

            if (hotSample * v > __limi_01_threshold) {
                number newgain;
                number curgain = __limi_01_threshold / hotSample;
                number inc = __limi_01_threshold - curgain;
                number acc = 0.0;
                number flag = 0;

                for (Index j = 0; flag == 0 && j < (Index)(__limi_01_lookahead); j++) {
                    int k = (int)(__limi_01_lookaheadIndex - (int)(j));

                    if (k < 0)
                        k += (int)(__limi_01_lookahead);

                    {
                        newgain = curgain + inc * (acc * acc);
                    }

                    if (newgain < this->limi_01_gainBuffer[(Index)k])
                        this->limi_01_gainBuffer[(Index)k] = newgain;
                    else
                        flag = 1;

                    acc = acc + __limi_01_lookaheadInv;
                }
            }

            for (Index j = 0; j < 2; j++) {
                output[(Index)j][(Index)i] = this->limi_01_lookaheadBuffers[(Index)j][(Index)lookaheadPlayback] * this->limi_01_gainBuffer[(Index)lookaheadPlayback];
            }

            __limi_01_last = this->limi_01_gainBuffer[__limi_01_lookaheadIndex];
            __limi_01_lookaheadIndex++;

            if (__limi_01_lookaheadIndex >= __limi_01_lookahead)
                __limi_01_lookaheadIndex = 0;
        }
    }

    this->limi_01_lookaheadIndex = __limi_01_lookaheadIndex;
    this->limi_01_last = __limi_01_last;
}

void stackprotect_perform(Index n) {
    RNBO_UNUSED(n);
    auto __stackprotect_count = this->stackprotect_count;
    __stackprotect_count = 0;
    this->stackprotect_count = __stackprotect_count;
}

void random_08_limit_setter(number v) {
    if (v >= 0)
        this->random_08_limit = v;
}

void metro_01_interval_setter(number v) {
    this->metro_01_interval = (v > 0 ? v : 0);
}

void limi_01_lookahead_setter(number v) {
    this->limi_01_lookahead = (v > 512 ? 512 : (v < 0 ? 0 : v));
    this->limi_01_lookaheadInv = (number)1 / this->limi_01_lookahead;
}

void limi_01_preamp_setter(number v) {
    this->limi_01_preamp = rnbo_pow(10., v * 0.05);
}

void limi_01_postamp_setter(number v) {
    this->limi_01_postamp = rnbo_pow(10., v * 0.05);
}

void limi_01_threshold_setter(number v) {
    this->limi_01_threshold = rnbo_pow(10., v * 0.05);
}

void param_01_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_01_value;
}

void param_01_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_01_value_set(preset["value"]);
}

void scopetilde_01_updateEffectiveCount() {
    number effectiveCount = 256 * 1 + 256 * 0;
    this->scopetilde_01_effectiveCount = this->maximum(effectiveCount, 256);
}

void scopetilde_01_dspsetup(bool force) {
    if ((bool)(this->scopetilde_01_setupDone) && (bool)(!(bool)(force)))
        return;

    {
        this->scopetilde_01_mode = 1;
    }

    this->getEngine()->sendListMessage(
        TAG("setup"),
        TAG("scope~_obj-36"),
        {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_01_mode},
        this->_currentTime
    );;

    this->scopetilde_01_updateEffectiveCount();
    this->scopetilde_01_setupDone = true;
}

void message_05_init() {
    this->message_05_set_set({1});
}

number svf_tilde_01_dFreq_next(number x) {
    number temp = (number)(x - this->svf_tilde_01_dFreq_prev);
    this->svf_tilde_01_dFreq_prev = x;
    return temp;
}

void svf_tilde_01_dFreq_dspsetup() {
    this->svf_tilde_01_dFreq_reset();
}

void svf_tilde_01_dFreq_reset() {
    this->svf_tilde_01_dFreq_prev = 0;
}

number svf_tilde_01_dQ_next(number x) {
    number temp = (number)(x - this->svf_tilde_01_dQ_prev);
    this->svf_tilde_01_dQ_prev = x;
    return temp;
}

void svf_tilde_01_dQ_dspsetup() {
    this->svf_tilde_01_dQ_reset();
}

void svf_tilde_01_dQ_reset() {
    this->svf_tilde_01_dQ_prev = 0;
}

void svf_tilde_01_reset() {
    this->svf_tilde_01_low = 0;
    this->svf_tilde_01_high = 0;
    this->svf_tilde_01_band = 0;
    this->svf_tilde_01_notch = 0;
    this->svf_tilde_01_dFreq_reset();
    this->svf_tilde_01_dQ_reset();
}

void svf_tilde_01_dspsetup(bool force) {
    if ((bool)(this->svf_tilde_01_setupDone) && (bool)(!(bool)(force)))
        return;

    this->svf_tilde_01_reset();
    this->svf_tilde_01_setupDone = true;
    this->svf_tilde_01_dFreq_dspsetup();
    this->svf_tilde_01_dQ_dspsetup();
}

void random_08_nz_reset() {
    xoshiro_reset(
        systemticks() + this->voice() + this->random(0, 10000),
        this->random_08_nz_state
    );
}

void random_08_nz_init() {
    this->random_08_nz_reset();
}

void random_08_nz_seed(number v) {
    xoshiro_reset(v, this->random_08_nz_state);
}

number random_08_nz_next() {
    return xoshiro_next(this->random_08_nz_state);
}

void metro_01_onTransportChanged(number ) {}

void metro_01_onBeatTimeChanged(number ) {}

number numbertilde_01_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_01_smooth_d_prev);
    this->numbertilde_01_smooth_d_prev = x;
    return temp;
}

void numbertilde_01_smooth_d_dspsetup() {
    this->numbertilde_01_smooth_d_reset();
}

void numbertilde_01_smooth_d_reset() {
    this->numbertilde_01_smooth_d_prev = 0;
}

number numbertilde_01_smooth_next(number x, number up, number down) {
    if (this->numbertilde_01_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_01_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_01_smooth_index = _up;
            this->numbertilde_01_smooth_increment = (x - this->numbertilde_01_smooth_prev) / _up;
        } else if (x < this->numbertilde_01_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_01_smooth_index = _down;
            this->numbertilde_01_smooth_increment = (x - this->numbertilde_01_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_01_smooth_index > 0) {
        this->numbertilde_01_smooth_prev += this->numbertilde_01_smooth_increment;
        this->numbertilde_01_smooth_index -= 1;
    } else {
        this->numbertilde_01_smooth_prev = x;
    }

    return this->numbertilde_01_smooth_prev;
}

void numbertilde_01_smooth_reset() {
    this->numbertilde_01_smooth_prev = 0;
    this->numbertilde_01_smooth_index = 0;
    this->numbertilde_01_smooth_increment = 0;
    this->numbertilde_01_smooth_d_reset();
}

void numbertilde_01_init() {
    this->numbertilde_01_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-23"), 1, this->_currentTime);
}

void numbertilde_01_dspsetup(bool force) {
    if ((bool)(this->numbertilde_01_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_01_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_01_currentInterval = this->numbertilde_01_currentIntervalInSamples;
    this->numbertilde_01_rampInSamples = this->mstosamps(this->numbertilde_01_ramp);
    this->numbertilde_01_setupDone = true;
    this->numbertilde_01_smooth_d_dspsetup();
}

void counter_01_inc() {
    this->counter_01_count = ((bool)(this->counter_01_phase) ? this->counter_01_count + 1 : this->counter_01_count - 1);
}

void param_02_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_02_value;
}

void param_02_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_02_value_set(preset["value"]);
}

number svf_tilde_02_dFreq_next(number x) {
    number temp = (number)(x - this->svf_tilde_02_dFreq_prev);
    this->svf_tilde_02_dFreq_prev = x;
    return temp;
}

void svf_tilde_02_dFreq_dspsetup() {
    this->svf_tilde_02_dFreq_reset();
}

void svf_tilde_02_dFreq_reset() {
    this->svf_tilde_02_dFreq_prev = 0;
}

number svf_tilde_02_dQ_next(number x) {
    number temp = (number)(x - this->svf_tilde_02_dQ_prev);
    this->svf_tilde_02_dQ_prev = x;
    return temp;
}

void svf_tilde_02_dQ_dspsetup() {
    this->svf_tilde_02_dQ_reset();
}

void svf_tilde_02_dQ_reset() {
    this->svf_tilde_02_dQ_prev = 0;
}

void svf_tilde_02_reset() {
    this->svf_tilde_02_low = 0;
    this->svf_tilde_02_high = 0;
    this->svf_tilde_02_band = 0;
    this->svf_tilde_02_notch = 0;
    this->svf_tilde_02_dFreq_reset();
    this->svf_tilde_02_dQ_reset();
}

void svf_tilde_02_dspsetup(bool force) {
    if ((bool)(this->svf_tilde_02_setupDone) && (bool)(!(bool)(force)))
        return;

    this->svf_tilde_02_reset();
    this->svf_tilde_02_setupDone = true;
    this->svf_tilde_02_dFreq_dspsetup();
    this->svf_tilde_02_dQ_dspsetup();
}

void param_03_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_03_value;
}

void param_03_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_03_value_set(preset["value"]);
}

number limi_01_dc1_next(number x, number gain) {
    number y = x - this->limi_01_dc1_xm1 + this->limi_01_dc1_ym1 * gain;
    this->limi_01_dc1_xm1 = x;
    this->limi_01_dc1_ym1 = y;
    return y;
}

void limi_01_dc1_reset() {
    this->limi_01_dc1_xm1 = 0;
    this->limi_01_dc1_ym1 = 0;
}

void limi_01_dc1_dspsetup() {
    this->limi_01_dc1_reset();
}

number limi_01_dc2_next(number x, number gain) {
    number y = x - this->limi_01_dc2_xm1 + this->limi_01_dc2_ym1 * gain;
    this->limi_01_dc2_xm1 = x;
    this->limi_01_dc2_ym1 = y;
    return y;
}

void limi_01_dc2_reset() {
    this->limi_01_dc2_xm1 = 0;
    this->limi_01_dc2_ym1 = 0;
}

void limi_01_dc2_dspsetup() {
    this->limi_01_dc2_reset();
}

number limi_01_dc_next(Index i, number x, number gain) {
    switch ((int)i) {
    case 0:
        {
        return this->limi_01_dc1_next(x, gain);
        }
    default:
        {
        return this->limi_01_dc2_next(x, gain);
        }
    }

    return 0;
}

void limi_01_dc_reset(Index i) {
    switch ((int)i) {
    case 0:
        {
        return this->limi_01_dc1_reset();
        }
    default:
        {
        return this->limi_01_dc2_reset();
        }
    }
}

void limi_01_dc_dspsetup(Index i) {
    switch ((int)i) {
    case 0:
        {
        return this->limi_01_dc1_dspsetup();
        }
    default:
        {
        return this->limi_01_dc2_dspsetup();
        }
    }
}

void limi_01_reset() {
    this->limi_01_recover = (number)1000 / (this->limi_01_release * this->samplerate());

    {
        this->limi_01_recover *= 0.707;
    }
}

void limi_01_dspsetup(bool force) {
    if ((bool)(this->limi_01_setupDone) && (bool)(!(bool)(force)))
        return;

    this->limi_01_reset();
    this->limi_01_setupDone = true;
    this->limi_01_dc1_dspsetup();
    this->limi_01_dc2_dspsetup();
}

void adsr_01_dspsetup(bool force) {
    if ((bool)(this->adsr_01_setupDone) && (bool)(!(bool)(force)))
        return;

    this->adsr_01_mspersamp = (number)1000 / this->sr;
    this->adsr_01_setupDone = true;
}

number svf_tilde_03_dFreq_next(number x) {
    number temp = (number)(x - this->svf_tilde_03_dFreq_prev);
    this->svf_tilde_03_dFreq_prev = x;
    return temp;
}

void svf_tilde_03_dFreq_dspsetup() {
    this->svf_tilde_03_dFreq_reset();
}

void svf_tilde_03_dFreq_reset() {
    this->svf_tilde_03_dFreq_prev = 0;
}

number svf_tilde_03_dQ_next(number x) {
    number temp = (number)(x - this->svf_tilde_03_dQ_prev);
    this->svf_tilde_03_dQ_prev = x;
    return temp;
}

void svf_tilde_03_dQ_dspsetup() {
    this->svf_tilde_03_dQ_reset();
}

void svf_tilde_03_dQ_reset() {
    this->svf_tilde_03_dQ_prev = 0;
}

void svf_tilde_03_reset() {
    this->svf_tilde_03_low = 0;
    this->svf_tilde_03_high = 0;
    this->svf_tilde_03_band = 0;
    this->svf_tilde_03_notch = 0;
    this->svf_tilde_03_dFreq_reset();
    this->svf_tilde_03_dQ_reset();
}

void svf_tilde_03_dspsetup(bool force) {
    if ((bool)(this->svf_tilde_03_setupDone) && (bool)(!(bool)(force)))
        return;

    this->svf_tilde_03_reset();
    this->svf_tilde_03_setupDone = true;
    this->svf_tilde_03_dFreq_dspsetup();
    this->svf_tilde_03_dQ_dspsetup();
}

void param_04_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_04_value;
}

void param_04_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_04_value_set(preset["value"]);
}

void param_05_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_05_value;
}

void param_05_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_05_value_set(preset["value"]);
}

void param_06_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_06_value;
}

void param_06_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_06_value_set(preset["value"]);
}

void param_07_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_07_value;
}

void param_07_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_07_value_set(preset["value"]);
}

void param_08_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_08_value;
}

void param_08_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_08_value_set(preset["value"]);
}

void param_09_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_09_value;
}

void param_09_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_09_value_set(preset["value"]);
}

void param_10_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_10_value;
}

void param_10_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_10_value_set(preset["value"]);
}

void param_11_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_11_value;
}

void param_11_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_11_value_set(preset["value"]);
}

void param_12_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_12_value;
}

void param_12_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_12_value_set(preset["value"]);
}

void tempo_01_onTempoChanged(number tempo) {
    this->tempo_01_tempo_set(tempo);
}

Index globaltransport_getSampleOffset(MillisecondTime time) {
    return this->mstosamps(this->maximum(0, time - this->getEngine()->getCurrentTime()));
}

number globaltransport_getTempoAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_tempo[(Index)sampleOffset] : this->globaltransport_lastTempo);
}

number globaltransport_getStateAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_state[(Index)sampleOffset] : this->globaltransport_lastState);
}

number globaltransport_getState(MillisecondTime time) {
    return this->globaltransport_getStateAtSample(this->globaltransport_getSampleOffset(time));
}

number globaltransport_getBeatTime(MillisecondTime time) {
    number i = 2;

    while (i < this->globaltransport_beatTimeChanges->length && this->globaltransport_beatTimeChanges[(Index)(i + 1)] <= time) {
        i += 2;
    }

    i -= 2;
    number beatTimeBase = this->globaltransport_beatTimeChanges[(Index)i];

    if (this->globaltransport_getState(time) == 0)
        return beatTimeBase;

    number beatTimeBaseMsTime = this->globaltransport_beatTimeChanges[(Index)(i + 1)];
    number diff = time - beatTimeBaseMsTime;
    return beatTimeBase + this->mstobeats(diff);
}

bool globaltransport_setTempo(MillisecondTime time, number tempo, bool notify) {
    if ((bool)(notify)) {
        this->processTempoEvent(time, tempo);
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getTempoAtSample(offset) != tempo) {
            this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
            this->globaltransport_beatTimeChanges->push(time);
            fillSignal(this->globaltransport_tempo, this->vs, tempo, offset);
            this->globaltransport_lastTempo = tempo;
            this->globaltransport_tempoNeedsReset = true;
            return true;
        }
    }

    return false;
}

number globaltransport_getTempo(MillisecondTime time) {
    return this->globaltransport_getTempoAtSample(this->globaltransport_getSampleOffset(time));
}

bool globaltransport_setState(MillisecondTime time, number state, bool notify) {
    if ((bool)(notify)) {
        this->processTransportEvent(time, TransportState(state));
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getStateAtSample(offset) != state) {
            fillSignal(this->globaltransport_state, this->vs, state, offset);
            this->globaltransport_lastState = TransportState(state);
            this->globaltransport_stateNeedsReset = true;

            if (state == 0) {
                this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
                this->globaltransport_beatTimeChanges->push(time);
            }

            return true;
        }
    }

    return false;
}

bool globaltransport_setBeatTime(MillisecondTime time, number beattime, bool notify) {
    if ((bool)(notify)) {
        this->processBeatTimeEvent(time, beattime);
        this->globaltransport_notify = true;
        return false;
    } else {
        bool beatTimeHasChanged = false;
        float oldBeatTime = (float)(this->globaltransport_getBeatTime(time));
        float newBeatTime = (float)(beattime);

        if (oldBeatTime != newBeatTime) {
            beatTimeHasChanged = true;
        }

        this->globaltransport_beatTimeChanges->push(beattime);
        this->globaltransport_beatTimeChanges->push(time);
        return beatTimeHasChanged;
    }
}

number globaltransport_getBeatTimeAtSample(SampleIndex sampleOffset) {
    auto msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getBeatTime(this->getEngine()->getCurrentTime() + msOffset);
}

array<number, 2> globaltransport_getTimeSignature(MillisecondTime time) {
    number i = 3;

    while (i < this->globaltransport_timeSignatureChanges->length && this->globaltransport_timeSignatureChanges[(Index)(i + 2)] <= time) {
        i += 3;
    }

    i -= 3;

    return {
        this->globaltransport_timeSignatureChanges[(Index)i],
        this->globaltransport_timeSignatureChanges[(Index)(i + 1)]
    };
}

array<number, 2> globaltransport_getTimeSignatureAtSample(SampleIndex sampleOffset) {
    auto msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getTimeSignature(this->getEngine()->getCurrentTime() + msOffset);
}

bool globaltransport_setTimeSignature(MillisecondTime time, number numerator, number denominator, bool notify) {
    if ((bool)(notify)) {
        this->processTimeSignatureEvent(time, (int)(numerator), (int)(denominator));
        this->globaltransport_notify = true;
    } else {
        array<number, 2> currentSig = this->globaltransport_getTimeSignature(time);

        if (currentSig[0] != numerator || currentSig[1] != denominator) {
            this->globaltransport_timeSignatureChanges->push(numerator);
            this->globaltransport_timeSignatureChanges->push(denominator);
            this->globaltransport_timeSignatureChanges->push(time);
            return true;
        }
    }

    return false;
}

void globaltransport_advance() {
    if ((bool)(this->globaltransport_tempoNeedsReset)) {
        fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
        this->globaltransport_tempoNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTempoEvent(this->globaltransport_lastTempo);
        }
    }

    if ((bool)(this->globaltransport_stateNeedsReset)) {
        fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
        this->globaltransport_stateNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTransportEvent(TransportState(this->globaltransport_lastState));
        }
    }

    if (this->globaltransport_beatTimeChanges->length > 2) {
        this->globaltransport_beatTimeChanges[0] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 2)];
        this->globaltransport_beatTimeChanges[1] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 1)];
        this->globaltransport_beatTimeChanges->length = 2;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendBeatTimeEvent(this->globaltransport_beatTimeChanges[0]);
        }
    }

    if (this->globaltransport_timeSignatureChanges->length > 3) {
        this->globaltransport_timeSignatureChanges[0] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 3)];
        this->globaltransport_timeSignatureChanges[1] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 2)];
        this->globaltransport_timeSignatureChanges[2] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 1)];
        this->globaltransport_timeSignatureChanges->length = 3;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTimeSignatureEvent(
                (int)(this->globaltransport_timeSignatureChanges[0]),
                (int)(this->globaltransport_timeSignatureChanges[1])
            );
        }
    }

    this->globaltransport_notify = false;
}

void globaltransport_dspsetup(bool force) {
    if ((bool)(this->globaltransport_setupDone) && (bool)(!(bool)(force)))
        return;

    fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
    this->globaltransport_tempoNeedsReset = false;
    fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
    this->globaltransport_stateNeedsReset = false;
    this->globaltransport_setupDone = true;
}

bool stackprotect_check() {
    this->stackprotect_count++;

    if (this->stackprotect_count > 128) {
        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
        return true;
    }

    return false;
}

void updateTime(MillisecondTime time) {
    this->_currentTime = time;
    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));

    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;

    if (this->sampleOffsetIntoNextAudioBuffer < 0)
        this->sampleOffsetIntoNextAudioBuffer = 0;
}

void assign_defaults()
{
    param_01_value = 110;
    p_03_target = 0;
    dspexpr_09_in1 = 0;
    dspexpr_09_in2 = 0;
    svf_tilde_01_x = 0;
    svf_tilde_01_freq = 1200;
    svf_tilde_01_q = 0.2;
    expr_43_in1 = 0;
    expr_43_in2 = 3;
    expr_43_out1 = 0;
    expr_44_in1 = 0;
    expr_44_in2 = 1;
    expr_44_out1 = 0;
    loadmess_01_message = { 1 };
    random_08_limit = 9;
    random_08_limit_setter(random_08_limit);
    random_08_seed = 0;
    metro_01_on = 0;
    metro_01_interval = 612.244898;
    metro_01_interval_setter(metro_01_interval);
    scale_tilde_01_x = 0;
    scale_tilde_01_lowin = 0;
    scale_tilde_01_hiin = 1;
    scale_tilde_01_lowout = 120;
    scale_tilde_01_highout = 1500;
    scale_tilde_01_pow = 1;
    numbertilde_01_input_number = 0;
    numbertilde_01_ramp = 0;
    p_04_target = 0;
    p_05_target = 0;
    route_10_selector1 = 0;
    counter_01_carryflag = 0;
    counter_01_direction = 0;
    counter_01_resetnext_number = 0;
    counter_01_resetnow_number = 0;
    counter_01_maximum = 63;
    counter_01_output = 0;
    counter_01_underflow_number = 0;
    counter_01_overflow_number = 0;
    counter_01_carry = 0;
    counter_01_minimum = 0;
    param_02_value = 31;
    svf_tilde_02_x = 0;
    svf_tilde_02_freq = 0;
    svf_tilde_02_q = 0;
    dspexpr_10_in1 = 0;
    dspexpr_10_in2 = 0;
    dspexpr_11_in1 = 0;
    dspexpr_11_in2 = 0;
    param_03_value = 4;
    limi_01_bypass = 0;
    limi_01_dcblock = 0;
    limi_01_lookahead = 100;
    limi_01_lookahead_setter(limi_01_lookahead);
    limi_01_preamp = 0;
    limi_01_preamp_setter(limi_01_preamp);
    limi_01_postamp = 0;
    limi_01_postamp_setter(limi_01_postamp);
    limi_01_threshold = 0;
    limi_01_threshold_setter(limi_01_threshold);
    limi_01_release = 1000;
    adsr_01_trigger_number = 0;
    adsr_01_attack = 2000;
    adsr_01_decay = 6000;
    adsr_01_sustain = 0;
    adsr_01_release = 1000;
    adsr_01_legato = 0;
    svf_tilde_03_x = 0;
    svf_tilde_03_freq = 0;
    svf_tilde_03_q = 0;
    dspexpr_12_in1 = 0;
    dspexpr_12_in2 = 0;
    scale_tilde_02_x = 0;
    scale_tilde_02_lowin = 0;
    scale_tilde_02_hiin = 1;
    scale_tilde_02_lowout = 120;
    scale_tilde_02_highout = 5000;
    scale_tilde_02_pow = 1;
    param_04_value = 100;
    param_05_value = 12000;
    dspexpr_13_in1 = 0;
    dspexpr_13_in2 = 0.707;
    dspexpr_14_in1 = 0;
    param_06_value = 24000;
    p_06_target = 0;
    param_07_value = 1;
    param_08_value = 0.7;
    dspexpr_15_in1 = 0;
    param_09_value = 8000;
    param_10_value = 0;
    param_11_value = 0.7;
    dspexpr_16_in1 = 0;
    scale_tilde_03_x = 0;
    scale_tilde_03_lowin = 0;
    scale_tilde_03_hiin = 1;
    scale_tilde_03_lowout = 0;
    scale_tilde_03_highout = 0.63;
    scale_tilde_03_pow = 1;
    dspexpr_17_in1 = 0;
    dspexpr_17_in2 = 1;
    param_12_value = 3000;
    loadmess_02_message = { 98 };
    tempo_01_input_number = 0;
    _currentTime = 0;
    audioProcessSampleCount = 0;
    sampleOffsetIntoNextAudioBuffer = 0;
    zeroBuffer = nullptr;
    dummyBuffer = nullptr;
    signals[0] = nullptr;
    signals[1] = nullptr;
    signals[2] = nullptr;
    signals[3] = nullptr;
    signals[4] = nullptr;
    signals[5] = nullptr;
    signals[6] = nullptr;
    signals[7] = nullptr;
    didAllocateSignals = 0;
    vs = 0;
    maxvs = 0;
    sr = 44100;
    invsr = 0.00002267573696;
    param_01_lastValue = 0;
    scopetilde_01_lastValue = 0;
    scopetilde_01_effectiveCount = 256;
    scopetilde_01_xsign = 1;
    scopetilde_01_ysign = 1;
    scopetilde_01_mode = 0;
    scopetilde_01_setupDone = false;
    svf_tilde_01_low = 0;
    svf_tilde_01_high = 0;
    svf_tilde_01_band = 0;
    svf_tilde_01_notch = 0;
    svf_tilde_01__freq = 0.001;
    svf_tilde_01__q = 0.001;
    svf_tilde_01_dFreq_prev = 0;
    svf_tilde_01_dQ_prev = 0;
    svf_tilde_01_setupDone = false;
    metro_01_last = -1;
    metro_01_next = -1;
    numbertilde_01_currentInterval = 0;
    numbertilde_01_currentIntervalInSamples = 0;
    numbertilde_01_lastValue = 0;
    numbertilde_01_outValue = 0;
    numbertilde_01_rampInSamples = 0;
    numbertilde_01_currentMode = 0;
    numbertilde_01_smooth_d_prev = 0;
    numbertilde_01_smooth_prev = 0;
    numbertilde_01_smooth_index = 0;
    numbertilde_01_smooth_increment = 0;
    numbertilde_01_setupDone = false;
    counter_01_count = 0;
    counter_01_phase = true;
    param_02_lastValue = 0;
    svf_tilde_02_low = 0;
    svf_tilde_02_high = 0;
    svf_tilde_02_band = 0;
    svf_tilde_02_notch = 0;
    svf_tilde_02__freq = 0.001;
    svf_tilde_02__q = 0.001;
    svf_tilde_02_dFreq_prev = 0;
    svf_tilde_02_dQ_prev = 0;
    svf_tilde_02_setupDone = false;
    param_03_lastValue = 0;
    limi_01_last = 0;
    limi_01_lookaheadIndex = 0;
    limi_01_recover = 0;
    limi_01_lookaheadInv = 0;
    limi_01_dc1_xm1 = 0;
    limi_01_dc1_ym1 = 0;
    limi_01_dc2_xm1 = 0;
    limi_01_dc2_ym1 = 0;
    limi_01_setupDone = false;
    adsr_01_phase = 3;
    adsr_01_mspersamp = 0;
    adsr_01_time = 0;
    adsr_01_lastTriggerVal = 0;
    adsr_01_amplitude = 0;
    adsr_01_outval = 0;
    adsr_01_startingpoint = 0;
    adsr_01_triggerBuf = nullptr;
    adsr_01_triggerValueBuf = nullptr;
    adsr_01_setupDone = false;
    svf_tilde_03_low = 0;
    svf_tilde_03_high = 0;
    svf_tilde_03_band = 0;
    svf_tilde_03_notch = 0;
    svf_tilde_03__freq = 0.001;
    svf_tilde_03__q = 0.001;
    svf_tilde_03_dFreq_prev = 0;
    svf_tilde_03_dQ_prev = 0;
    svf_tilde_03_setupDone = false;
    param_04_lastValue = 0;
    param_05_lastValue = 0;
    param_06_lastValue = 0;
    param_07_lastValue = 0;
    param_08_lastValue = 0;
    param_09_lastValue = 0;
    param_10_lastValue = 0;
    param_11_lastValue = 0;
    param_12_lastValue = 0;
    globaltransport_tempo = nullptr;
    globaltransport_tempoNeedsReset = false;
    globaltransport_lastTempo = 120;
    globaltransport_state = nullptr;
    globaltransport_stateNeedsReset = false;
    globaltransport_lastState = 0;
    globaltransport_beatTimeChanges = { 0, 0 };
    globaltransport_timeSignatureChanges = { 4, 4, 0 };
    globaltransport_notify = false;
    globaltransport_setupDone = false;
    stackprotect_count = 0;
    _voiceIndex = 0;
    _noteNumber = 0;
    isMuted = 1;
}

// member variables

    number param_01_value;
    number p_03_target;
    list message_05_set;
    number dspexpr_09_in1;
    number dspexpr_09_in2;
    number svf_tilde_01_x;
    number svf_tilde_01_freq;
    number svf_tilde_01_q;
    number expr_43_in1;
    number expr_43_in2;
    number expr_43_out1;
    number expr_44_in1;
    number expr_44_in2;
    number expr_44_out1;
    list loadmess_01_message;
    number random_08_limit;
    number random_08_seed;
    number metro_01_on;
    number metro_01_interval;
    number scale_tilde_01_x;
    number scale_tilde_01_lowin;
    number scale_tilde_01_hiin;
    number scale_tilde_01_lowout;
    number scale_tilde_01_highout;
    number scale_tilde_01_pow;
    number numbertilde_01_input_number;
    number numbertilde_01_ramp;
    number p_04_target;
    number p_05_target;
    number route_10_selector1;
    Int counter_01_carryflag;
    number counter_01_direction;
    number counter_01_resetnext_number;
    number counter_01_resetnow_number;
    number counter_01_maximum;
    number counter_01_output;
    number counter_01_underflow_number;
    number counter_01_overflow_number;
    number counter_01_carry;
    number counter_01_minimum;
    number param_02_value;
    number svf_tilde_02_x;
    number svf_tilde_02_freq;
    number svf_tilde_02_q;
    number dspexpr_10_in1;
    number dspexpr_10_in2;
    number dspexpr_11_in1;
    number dspexpr_11_in2;
    number param_03_value;
    number limi_01_bypass;
    number limi_01_dcblock;
    number limi_01_lookahead;
    number limi_01_preamp;
    number limi_01_postamp;
    number limi_01_threshold;
    number limi_01_release;
    number adsr_01_trigger_number;
    number adsr_01_attack;
    number adsr_01_decay;
    number adsr_01_sustain;
    number adsr_01_release;
    number adsr_01_legato;
    number svf_tilde_03_x;
    number svf_tilde_03_freq;
    number svf_tilde_03_q;
    number dspexpr_12_in1;
    number dspexpr_12_in2;
    number scale_tilde_02_x;
    number scale_tilde_02_lowin;
    number scale_tilde_02_hiin;
    number scale_tilde_02_lowout;
    number scale_tilde_02_highout;
    number scale_tilde_02_pow;
    number param_04_value;
    number param_05_value;
    number dspexpr_13_in1;
    number dspexpr_13_in2;
    number dspexpr_14_in1;
    number param_06_value;
    number p_06_target;
    number param_07_value;
    number param_08_value;
    number dspexpr_15_in1;
    number param_09_value;
    number param_10_value;
    number param_11_value;
    number dspexpr_16_in1;
    number scale_tilde_03_x;
    number scale_tilde_03_lowin;
    number scale_tilde_03_hiin;
    number scale_tilde_03_lowout;
    number scale_tilde_03_highout;
    number scale_tilde_03_pow;
    number dspexpr_17_in1;
    number dspexpr_17_in2;
    number param_12_value;
    list loadmess_02_message;
    number tempo_01_input_number;
    MillisecondTime _currentTime;
    SampleIndex audioProcessSampleCount;
    SampleIndex sampleOffsetIntoNextAudioBuffer;
    signal zeroBuffer;
    signal dummyBuffer;
    SampleValue * signals[8];
    bool didAllocateSignals;
    Index vs;
    Index maxvs;
    number sr;
    number invsr;
    number param_01_lastValue;
    number scopetilde_01_lastValue;
    number scopetilde_01_effectiveCount;
    number scopetilde_01_xmonitorvalue;
    number scopetilde_01_ymonitorvalue;
    list scopetilde_01_monitorbuffer;
    number scopetilde_01_xsign;
    number scopetilde_01_ysign;
    Int scopetilde_01_mode;
    bool scopetilde_01_setupDone;
    number svf_tilde_01_low;
    number svf_tilde_01_high;
    number svf_tilde_01_band;
    number svf_tilde_01_notch;
    number svf_tilde_01__freq;
    number svf_tilde_01__q;
    number svf_tilde_01_dFreq_prev;
    number svf_tilde_01_dQ_prev;
    bool svf_tilde_01_setupDone;
    UInt random_08_nz_state[4] = { };
    number metro_01_last;
    number metro_01_next;
    SampleIndex numbertilde_01_currentInterval;
    SampleIndex numbertilde_01_currentIntervalInSamples;
    number numbertilde_01_lastValue;
    number numbertilde_01_outValue;
    number numbertilde_01_rampInSamples;
    Int numbertilde_01_currentMode;
    number numbertilde_01_smooth_d_prev;
    number numbertilde_01_smooth_prev;
    number numbertilde_01_smooth_index;
    number numbertilde_01_smooth_increment;
    bool numbertilde_01_setupDone;
    number counter_01_count;
    bool counter_01_phase;
    number param_02_lastValue;
    number svf_tilde_02_low;
    number svf_tilde_02_high;
    number svf_tilde_02_band;
    number svf_tilde_02_notch;
    number svf_tilde_02__freq;
    number svf_tilde_02__q;
    number svf_tilde_02_dFreq_prev;
    number svf_tilde_02_dQ_prev;
    bool svf_tilde_02_setupDone;
    number param_03_lastValue;
    SampleValue limi_01_lookaheadBuffers[2][512] = { };
    SampleValue limi_01_gainBuffer[512] = { };
    number limi_01_last;
    int limi_01_lookaheadIndex;
    number limi_01_recover;
    number limi_01_lookaheadInv;
    number limi_01_dc1_xm1;
    number limi_01_dc1_ym1;
    number limi_01_dc2_xm1;
    number limi_01_dc2_ym1;
    bool limi_01_setupDone;
    Int adsr_01_phase;
    number adsr_01_mspersamp;
    number adsr_01_time;
    number adsr_01_lastTriggerVal;
    number adsr_01_amplitude;
    number adsr_01_outval;
    number adsr_01_startingpoint;
    signal adsr_01_triggerBuf;
    signal adsr_01_triggerValueBuf;
    bool adsr_01_setupDone;
    number svf_tilde_03_low;
    number svf_tilde_03_high;
    number svf_tilde_03_band;
    number svf_tilde_03_notch;
    number svf_tilde_03__freq;
    number svf_tilde_03__q;
    number svf_tilde_03_dFreq_prev;
    number svf_tilde_03_dQ_prev;
    bool svf_tilde_03_setupDone;
    number param_04_lastValue;
    number param_05_lastValue;
    number param_06_lastValue;
    number param_07_lastValue;
    number param_08_lastValue;
    number param_09_lastValue;
    number param_10_lastValue;
    number param_11_lastValue;
    number param_12_lastValue;
    signal globaltransport_tempo;
    bool globaltransport_tempoNeedsReset;
    number globaltransport_lastTempo;
    signal globaltransport_state;
    bool globaltransport_stateNeedsReset;
    number globaltransport_lastState;
    list globaltransport_beatTimeChanges;
    list globaltransport_timeSignatureChanges;
    bool globaltransport_notify;
    bool globaltransport_setupDone;
    number stackprotect_count;
    DataRef RNBODefaultMtofLookupTable256;
    Index _voiceIndex;
    Int _noteNumber;
    Index isMuted;
    indexlist paramInitIndices;
    indexlist paramInitOrder;
    RNBOSubpatcher_27* p_03;
    RNBOSubpatcher_28* p_04;
    RNBOSubpatcher_29* p_05[5];
    RNBOSubpatcher_30* p_06;

};

PatcherInterface* creaternbomatic()
{
    return new rnbomatic();
}

#ifndef RNBO_NO_PATCHERFACTORY

extern "C" PatcherFactoryFunctionPtr GetPatcherFactoryFunction(PlatformInterface* platformInterface)
#else

extern "C" PatcherFactoryFunctionPtr rnbomaticFactoryFunction(PlatformInterface* platformInterface)
#endif

{
    Platform::set(platformInterface);
    return creaternbomatic;
}

} // end RNBO namespace

